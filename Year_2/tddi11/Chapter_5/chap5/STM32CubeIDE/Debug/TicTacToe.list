
TicTacToe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c80  08007968  08007968  00008968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e8  0800a5e8  0000c0e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5e8  0800a5e8  0000c0e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5e8  0800a5e8  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5e8  0800a5e8  0000b5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a5f0  0800a5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800a5f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  200000e0  0800a6d8  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000d28  0800a6d8  0000cd28  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013881  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003035  00000000  00000000  0001f997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000229d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  00023bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c290  00000000  00000000  0002496b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f0d  00000000  00000000  00050bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118ce4  00000000  00000000  00064b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d7ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  0017d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001821bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000e0 	.word	0x200000e0
 8000214:	00000000 	.word	0x00000000
 8000218:	08007950 	.word	0x08007950

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000e4 	.word	0x200000e4
 8000234:	08007950 	.word	0x08007950

08000238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <SystemInit+0x20>)
 800023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000242:	4a05      	ldr	r2, [pc, #20]	@ (8000258 <SystemInit+0x20>)
 8000244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b087      	sub	sp, #28
 8000260:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000262:	4b4f      	ldr	r3, [pc, #316]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0308 	and.w	r3, r3, #8
 800026a:	2b00      	cmp	r3, #0
 800026c:	d107      	bne.n	800027e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800026e:	4b4c      	ldr	r3, [pc, #304]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000274:	0a1b      	lsrs	r3, r3, #8
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	e005      	b.n	800028a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800027e:	4b48      	ldr	r3, [pc, #288]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	091b      	lsrs	r3, r3, #4
 8000284:	f003 030f 	and.w	r3, r3, #15
 8000288:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800028a:	4a46      	ldr	r2, [pc, #280]	@ (80003a4 <SystemCoreClockUpdate+0x148>)
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000294:	4b42      	ldr	r3, [pc, #264]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	f003 030c 	and.w	r3, r3, #12
 800029c:	2b0c      	cmp	r3, #12
 800029e:	d866      	bhi.n	800036e <SystemCoreClockUpdate+0x112>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <SystemCoreClockUpdate+0x4c>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002dd 	.word	0x080002dd
 80002ac:	0800036f 	.word	0x0800036f
 80002b0:	0800036f 	.word	0x0800036f
 80002b4:	0800036f 	.word	0x0800036f
 80002b8:	080002e5 	.word	0x080002e5
 80002bc:	0800036f 	.word	0x0800036f
 80002c0:	0800036f 	.word	0x0800036f
 80002c4:	0800036f 	.word	0x0800036f
 80002c8:	080002ed 	.word	0x080002ed
 80002cc:	0800036f 	.word	0x0800036f
 80002d0:	0800036f 	.word	0x0800036f
 80002d4:	0800036f 	.word	0x0800036f
 80002d8:	080002f5 	.word	0x080002f5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80002dc:	4a32      	ldr	r2, [pc, #200]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	6013      	str	r3, [r2, #0]
      break;
 80002e2:	e048      	b.n	8000376 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002e4:	4b30      	ldr	r3, [pc, #192]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 80002e6:	4a31      	ldr	r2, [pc, #196]	@ (80003ac <SystemCoreClockUpdate+0x150>)
 80002e8:	601a      	str	r2, [r3, #0]
      break;
 80002ea:	e044      	b.n	8000376 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 80002ee:	4a2f      	ldr	r2, [pc, #188]	@ (80003ac <SystemCoreClockUpdate+0x150>)
 80002f0:	601a      	str	r2, [r3, #0]
      break;
 80002f2:	e040      	b.n	8000376 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80002f4:	4b2a      	ldr	r3, [pc, #168]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	f003 0303 	and.w	r3, r3, #3
 80002fc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80002fe:	4b28      	ldr	r3, [pc, #160]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d003      	beq.n	800031a <SystemCoreClockUpdate+0xbe>
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d006      	beq.n	8000326 <SystemCoreClockUpdate+0xca>
 8000318:	e00b      	b.n	8000332 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800031a:	4a24      	ldr	r2, [pc, #144]	@ (80003ac <SystemCoreClockUpdate+0x150>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000322:	613b      	str	r3, [r7, #16]
          break;
 8000324:	e00b      	b.n	800033e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000326:	4a21      	ldr	r2, [pc, #132]	@ (80003ac <SystemCoreClockUpdate+0x150>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	fbb2 f3f3 	udiv	r3, r2, r3
 800032e:	613b      	str	r3, [r7, #16]
          break;
 8000330:	e005      	b.n	800033e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	fbb2 f3f3 	udiv	r3, r2, r3
 800033a:	613b      	str	r3, [r7, #16]
          break;
 800033c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800033e:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	0a1b      	lsrs	r3, r3, #8
 8000344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	fb02 f303 	mul.w	r3, r2, r3
 800034e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000350:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	0e5b      	lsrs	r3, r3, #25
 8000356:	f003 0303 	and.w	r3, r3, #3
 800035a:	3301      	adds	r3, #1
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000360:	693a      	ldr	r2, [r7, #16]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	fbb2 f3f3 	udiv	r3, r2, r3
 8000368:	4a0f      	ldr	r2, [pc, #60]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 800036a:	6013      	str	r3, [r2, #0]
      break;
 800036c:	e003      	b.n	8000376 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	6013      	str	r3, [r2, #0]
      break;
 8000374:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <SystemCoreClockUpdate+0x144>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	091b      	lsrs	r3, r3, #4
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <SystemCoreClockUpdate+0x154>)
 8000382:	5cd3      	ldrb	r3, [r2, r3]
 8000384:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	fa22 f303 	lsr.w	r3, r2, r3
 8000390:	4a05      	ldr	r2, [pc, #20]	@ (80003a8 <SystemCoreClockUpdate+0x14c>)
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	bf00      	nop
 8000396:	371c      	adds	r7, #28
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	08007a14 	.word	0x08007a14
 80003a8:	20000000 	.word	0x20000000
 80003ac:	00f42400 	.word	0x00f42400
 80003b0:	08007a04 	.word	0x08007a04

080003b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003ba:	2300      	movs	r3, #0
 80003bc:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80003be:	2004      	movs	r0, #4
 80003c0:	f000 f96a 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80003c4:	f7ff ff4a 	bl	800025c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003c8:	2007      	movs	r0, #7
 80003ca:	f000 f815 	bl	80003f8 <HAL_InitTick>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80003d4:	2301      	movs	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	e001      	b.n	80003de <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003da:	f000 f805 	bl	80003e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80003de:	79fb      	ldrb	r3, [r7, #7]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <HAL_InitTick+0x6c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d023      	beq.n	8000454 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <HAL_InitTick+0x70>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <HAL_InitTick+0x6c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4619      	mov	r1, r3
 8000416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041a:	fbb3 f3f1 	udiv	r3, r3, r1
 800041e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f96b 	bl	80006fe <HAL_SYSTICK_Config>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d10f      	bne.n	800044e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2b07      	cmp	r3, #7
 8000432:	d809      	bhi.n	8000448 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000434:	2200      	movs	r2, #0
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800043c:	f000 f937 	bl	80006ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000440:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <HAL_InitTick+0x74>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	e007      	b.n	8000458 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e004      	b.n	8000458 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	73fb      	strb	r3, [r7, #15]
 8000452:	e001      	b.n	8000458 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000458:	7bfb      	ldrb	r3, [r7, #15]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000008 	.word	0x20000008
 8000468:	20000000 	.word	0x20000000
 800046c:	20000004 	.word	0x20000004

08000470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <HAL_IncTick+0x20>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <HAL_IncTick+0x24>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a04      	ldr	r2, [pc, #16]	@ (8000494 <HAL_IncTick+0x24>)
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000008 	.word	0x20000008
 8000494:	200000fc 	.word	0x200000fc

08000498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return uwTick;
 800049c:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <HAL_GetTick+0x14>)
 800049e:	681b      	ldr	r3, [r3, #0]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	200000fc 	.word	0x200000fc

080004b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004b8:	f7ff ffee 	bl	8000498 <HAL_GetTick>
 80004bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004c8:	d005      	beq.n	80004d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <HAL_Delay+0x44>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4413      	add	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004d6:	bf00      	nop
 80004d8:	f7ff ffde 	bl	8000498 <HAL_GetTick>
 80004dc:	4602      	mov	r2, r0
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d8f7      	bhi.n	80004d8 <HAL_Delay+0x28>
  {
  }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000008 	.word	0x20000008

080004f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f003 0307 	and.w	r3, r3, #7
 8000506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <__NVIC_SetPriorityGrouping+0x44>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800052a:	4a04      	ldr	r2, [pc, #16]	@ (800053c <__NVIC_SetPriorityGrouping+0x44>)
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <__NVIC_GetPriorityGrouping+0x18>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	f003 0307 	and.w	r3, r3, #7
}
 800054e:	4618      	mov	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	db0b      	blt.n	8000586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f003 021f 	and.w	r2, r3, #31
 8000574:	4907      	ldr	r1, [pc, #28]	@ (8000594 <__NVIC_EnableIRQ+0x38>)
 8000576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057a:	095b      	lsrs	r3, r3, #5
 800057c:	2001      	movs	r0, #1
 800057e:	fa00 f202 	lsl.w	r2, r0, r2
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000e100 	.word	0xe000e100

08000598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	db0a      	blt.n	80005c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	490c      	ldr	r1, [pc, #48]	@ (80005e4 <__NVIC_SetPriority+0x4c>)
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	0152      	lsls	r2, r2, #5
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	440b      	add	r3, r1
 80005bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c0:	e00a      	b.n	80005d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4908      	ldr	r1, [pc, #32]	@ (80005e8 <__NVIC_SetPriority+0x50>)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 030f 	and.w	r3, r3, #15
 80005ce:	3b04      	subs	r3, #4
 80005d0:	0152      	lsls	r2, r2, #5
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	440b      	add	r3, r1
 80005d6:	761a      	strb	r2, [r3, #24]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000e100 	.word	0xe000e100
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b089      	sub	sp, #36	@ 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	f1c3 0307 	rsb	r3, r3, #7
 8000606:	2b03      	cmp	r3, #3
 8000608:	bf28      	it	cs
 800060a:	2303      	movcs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3303      	adds	r3, #3
 8000612:	2b06      	cmp	r3, #6
 8000614:	d902      	bls.n	800061c <NVIC_EncodePriority+0x30>
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3b04      	subs	r3, #4
 800061a:	e000      	b.n	800061e <NVIC_EncodePriority+0x32>
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43da      	mvns	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	401a      	ands	r2, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000634:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	43d9      	mvns	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	4313      	orrs	r3, r2
         );
}
 8000646:	4618      	mov	r0, r3
 8000648:	3724      	adds	r7, #36	@ 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3b01      	subs	r3, #1
 8000660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000664:	d301      	bcc.n	800066a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2301      	movs	r3, #1
 8000668:	e00f      	b.n	800068a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066a:	4a0a      	ldr	r2, [pc, #40]	@ (8000694 <SysTick_Config+0x40>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3b01      	subs	r3, #1
 8000670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000672:	2107      	movs	r1, #7
 8000674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000678:	f7ff ff8e 	bl	8000598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <SysTick_Config+0x40>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <SysTick_Config+0x40>)
 8000684:	2207      	movs	r2, #7
 8000686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	e000e010 	.word	0xe000e010

08000698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff29 	bl	80004f8 <__NVIC_SetPriorityGrouping>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	4603      	mov	r3, r0
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
 80006ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006bc:	f7ff ff40 	bl	8000540 <__NVIC_GetPriorityGrouping>
 80006c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	6978      	ldr	r0, [r7, #20]
 80006c8:	f7ff ff90 	bl	80005ec <NVIC_EncodePriority>
 80006cc:	4602      	mov	r2, r0
 80006ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5f 	bl	8000598 <__NVIC_SetPriority>
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff33 	bl	800055c <__NVIC_EnableIRQ>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffa4 	bl	8000654 <SysTick_Config>
 800070c:	4603      	mov	r3, r0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000716:	b480      	push	{r7}
 8000718:	b087      	sub	sp, #28
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	460b      	mov	r3, r1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8000728:	7afb      	ldrb	r3, [r7, #11]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d011      	beq.n	8000752 <HAL_EXTI_RegisterCallback+0x3c>
 800072e:	2b02      	cmp	r3, #2
 8000730:	dc13      	bgt.n	800075a <HAL_EXTI_RegisterCallback+0x44>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <HAL_EXTI_RegisterCallback+0x26>
 8000736:	2b01      	cmp	r3, #1
 8000738:	d007      	beq.n	800074a <HAL_EXTI_RegisterCallback+0x34>
 800073a:	e00e      	b.n	800075a <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	609a      	str	r2, [r3, #8]
      break;
 8000748:	e00a      	b.n	8000760 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	605a      	str	r2, [r3, #4]
      break;
 8000750:	e006      	b.n	8000760 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	609a      	str	r2, [r3, #8]
      break;
 8000758:	e002      	b.n	8000760 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	75fb      	strb	r3, [r7, #23]
      break;
 800075e:	bf00      	nop
  }

  return status;
 8000760:	7dfb      	ldrb	r3, [r7, #23]
}
 8000762:	4618      	mov	r0, r3
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e003      	b.n	800078a <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	0c1b      	lsrs	r3, r3, #16
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	015a      	lsls	r2, r3, #5
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <HAL_EXTI_IRQHandler+0x88>)
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d009      	beq.n	80007ea <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	015a      	lsls	r2, r3, #5
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <HAL_EXTI_IRQHandler+0x8c>)
 80007f0:	4413      	add	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d009      	beq.n	8000818 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	4798      	blx	r3
    }
  }
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	4002f40c 	.word	0x4002f40c
 8000824:	4002f410 	.word	0x4002f410

08000828 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING
  *           @arg @ref EXTI_TRIGGER_FALLING
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	@ 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
 8000848:	2201      	movs	r2, #1
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	613b      	str	r3, [r7, #16]

  if(Edge != EXTI_TRIGGER_RISING)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d005      	beq.n	8000864 <HAL_EXTI_GetPending+0x3c>
  {
    /* Get falling edge pending bit */
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	015a      	lsls	r2, r3, #5
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_EXTI_GetPending+0x64>)
 800085e:	4413      	add	r3, r2
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	e004      	b.n	800086e <HAL_EXTI_GetPending+0x46>
  }
  else
  {
    /* Get rising edge pending bit */
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	015a      	lsls	r2, r3, #5
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_EXTI_GetPending+0x68>)
 800086a:	4413      	add	r3, r2
 800086c:	61fb      	str	r3, [r7, #28]
  }

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	401a      	ands	r2, r3
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
 800087c:	60fb      	str	r3, [r7, #12]
  return regval;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3724      	adds	r7, #36	@ 0x24
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	4002f410 	.word	0x4002f410
 8000890:	4002f40c 	.word	0x4002f40c

08000894 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING
  *           @arg @ref EXTI_TRIGGER_FALLING
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 031f 	and.w	r3, r3, #31
 80008b2:	2201      	movs	r2, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	60fb      	str	r3, [r7, #12]

  if(Edge != EXTI_TRIGGER_RISING)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d005      	beq.n	80008cc <HAL_EXTI_ClearPending+0x38>
  {
    /* Get falling edge pending register address */
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_EXTI_ClearPending+0x54>)
 80008c6:	4413      	add	r3, r2
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e004      	b.n	80008d6 <HAL_EXTI_ClearPending+0x42>
  }
  else
  {
    /* Get falling edge pending register address */
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_EXTI_ClearPending+0x58>)
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
  }

  /* Clear Pending bit */
  *regaddr =  maskline;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	4002f410 	.word	0x4002f410
 80008ec:	4002f40c 	.word	0x4002f40c

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008fe:	e158      	b.n	8000bb2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 814a 	beq.w	8000bac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x40>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 0201 	and.w	r2, r3, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0203 	and.w	r2, r3, #3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 80a4 	beq.w	8000bac <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000a64:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3318      	adds	r3, #24
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a52      	ldr	r2, [pc, #328]	@ (8000bd4 <HAL_GPIO_Init+0x2e4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d025      	beq.n	8000adc <HAL_GPIO_Init+0x1ec>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a51      	ldr	r2, [pc, #324]	@ (8000bd8 <HAL_GPIO_Init+0x2e8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d01f      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a50      	ldr	r2, [pc, #320]	@ (8000bdc <HAL_GPIO_Init+0x2ec>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d019      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8000be0 <HAL_GPIO_Init+0x2f0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1e0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8000be4 <HAL_GPIO_Init+0x2f4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1dc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8000be8 <HAL_GPIO_Init+0x2f8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1d8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a4c      	ldr	r2, [pc, #304]	@ (8000bec <HAL_GPIO_Init+0x2fc>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1d4>
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	e00c      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	e00a      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ac8:	2305      	movs	r3, #5
 8000aca:	e008      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000acc:	2304      	movs	r3, #4
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e004      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000adc:	2300      	movs	r3, #0
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	f002 0203 	and.w	r2, r2, #3
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	4093      	lsls	r3, r2
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000aee:	4938      	ldr	r1, [pc, #224]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3318      	adds	r3, #24
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000afc:	4b34      	ldr	r3, [pc, #208]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b20:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4a:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b76:	4a16      	ldr	r2, [pc, #88]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f ae9f 	bne.w	8000900 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	4002f400 	.word	0x4002f400
 8000bd4:	42020000 	.word	0x42020000
 8000bd8:	42020400 	.word	0x42020400
 8000bdc:	42020800 	.word	0x42020800
 8000be0:	42020c00 	.word	0x42020c00
 8000be4:	42021000 	.word	0x42021000
 8000be8:	42021400 	.word	0x42021400
 8000bec:	42021800 	.word	0x42021800

08000bf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8000bfe:	e0c7      	b.n	8000d90 <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8000c00:	2201      	movs	r2, #1
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80ba 	beq.w	8000d8a <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8000c16:	4a65      	ldr	r2, [pc, #404]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
      if (temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a5d      	ldr	r2, [pc, #372]	@ (8000db0 <HAL_GPIO_DeInit+0x1c0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d025      	beq.n	8000c8c <HAL_GPIO_DeInit+0x9c>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a5c      	ldr	r2, [pc, #368]	@ (8000db4 <HAL_GPIO_DeInit+0x1c4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d01f      	beq.n	8000c88 <HAL_GPIO_DeInit+0x98>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8000db8 <HAL_GPIO_DeInit+0x1c8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d019      	beq.n	8000c84 <HAL_GPIO_DeInit+0x94>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a5a      	ldr	r2, [pc, #360]	@ (8000dbc <HAL_GPIO_DeInit+0x1cc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <HAL_GPIO_DeInit+0x90>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a59      	ldr	r2, [pc, #356]	@ (8000dc0 <HAL_GPIO_DeInit+0x1d0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00d      	beq.n	8000c7c <HAL_GPIO_DeInit+0x8c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a58      	ldr	r2, [pc, #352]	@ (8000dc4 <HAL_GPIO_DeInit+0x1d4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <HAL_GPIO_DeInit+0x88>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <HAL_GPIO_DeInit+0x1d8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <HAL_GPIO_DeInit+0x84>
 8000c70:	2306      	movs	r3, #6
 8000c72:	e00c      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c74:	2307      	movs	r3, #7
 8000c76:	e00a      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c78:	2305      	movs	r3, #5
 8000c7a:	e008      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_DeInit+0x9e>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d136      	bne.n	8000d0c <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000c9e:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000ca0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4940      	ldr	r1, [pc, #256]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	493c      	ldr	r1, [pc, #240]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4938      	ldr	r1, [pc, #224]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000cd0:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4934      	ldr	r1, [pc, #208]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8000cee:	4a2f      	ldr	r2, [pc, #188]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	482b      	ldr	r0, [pc, #172]	@ (8000dac <HAL_GPIO_DeInit+0x1bc>)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	400a      	ands	r2, r1
 8000d06:	3318      	adds	r3, #24
 8000d08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2103      	movs	r1, #3
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	08d2      	lsrs	r2, r2, #3
 8000d40:	4019      	ands	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2103      	movs	r1, #3
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	401a      	ands	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f47f af31 	bne.w	8000c00 <HAL_GPIO_DeInit+0x10>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	4002f400 	.word	0x4002f400
 8000db0:	42020000 	.word	0x42020000
 8000db4:	42020400 	.word	0x42020400
 8000db8:	42020800 	.word	0x42020800
 8000dbc:	42020c00 	.word	0x42020c00
 8000dc0:	42021000 	.word	0x42021000
 8000dc4:	42021400 	.word	0x42021400
 8000dc8:	42021800 	.word	0x42021800

08000dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ddc:	787b      	ldrb	r3, [r7, #1]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43d9      	mvns	r1, r3
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	619a      	str	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e081      	b.n	8000f46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f8a8 	bl	8000fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2224      	movs	r2, #36	@ 0x24
 8000e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d107      	bne.n	8000eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	e006      	b.n	8000eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d104      	bne.n	8000eca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000edc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000eec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69d9      	ldr	r1, [r3, #28]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2220      	movs	r2, #32
 8000f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e021      	b.n	8000fa4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2224      	movs	r2, #36	@ 0x24
 8000f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f821 	bl	8000fc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	4608      	mov	r0, r1
 8000fde:	4611      	mov	r1, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	817b      	strh	r3, [r7, #10]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	813b      	strh	r3, [r7, #8]
 8000fea:	4613      	mov	r3, r2
 8000fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	f040 80f9 	bne.w	80011ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HAL_I2C_Mem_Write+0x34>
 8001002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0ed      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_I2C_Mem_Write+0x4e>
 800101e:	2302      	movs	r3, #2
 8001020:	e0e6      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800102a:	f7ff fa35 	bl	8000498 <HAL_GetTick>
 800102e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2319      	movs	r3, #25
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fadd 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0d1      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2221      	movs	r2, #33	@ 0x21
 8001050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2240      	movs	r2, #64	@ 0x40
 8001058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a3a      	ldr	r2, [r7, #32]
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800106c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001074:	88f8      	ldrh	r0, [r7, #6]
 8001076:	893a      	ldrh	r2, [r7, #8]
 8001078:	8979      	ldrh	r1, [r7, #10]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4603      	mov	r3, r0
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f9ed 	bl	8001464 <I2C_RequestMemoryWrite>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0a9      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2bff      	cmp	r3, #255	@ 0xff
 80010a4:	d90e      	bls.n	80010c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	22ff      	movs	r2, #255	@ 0xff
 80010aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	8979      	ldrh	r1, [r7, #10]
 80010b4:	2300      	movs	r3, #0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fc57 	bl	8001970 <I2C_TransferConfig>
 80010c2:	e00f      	b.n	80010e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	8979      	ldrh	r1, [r7, #10]
 80010d6:	2300      	movs	r3, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 fc46 	bl	8001970 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 fad6 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e07b      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001120:	3b01      	subs	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d034      	beq.n	800119c <HAL_I2C_Mem_Write+0x1c8>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001136:	2b00      	cmp	r3, #0
 8001138:	d130      	bne.n	800119c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	@ 0x80
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fa59 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e04d      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001158:	b29b      	uxth	r3, r3
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	d90e      	bls.n	800117c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	22ff      	movs	r2, #255	@ 0xff
 8001162:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001168:	b2da      	uxtb	r2, r3
 800116a:	8979      	ldrh	r1, [r7, #10]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 fbfb 	bl	8001970 <I2C_TransferConfig>
 800117a:	e00f      	b.n	800119c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800118a:	b2da      	uxtb	r2, r3
 800118c:	8979      	ldrh	r1, [r7, #10]
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 fbea 	bl	8001970 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d19e      	bne.n	80010e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 fabc 	bl	8001728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e01a      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2220      	movs	r2, #32
 80011c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_I2C_Mem_Write+0x224>)
 80011ce:	400b      	ands	r3, r1
 80011d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	fe00e800 	.word	0xfe00e800

080011fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	817b      	strh	r3, [r7, #10]
 800120e:	460b      	mov	r3, r1
 8001210:	813b      	strh	r3, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	f040 80fd 	bne.w	800141e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_I2C_Mem_Read+0x34>
 800122a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001236:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0f1      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_I2C_Mem_Read+0x4e>
 8001246:	2302      	movs	r3, #2
 8001248:	e0ea      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001252:	f7ff f921 	bl	8000498 <HAL_GetTick>
 8001256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2319      	movs	r3, #25
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f9c9 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0d5      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2222      	movs	r2, #34	@ 0x22
 8001278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2240      	movs	r2, #64	@ 0x40
 8001280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800129c:	88f8      	ldrh	r0, [r7, #6]
 800129e:	893a      	ldrh	r2, [r7, #8]
 80012a0:	8979      	ldrh	r1, [r7, #10]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4603      	mov	r3, r0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f92d 	bl	800150c <I2C_RequestMemoryRead>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0ad      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2bff      	cmp	r3, #255	@ 0xff
 80012cc:	d90e      	bls.n	80012ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	22ff      	movs	r2, #255	@ 0xff
 80012d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	8979      	ldrh	r1, [r7, #10]
 80012dc:	4b52      	ldr	r3, [pc, #328]	@ (8001428 <HAL_I2C_Mem_Read+0x22c>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 fb43 	bl	8001970 <I2C_TransferConfig>
 80012ea:	e00f      	b.n	800130c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	8979      	ldrh	r1, [r7, #10]
 80012fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <HAL_I2C_Mem_Read+0x22c>)
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 fb32 	bl	8001970 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	2104      	movs	r1, #4
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f970 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e07c      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001342:	3b01      	subs	r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d034      	beq.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001366:	2b00      	cmp	r3, #0
 8001368:	d130      	bne.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	2200      	movs	r2, #0
 8001372:	2180      	movs	r1, #128	@ 0x80
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f941 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e04d      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001388:	b29b      	uxth	r3, r3
 800138a:	2bff      	cmp	r3, #255	@ 0xff
 800138c:	d90e      	bls.n	80013ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	22ff      	movs	r2, #255	@ 0xff
 8001392:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001398:	b2da      	uxtb	r2, r3
 800139a:	8979      	ldrh	r1, [r7, #10]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fae3 	bl	8001970 <I2C_TransferConfig>
 80013aa:	e00f      	b.n	80013cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	8979      	ldrh	r1, [r7, #10]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 fad2 	bl	8001970 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d19a      	bne.n	800130c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f9a4 	bl	8001728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01a      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2220      	movs	r2, #32
 80013f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_I2C_Mem_Read+0x230>)
 80013fe:	400b      	ands	r3, r1
 8001400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800141e:	2302      	movs	r3, #2
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	80002400 	.word	0x80002400
 800142c:	fe00e800 	.word	0xfe00e800

08001430 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800143e:	b2db      	uxtb	r3, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4603      	mov	r3, r0
 8001474:	817b      	strh	r3, [r7, #10]
 8001476:	460b      	mov	r3, r1
 8001478:	813b      	strh	r3, [r7, #8]
 800147a:	4613      	mov	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	8979      	ldrh	r1, [r7, #10]
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <I2C_RequestMemoryWrite+0xa4>)
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 fa6f 	bl	8001970 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f8ff 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e02c      	b.n	8001500 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d105      	bne.n	80014b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014ac:	893b      	ldrh	r3, [r7, #8]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80014b6:	e015      	b.n	80014e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014b8:	893b      	ldrh	r3, [r7, #8]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f8e5 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e012      	b.n	8001500 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014da:	893b      	ldrh	r3, [r7, #8]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2200      	movs	r2, #0
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f884 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	80002000 	.word	0x80002000

0800150c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	461a      	mov	r2, r3
 800151a:	4603      	mov	r3, r0
 800151c:	817b      	strh	r3, [r7, #10]
 800151e:	460b      	mov	r3, r1
 8001520:	813b      	strh	r3, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	8979      	ldrh	r1, [r7, #10]
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <I2C_RequestMemoryRead+0xa4>)
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 fa1c 	bl	8001970 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f8ac 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e02c      	b.n	80015a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
 800155c:	e015      	b.n	800158a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800155e:	893b      	ldrh	r3, [r7, #8]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f892 	bl	800169a <I2C_WaitOnTXISFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e012      	b.n	80015a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	@ 0x40
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f831 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	80002000 	.word	0x80002000

080015b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d103      	bne.n	80015d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d007      	beq.n	80015f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	619a      	str	r2, [r3, #24]
  }
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160c:	e031      	b.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001614:	d02d      	beq.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7fe ff3f 	bl	8000498 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d122      	bne.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	429a      	cmp	r2, r3
 8001648:	d113      	bne.n	8001672 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4013      	ands	r3, r2
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	429a      	cmp	r2, r3
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	429a      	cmp	r2, r3
 800168e:	d0be      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016a6:	e033      	b.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f87f 	bl	80017b0 <I2C_IsErrorOccurred>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e031      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016c2:	d025      	beq.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c4:	f7fe fee8 	bl	8000498 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d302      	bcc.n	80016da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11a      	bne.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d013      	beq.n	8001710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2220      	movs	r2, #32
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d1c4      	bne.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001734:	e02f      	b.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f838 	bl	80017b0 <I2C_IsErrorOccurred>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e02d      	b.n	80017a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7fe fea5 	bl	8000498 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11a      	bne.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d013      	beq.n	8001796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f043 0220 	orr.w	r2, r3, #32
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e007      	b.n	80017a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d1c8      	bne.n	8001736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d068      	beq.n	80018ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017e4:	e049      	b.n	800187a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ec:	d045      	beq.n	800187a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ee:	f7fe fe53 	bl	8000498 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d302      	bcc.n	8001804 <I2C_IsErrorOccurred+0x54>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d13a      	bne.n	800187a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001816:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001826:	d121      	bne.n	800186c <I2C_IsErrorOccurred+0xbc>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800182e:	d01d      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b20      	cmp	r3, #32
 8001834:	d01a      	beq.n	800186c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001844:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001846:	f7fe fe27 	bl	8000498 <HAL_GetTick>
 800184a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800184c:	e00e      	b.n	800186c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800184e:	f7fe fe23 	bl	8000498 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b19      	cmp	r3, #25
 800185a:	d907      	bls.n	800186c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800186a:	e006      	b.n	800187a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b20      	cmp	r3, #32
 8001878:	d1e9      	bne.n	800184e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d003      	beq.n	8001890 <I2C_IsErrorOccurred+0xe0>
 8001888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0aa      	beq.n	80017e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2220      	movs	r2, #32
 800189e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800191c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fe45 	bl	80015b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <I2C_IsErrorOccurred+0x1bc>)
 8001936:	400b      	ands	r3, r1
 8001938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	fe00e800 	.word	0xfe00e800

08001970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	4613      	mov	r3, r2
 8001980:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001988:	7a7b      	ldrb	r3, [r7, #9]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001990:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	4313      	orrs	r3, r2
 800199a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800199e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <I2C_TransferConfig+0x60>)
 80019b0:	430b      	orrs	r3, r1
 80019b2:	43db      	mvns	r3, r3
 80019b4:	ea02 0103 	and.w	r1, r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	03ff63ff 	.word	0x03ff63ff

080019d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d138      	bne.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e032      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d139      	bne.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e033      	b.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2224      	movs	r2, #36	@ 0x24
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b30:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001b32:	f000 f861 	bl	8001bf8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b3c:	d101      	bne.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e03e      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b4e:	d101      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e035      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d101      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e02f      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001b68:	4917      	ldr	r1, [pc, #92]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	09db      	lsrs	r3, r3, #7
 8001b7e:	2232      	movs	r2, #50	@ 0x32
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	4a13      	ldr	r2, [pc, #76]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b90:	e002      	b.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba4:	d102      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f2      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb8:	d101      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e000      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	0a7c5ac5 	.word	0x0a7c5ac5
 8001bd4:	cccccccd 	.word	0xcccccccd

08001bd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be6:	6053      	str	r3, [r2, #4]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	e00a      	b.n	8001c2c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001c20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e001      	b.n	8001c2c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000

08001c40 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 bcc2 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c54:	4b99      	ldr	r3, [pc, #612]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5e:	4b97      	ldr	r3, [pc, #604]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80e9 	beq.w	8001e48 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4a>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	f040 8083 	bne.w	8001d8a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d17f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x64>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f000 bc9a 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca8:	4b84      	ldr	r3, [pc, #528]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_RCC_OscConfig+0x7e>
 8001cb4:	4b81      	ldr	r3, [pc, #516]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_OscConfig+0x8a>
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d224      	bcs.n	8001d18 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fe72 	bl	80029bc <RCC_SetFlashLatencyFromMSIRange>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f000 bc7a 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b75      	ldr	r3, [pc, #468]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a74      	ldr	r2, [pc, #464]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b72      	ldr	r3, [pc, #456]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	496f      	ldr	r1, [pc, #444]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b6e      	ldr	r3, [pc, #440]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	496a      	ldr	r1, [pc, #424]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
 8001d16:	e026      	b.n	8001d66 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b68      	ldr	r3, [pc, #416]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a67      	ldr	r2, [pc, #412]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b65      	ldr	r3, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	4962      	ldr	r1, [pc, #392]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d36:	4b61      	ldr	r3, [pc, #388]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	495d      	ldr	r1, [pc, #372]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fe31 	bl	80029bc <RCC_SetFlashLatencyFromMSIRange>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f000 bc39 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d66:	f000 fe15 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a54      	ldr	r2, [pc, #336]	@ (8001ec0 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d70:	4b54      	ldr	r3, [pc, #336]	@ (8001ec4 <HAL_RCC_OscConfig+0x284>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fb3f 	bl	80003f8 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d060      	beq.n	8001e46 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	f000 bc27 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d039      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a49      	ldr	r2, [pc, #292]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe fb7b 	bl	8000498 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da4:	e00f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da6:	f7fe fb77 	bl	8000498 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d908      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db4:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f000 bc09 	b.w	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0e9      	beq.n	8001da6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a39      	ldr	r2, [pc, #228]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	4934      	ldr	r1, [pc, #208]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df0:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	492f      	ldr	r1, [pc, #188]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e020      	b.n	8001e48 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fb41 	bl	8000498 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e18:	e00e      	b.n	8001e38 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fb3d 	bl	8000498 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d907      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e28:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e3cf      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e38:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ea      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1da>
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d07e      	beq.n	8001f52 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x226>
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d10e      	bne.n	8001e7e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06e      	beq.n	8001f50 <HAL_RCC_OscConfig+0x310>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d16a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e3ac      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x256>
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e024      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2a0>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e9e:	d113      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x288>
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a02      	ldr	r2, [pc, #8]	@ (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e012      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2a0>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	4b8b      	ldr	r3, [pc, #556]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8a      	ldr	r2, [pc, #552]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b88      	ldr	r3, [pc, #544]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a87      	ldr	r2, [pc, #540]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d019      	beq.n	8001f1c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fad6 	bl	8000498 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	e00e      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7fe fad2 	bl	8000498 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d907      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b7e      	ldr	r3, [pc, #504]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e364      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ea      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2b0>
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fabc 	bl	8000498 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f22:	e00e      	b.n	8001f42 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7fe fab8 	bl	8000498 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d907      	bls.n	8001f42 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	4b71      	ldr	r3, [pc, #452]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e34a      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b6d      	ldr	r3, [pc, #436]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ea      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2e4>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d06c      	beq.n	8002038 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x330>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d116      	bne.n	8001f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	4b61      	ldr	r3, [pc, #388]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x348>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e327      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b5b      	ldr	r3, [pc, #364]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4958      	ldr	r1, [pc, #352]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	e04c      	b.n	8002038 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d029      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa6:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a53      	ldr	r2, [pc, #332]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fa71 	bl	8000498 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e00e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7fe fa6d 	bl	8000498 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d907      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2ff      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ea      	beq.n	8001fba <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b44      	ldr	r3, [pc, #272]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4941      	ldr	r1, [pc, #260]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
 8001ff8:	e01e      	b.n	8002038 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8002000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7fe fa47 	bl	8000498 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800200c:	e00e      	b.n	800202c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200e:	f7fe fa43 	bl	8000498 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d907      	bls.n	800202c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201c:	4b36      	ldr	r3, [pc, #216]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e2d5      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ea      	bne.n	800200e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d062      	beq.n	800210a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d038      	beq.n	80020be <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205a:	4a27      	ldr	r2, [pc, #156]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f023 0310 	bic.w	r3, r3, #16
 8002060:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002064:	e007      	b.n	8002076 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002066:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800206c:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207c:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7fe fa07 	bl	8000498 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208c:	e00f      	b.n	80020ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208e:	f7fe fa03 	bl	8000498 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b07      	cmp	r3, #7
 800209a:	d908      	bls.n	80020ae <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e294      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ae:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e8      	beq.n	800208e <HAL_RCC_OscConfig+0x44e>
 80020bc:	e025      	b.n	800210a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c4:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe f9e3 	bl	8000498 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d4:	e012      	b.n	80020fc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe f9df 	bl	8000498 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	d90b      	bls.n	80020fc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e270      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020fc:	4ba8      	ldr	r3, [pc, #672]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1e5      	bne.n	80020d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 812d 	beq.w	8002372 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800211c:	4ba0      	ldr	r3, [pc, #640]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b9d      	ldr	r3, [pc, #628]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a9c      	ldr	r2, [pc, #624]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
 8002134:	4b9a      	ldr	r3, [pc, #616]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002144:	4b97      	ldr	r3, [pc, #604]	@ (80023a4 <HAL_RCC_OscConfig+0x764>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d11e      	bne.n	800218e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b94      	ldr	r3, [pc, #592]	@ (80023a4 <HAL_RCC_OscConfig+0x764>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a93      	ldr	r2, [pc, #588]	@ (80023a4 <HAL_RCC_OscConfig+0x764>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215c:	f7fe f99c 	bl	8000498 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	e00e      	b.n	8002182 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe f998 	bl	8000498 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d907      	bls.n	8002182 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	4b8c      	ldr	r3, [pc, #560]	@ (80023a4 <HAL_RCC_OscConfig+0x764>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e22a      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002182:	4b88      	ldr	r3, [pc, #544]	@ (80023a4 <HAL_RCC_OscConfig+0x764>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ea      	beq.n	8002164 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01f      	beq.n	80021da <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021a6:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	4a7c      	ldr	r2, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021b6:	4b7a      	ldr	r3, [pc, #488]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	4a78      	ldr	r2, [pc, #480]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021c8:	4b75      	ldr	r3, [pc, #468]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	4a74      	ldr	r2, [pc, #464]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d8:	e00f      	b.n	80021fa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021da:	4b71      	ldr	r3, [pc, #452]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	4a6f      	ldr	r2, [pc, #444]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021ea:	4b6d      	ldr	r3, [pc, #436]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	4a6b      	ldr	r2, [pc, #428]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d068      	beq.n	80022d4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe f949 	bl	8000498 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002208:	e011      	b.n	800222e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe f945 	bl	8000498 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d908      	bls.n	800222e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1d4      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	4b5c      	ldr	r3, [pc, #368]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0e6      	beq.n	800220a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d022      	beq.n	800228e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002248:	4b55      	ldr	r3, [pc, #340]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224e:	4a54      	ldr	r2, [pc, #336]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002258:	e011      	b.n	800227e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe f91d 	bl	8000498 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d908      	bls.n	800227e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800226c:	4b4c      	ldr	r3, [pc, #304]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ac      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800227e:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0e6      	beq.n	800225a <HAL_RCC_OscConfig+0x61a>
 800228c:	e068      	b.n	8002360 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002294:	4a42      	ldr	r2, [pc, #264]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800229a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800229e:	e011      	b.n	80022c4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7fe f8fa 	bl	8000498 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e189      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e6      	bne.n	80022a0 <HAL_RCC_OscConfig+0x660>
 80022d2:	e045      	b.n	8002360 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe f8e0 	bl	8000498 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022da:	e011      	b.n	8002300 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe f8dc 	bl	8000498 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d908      	bls.n	8002300 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ee:	4b2c      	ldr	r3, [pc, #176]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e16b      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e6      	bne.n	80022dc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800230e:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800231c:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	4a1f      	ldr	r2, [pc, #124]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800232c:	e011      	b.n	8002352 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe f8b3 	bl	8000498 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d908      	bls.n	8002352 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e142      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002352:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e6      	bne.n	800232e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04f      	beq.n	800241e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d028      	beq.n	80023d8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 8002388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_RCC_OscConfig+0x760>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe f87f 	bl	8000498 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x788>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a8:	f7fe f876 	bl	8000498 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d908      	bls.n	80023c8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b6:	4b8a      	ldr	r3, [pc, #552]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e107      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c8:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80023ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0e8      	beq.n	80023a8 <HAL_RCC_OscConfig+0x768>
 80023d6:	e022      	b.n	800241e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d8:	4b81      	ldr	r3, [pc, #516]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80023da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023de:	4a80      	ldr	r2, [pc, #512]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7fe f856 	bl	8000498 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f0:	f7fe f852 	bl	8000498 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023fe:	4b78      	ldr	r3, [pc, #480]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0e3      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002410:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e8      	bne.n	80023f0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80d7 	beq.w	80025d6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4b6d      	ldr	r3, [pc, #436]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f000 8091 	beq.w	8002558 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	2b02      	cmp	r3, #2
 800243c:	d166      	bne.n	800250c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b68      	ldr	r3, [pc, #416]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe f825 	bl	8000498 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e00e      	b.n	8002470 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe f821 	bl	8000498 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d907      	bls.n	8002470 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0b3      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002470:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ea      	bne.n	8002452 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247c:	4b58      	ldr	r3, [pc, #352]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4b58      	ldr	r3, [pc, #352]	@ (80025e4 <HAL_RCC_OscConfig+0x9a4>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800248c:	3a01      	subs	r2, #1
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002496:	0212      	lsls	r2, r2, #8
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800249e:	0852      	lsrs	r2, r2, #1
 80024a0:	3a01      	subs	r2, #1
 80024a2:	0552      	lsls	r2, r2, #21
 80024a4:	4311      	orrs	r1, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024aa:	0852      	lsrs	r2, r2, #1
 80024ac:	3a01      	subs	r2, #1
 80024ae:	0652      	lsls	r2, r2, #25
 80024b0:	4311      	orrs	r1, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024b6:	06d2      	lsls	r2, r2, #27
 80024b8:	430a      	orrs	r2, r1
 80024ba:	4949      	ldr	r1, [pc, #292]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a46      	ldr	r2, [pc, #280]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024cc:	4b44      	ldr	r3, [pc, #272]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a43      	ldr	r2, [pc, #268]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fd ffde 	bl	8000498 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	e00e      	b.n	80024fe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fd ffda 	bl	8000498 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d907      	bls.n	80024fe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b3c      	ldr	r3, [pc, #240]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e06c      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ea      	beq.n	80024e0 <HAL_RCC_OscConfig+0x8a0>
 800250a:	e064      	b.n	80025d6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a33      	ldr	r2, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fd ffbe 	bl	8000498 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	e00e      	b.n	800253e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fd ffba 	bl	8000498 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d907      	bls.n	800253e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e04c      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ea      	bne.n	8002520 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800254a:	4b25      	ldr	r3, [pc, #148]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4924      	ldr	r1, [pc, #144]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002550:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <HAL_RCC_OscConfig+0x9a8>)
 8002552:	4013      	ands	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
 8002556:	e03e      	b.n	80025d6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e039      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002564:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_OscConfig+0x9a0>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	429a      	cmp	r2, r3
 8002576:	d12c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002582:	3b01      	subs	r3, #1
 8002584:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d123      	bne.n	80025d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d11b      	bne.n	80025d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d113      	bne.n	80025d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	019f800c 	.word	0x019f800c
 80025e8:	feeefffc 	.word	0xfeeefffc

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e11c      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b90      	ldr	r3, [pc, #576]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b8d      	ldr	r3, [pc, #564]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	498b      	ldr	r1, [pc, #556]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b89      	ldr	r3, [pc, #548]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e104      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b81      	ldr	r3, [pc, #516]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800264c:	429a      	cmp	r2, r3
 800264e:	d908      	bls.n	8002662 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	497b      	ldr	r1, [pc, #492]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8085 	beq.w	800277a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d11f      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b74      	ldr	r3, [pc, #464]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0da      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002688:	f000 f9fc 	bl	8002a84 <RCC_GetSysClockFreqFromPLLSource>
 800268c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a6f      	ldr	r2, [pc, #444]	@ (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d947      	bls.n	8002726 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d141      	bne.n	8002726 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a2:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026aa:	4a68      	ldr	r2, [pc, #416]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e036      	b.n	8002726 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c0:	4b62      	ldr	r3, [pc, #392]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0b6      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d8:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0aa      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	4b58      	ldr	r3, [pc, #352]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0a2      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026f8:	f000 f8b0 	bl	800285c <HAL_RCC_GetSysClockFreq>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4a53      	ldr	r2, [pc, #332]	@ (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d90f      	bls.n	8002726 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002706:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800271a:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002720:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b49      	ldr	r3, [pc, #292]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4946      	ldr	r1, [pc, #280]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fd feae 	bl	8000498 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e013      	b.n	8002768 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fd feaa 	bl	8000498 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d90a      	bls.n	8002768 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b3e      	ldr	r3, [pc, #248]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e06a      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 020c 	and.w	r2, r3, #12
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	429a      	cmp	r2, r3
 8002778:	d1e2      	bne.n	8002740 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d105      	bne.n	800278c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800278a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d010      	beq.n	80027ba <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d208      	bcs.n	80027ba <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d210      	bcs.n	80027ea <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 020f 	bic.w	r2, r3, #15
 80027d0:	491d      	ldr	r1, [pc, #116]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_ClockConfig+0x25c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e029      	b.n	800283e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4912      	ldr	r1, [pc, #72]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	490a      	ldr	r1, [pc, #40]	@ (800284c <HAL_RCC_ClockConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002828:	f000 f8b4 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 800282c:	4603      	mov	r3, r0
 800282e:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x268>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fdde 	bl	80003f8 <HAL_InitTick>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	04c4b400 	.word	0x04c4b400
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b47      	ldr	r3, [pc, #284]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b44      	ldr	r3, [pc, #272]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d121      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11e      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002890:	4b3d      	ldr	r3, [pc, #244]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800289c:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ac:	4b36      	ldr	r3, [pc, #216]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80028b8:	4a34      	ldr	r2, [pc, #208]	@ (800298c <HAL_RCC_GetSysClockFreq+0x130>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d102      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x134>)
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e004      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x134>)
 80028e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d146      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f4:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3301      	adds	r3, #1
 8002900:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d003      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0xb4>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d00d      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0xce>
 800290e:	e019      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x134>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 800291a:	68d2      	ldr	r2, [r2, #12]
 800291c:	0a12      	lsrs	r2, r2, #8
 800291e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
        break;
 8002928:	e019      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292a:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x134>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	0a12      	lsrs	r2, r2, #8
 8002938:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
        break;
 8002942:	e00c      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	4a0e      	ldr	r2, [pc, #56]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	0a12      	lsrs	r2, r2, #8
 8002952:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
        break;
 800295c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0e5b      	lsrs	r3, r3, #25
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	3301      	adds	r3, #1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	08007a14 	.word	0x08007a14
 8002990:	00f42400 	.word	0x00f42400

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002998:	f7ff ff60 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08007a04 	.word	0x08007a04

080029bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029d4:	f7ff f896 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 80029d8:	6138      	str	r0, [r7, #16]
 80029da:	e014      	b.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff f886 	bl	8001b04 <HAL_PWREx_GetVoltageRange>
 80029f8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	4a1f      	ldr	r2, [pc, #124]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a12:	d10b      	bne.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b80      	cmp	r3, #128	@ 0x80
 8002a18:	d919      	bls.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a1e:	d902      	bls.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a20:	2302      	movs	r3, #2
 8002a22:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002a24:	e013      	b.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002a2a:	e010      	b.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d902      	bls.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a32:	2303      	movs	r3, #3
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e00a      	b.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b80      	cmp	r3, #128	@ 0x80
 8002a3c:	d102      	bne.n	8002a44 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a3e:	2302      	movs	r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b70      	cmp	r3, #112	@ 0x70
 8002a48:	d101      	bne.n	8002a4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 020f 	bic.w	r2, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40022000 	.word	0x40022000

08002a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d015      	beq.n	8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d839      	bhi.n	8002b22 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d01c      	beq.n	8002aee <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d133      	bne.n	8002b22 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aba:	4a26      	ldr	r2, [pc, #152]	@ (8002b54 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0a12      	lsrs	r2, r2, #8
 8002ac8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	613b      	str	r3, [r7, #16]
      break;
 8002ad2:	e029      	b.n	8002b28 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b54 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ade:	68d2      	ldr	r2, [r2, #12]
 8002ae0:	0a12      	lsrs	r2, r2, #8
 8002ae2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	e01c      	b.n	8002b28 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e005      	b.n	8002b16 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	613b      	str	r3, [r7, #16]
        break;
 8002b20:	e002      	b.n	8002b28 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
      break;
 8002b26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0e5b      	lsrs	r3, r3, #25
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b42:	683b      	ldr	r3, [r7, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	08007a14 	.word	0x08007a14

08002b5c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e038      	b.n	8002be4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f84d 	bl	8002c26 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3308      	adds	r3, #8
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 f868 	bl	8002c6c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	f000 f98b 	bl	8002ec2 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6858      	ldr	r0, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	f000 f9d4 	bl	8002f66 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6892      	ldr	r2, [r2, #8]
 8002bd2:	f041 0101 	orr.w	r1, r1, #1
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f820 	bl	8002c3a <HAL_SRAM_MspDeInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */

  /* Configure the SRAM registers with their reset values */
  (void)FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 f8fe 	bl	8002e08 <FMC_NORSRAM_DeInit>

  /* Reset the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_RESET;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_SRAM_MspDeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef *hsram)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspDeInit could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  return hsram->State;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c5c:	b2db      	uxtb	r3, r3
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f023 0101 	bic.w	r1, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d102      	bne.n	8002c9c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002c96:	2340      	movs	r3, #64	@ 0x40
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e001      	b.n	8002ca0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002cac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002cb2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002cb8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002cbe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8002cc4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8002cca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8002cd0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8002cd6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8002cdc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e04 <FMC_NORSRAM_Init+0x198>)
 8002d10:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d18:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d20:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002d28:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002d30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	ea02 0103 	and.w	r1, r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d5a:	d10c      	bne.n	8002d76 <FMC_NORSRAM_Init+0x10a>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d12f      	bne.n	8002df6 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d014      	beq.n	8002dda <FMC_NORSRAM_Init+0x16e>
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d819      	bhi.n	8002de8 <FMC_NORSRAM_Init+0x17c>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <FMC_NORSRAM_Init+0x152>
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d007      	beq.n	8002dcc <FMC_NORSRAM_Init+0x160>
 8002dbc:	e014      	b.n	8002de8 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]
        break;
 8002dca:	e014      	b.n	8002df6 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	621a      	str	r2, [r3, #32]
        break;
 8002dd8:	e00d      	b.n	8002df6 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]
        break;
 8002de6:	e006      	b.n	8002df6 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	621a      	str	r2, [r3, #32]
        break;
 8002df4:	bf00      	nop
    }
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	0008fb7f 	.word	0x0008fb7f

08002e08 <FMC_NORSRAM_DeInit>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_DeInit(FMC_NORSRAM_TypeDef *Device,
                                     FMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable the FMC_NORSRAM device */
  __FMC_NORSRAM_DISABLE(Device, Bank);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	f023 0101 	bic.w	r1, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize the FMC_NORSRAM device */
  /* FMC_NORSRAM_BANK1 */
  if (Bank == FMC_NORSRAM_BANK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <FMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	f243 01db 	movw	r1, #12507	@ 0x30db
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e3a:	e005      	b.n	8002e48 <FMC_NORSRAM_DeInit+0x40>
  }
  /* FMC_NORSRAM_BANK2, FMC_NORSRAM_BANK3 or FMC_NORSRAM_BANK4 */
  else
  {
    Device->BTCR[Bank] = 0x000030D2U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]   = 0x0FFFFFFFU;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* De-initialize PSRAM chip select counter */
  switch (Bank)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d017      	beq.n	8002e98 <FMC_NORSRAM_DeInit+0x90>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d81b      	bhi.n	8002ea6 <FMC_NORSRAM_DeInit+0x9e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <FMC_NORSRAM_DeInit+0x74>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d007      	beq.n	8002e8a <FMC_NORSRAM_DeInit+0x82>
 8002e7a:	e014      	b.n	8002ea6 <FMC_NORSRAM_DeInit+0x9e>
  {
    case FMC_NORSRAM_BANK1 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	621a      	str	r2, [r3, #32]
      break;
 8002e88:	e014      	b.n	8002eb4 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK2 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
      break;
 8002e96:	e00d      	b.n	8002eb4 <FMC_NORSRAM_DeInit+0xac>

    case FMC_NORSRAM_BANK3 :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	621a      	str	r2, [r3, #32]
      break;
 8002ea4:	e006      	b.n	8002eb4 <FMC_NORSRAM_DeInit+0xac>

    default :
      CLEAR_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	621a      	str	r2, [r3, #32]
      break;
 8002eb2:	bf00      	nop
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	079b      	lsls	r3, r3, #30
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	051b      	lsls	r3, r3, #20
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	3b02      	subs	r3, #2
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	3201      	adds	r2, #1
 8002f1a:	4319      	orrs	r1, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f2e:	d113      	bne.n	8002f58 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002f38:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	051b      	lsls	r3, r3, #20
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f7a:	d121      	bne.n	8002fc0 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	4319      	orrs	r1, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	4319      	orrs	r1, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	079b      	lsls	r3, r3, #30
 8002fa2:	4319      	orrs	r1, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4319      	orrs	r1, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	ea42 0103 	orr.w	r1, r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002fbe:	e005      	b.n	8002fcc <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <FT6X06_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT6X06_RegisterBusIO (FT6X06_Object_t *pObj, FT6X06_IO_t *pIO)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d103      	bne.n	8002ff4 <FT6X06_RegisterBusIO+0x18>
  {
    ret = FT6X06_ERROR;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e02c      	b.n	800304e <FT6X06_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	891a      	ldrh	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0c      	ldr	r2, [pc, #48]	@ (8003058 <FT6X06_RegisterBusIO+0x7c>)
 8003028:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0b      	ldr	r2, [pc, #44]	@ (800305c <FT6X06_RegisterBusIO+0x80>)
 800302e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <FT6X06_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4798      	blx	r3
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	e002      	b.n	800304e <FT6X06_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT6X06_ERROR;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800304c:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	080033eb 	.word	0x080033eb
 800305c:	0800341f 	.word	0x0800341f

08003060 <FT6X06_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT6X06 sensor capabilities
  * @retval Component status
  */
int32_t FT6X06_GetCapabilities(FT6X06_Object_t *pObj, FT6X06_Capabilities_t *Capabilities)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2202      	movs	r2, #2
 800307a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	22f0      	movs	r2, #240	@ 0xf0
 8003080:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	22f0      	movs	r2, #240	@ 0xf0
 8003086:	609a      	str	r2, [r3, #8]
  
  return FT6X06_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <FT6X06_Init>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_Init(FT6X06_Object_t *pObj)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT6X06_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <FT6X06_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT6X06_TS_Calibration(pObj);
#endif /* (FT6X06_AUTO_CALIBRATION_ENABLED == 1) */    
    /* By default set FT6X06 IC in Polling mode : no INT generation on FT6X06 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT6X06_DisableIT(pObj);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f954 	bl	8003360 <FT6X06_DisableIT>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
    
    pObj->IsInitialized = 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  if(ret != FT6X06_OK)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <FT6X06_Init+0x3e>
  {
    ret = FT6X06_ERROR;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030d2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <FT6X06_DeInit>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d103      	bne.n	80030f8 <FT6X06_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  return FT6X06_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <FT6X06_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t FT6X06_GestureConfig(FT6X06_Object_t *pObj, FT6X06_Gesture_Init_t *GestureInit)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0218 	add.w	r2, r3, #24
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f000 f9f4 	bl	800350c <ft6x06_radian_value>
 8003124:	60f8      	str	r0, [r7, #12]
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f103 0218 	add.w	r2, r3, #24
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 f9fa 	bl	800352e <ft6x06_offset_left_right>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f103 0218 	add.w	r2, r3, #24
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f000 f9fd 	bl	8003550 <ft6x06_offset_up_down>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f103 0218 	add.w	r2, r3, #24
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fa00 	bl	8003572 <ft6x06_disatnce_left_right>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f103 0218 	add.w	r2, r3, #24
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa03 	bl	8003594 <ft6x06_distance_up_down>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f103 0218 	add.w	r2, r3, #24
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f000 fa06 	bl	80035b6 <ft6x06_distance_zoom>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  
  if(ret != FT6X06_OK)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <FT6X06_GestureConfig+0xb8>
  {
    ret = FT6X06_ERROR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031bc:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;   
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <FT6X06_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t FT6X06_ReadID(FT6X06_Object_t *pObj, uint32_t *Id)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ft6x06_id;

  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3318      	adds	r3, #24
 80031d6:	f107 020b 	add.w	r2, r7, #11
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa0c 	bl	80035fa <ft6x06_chip_id>
 80031e2:	60f8      	str	r0, [r7, #12]
  *Id = (uint32_t) ft6x06_id;
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	461a      	mov	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	601a      	str	r2, [r3, #0]

  return ret;
 80031ec:	68fb      	ldr	r3, [r7, #12]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <FT6X06_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetState(FT6X06_Object_t *pObj, FT6X06_State_t *State)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8d0 	bl	80033aa <FT6X06_DetectTouch>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 0018 	add.w	r0, r3, #24
 8003218:	f107 0208 	add.w	r2, r7, #8
 800321c:	2304      	movs	r3, #4
 800321e:	2103      	movs	r1, #3
 8003220:	f000 f917 	bl	8003452 <ft6x06_read_reg>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <FT6X06_GetState+0x3c>
  {
    ret = FT6X06_ERROR;
 800322a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e00f      	b.n	8003252 <FT6X06_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003232:	7a3b      	ldrb	r3, [r7, #8]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800323a:	7a7a      	ldrb	r2, [r7, #9]
 800323c:	431a      	orrs	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8003242:	7abb      	ldrb	r3, [r7, #10]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800324a:	7afa      	ldrb	r2, [r7, #11]
 800324c:	431a      	orrs	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	609a      	str	r2, [r3, #8]
  }
  
  return ret;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <FT6X06_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetMultiTouchState(FT6X06_Object_t *pObj, FT6X06_MultiTouch_State_t *State)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;  
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  uint8_t  data[12];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f89d 	bl	80033aa <FT6X06_DetectTouch>
 8003270:	4603      	mov	r3, r0
 8003272:	461a      	mov	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]
  
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f103 0018 	add.w	r0, r3, #24
 800327e:	f107 0208 	add.w	r2, r7, #8
 8003282:	230c      	movs	r3, #12
 8003284:	2103      	movs	r1, #3
 8003286:	f000 f8e4 	bl	8003452 <ft6x06_read_reg>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <FT6X06_GetMultiTouchState+0x3c>
  {
    ret = FT6X06_ERROR;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e03f      	b.n	8003318 <FT6X06_GetMultiTouchState+0xbc>
  }
  else
  {  
    /* Send back first ready X position to caller */
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003298:	7a3b      	ldrb	r3, [r7, #8]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032a0:	7a7a      	ldrb	r2, [r7, #9]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80032a8:	7abb      	ldrb	r3, [r7, #10]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032b0:	7afa      	ldrb	r2, [r7, #11]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	60da      	str	r2, [r3, #12]
    /* Send back first ready Event to caller */  
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80032b8:	7a3b      	ldrb	r3, [r7, #8]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	61da      	str	r2, [r3, #28]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80032c4:	7b3b      	ldrb	r3, [r7, #12]
 80032c6:	461a      	mov	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	615a      	str	r2, [r3, #20]
    /* Send back first ready Area to caller */  
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80032cc:	7b7b      	ldrb	r3, [r7, #13]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24
    
    /* Send back first ready X position to caller */
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	609a      	str	r2, [r3, #8]
    /* Send back first ready Y position to caller */
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80032e8:	7c3b      	ldrb	r3, [r7, #16]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032f0:	7c7a      	ldrb	r2, [r7, #17]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	611a      	str	r2, [r3, #16]
    /* Send back first ready Event to caller */  
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	621a      	str	r2, [r3, #32]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8003304:	7cbb      	ldrb	r3, [r7, #18]
 8003306:	461a      	mov	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	619a      	str	r2, [r3, #24]
    /* Send back first ready Area to caller */  
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  return ret;  
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <FT6X06_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t FT6X06_GetGesture(FT6X06_Object_t *pObj, uint8_t *GestureId)
{  
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3318      	adds	r3, #24
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f8bb 	bl	80034ae <ft6x06_gest_id>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <FT6X06_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_EnableIT(FT6X06_Object_t *pObj)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3318      	adds	r3, #24
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f941 	bl	80035d8 <ft6x06_g_mode>
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <FT6X06_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DisableIT(FT6X06_Object_t *pObj)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3318      	adds	r3, #24
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f932 	bl	80035d8 <ft6x06_g_mode>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <FT6X06_ITStatus>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ITStatus(FT6X06_Object_t *pObj)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <FT6X06_ClearIT>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <FT6X06_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT6X06_ERROR
  *         in case of error
  */
static int32_t FT6X06_DetectTouch(FT6X06_Object_t *pObj)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;
  
  /* Read register FT6X06_TD_STAT_REG to check number of touches detection */
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3318      	adds	r3, #24
 80033b6:	f107 020b 	add.w	r2, r7, #11
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f886 	bl	80034ce <ft6x06_td_status>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <FT6X06_DetectTouch+0x26>
  {
    ret = FT6X06_ERROR;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e007      	b.n	80033e0 <FT6X06_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d902      	bls.n	80033dc <FT6X06_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e001      	b.n	80033e0 <FT6X06_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80033e0:	68fb      	ldr	r3, [r7, #12]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b087      	sub	sp, #28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	461a      	mov	r2, r3
 80033f6:	460b      	mov	r3, r1
 80033f8:	72fb      	strb	r3, [r7, #11]
 80033fa:	4613      	mov	r3, r2
 80033fc:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	691c      	ldr	r4, [r3, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	8918      	ldrh	r0, [r3, #8]
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	b299      	uxth	r1, r3
 800340e:	893b      	ldrh	r3, [r7, #8]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	47a0      	blx	r4
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800341e:	b590      	push	{r4, r7, lr}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	460b      	mov	r3, r1
 800342c:	72fb      	strb	r3, [r7, #11]
 800342e:	4613      	mov	r3, r2
 8003430:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	68dc      	ldr	r4, [r3, #12]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	8918      	ldrh	r0, [r3, #8]
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	b299      	uxth	r1, r3
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	47a0      	blx	r4
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}

08003452 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003452:	b590      	push	{r4, r7, lr}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	461a      	mov	r2, r3
 800345e:	460b      	mov	r3, r1
 8003460:	72fb      	strb	r3, [r7, #11]
 8003462:	4613      	mov	r3, r2
 8003464:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685c      	ldr	r4, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6898      	ldr	r0, [r3, #8]
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	7af9      	ldrb	r1, [r7, #11]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	47a0      	blx	r4
 8003476:	4603      	mov	r3, r0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	460b      	mov	r3, r1
 800348e:	72fb      	strb	r3, [r7, #11]
 8003490:	4613      	mov	r3, r2
 8003492:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681c      	ldr	r4, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6898      	ldr	r0, [r3, #8]
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	7af9      	ldrb	r1, [r7, #11]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	47a0      	blx	r4
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}

080034ae <ft6x06_gest_id>:
* Input          : Pointer to uint8_t
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80034b8:	2301      	movs	r3, #1
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffc7 	bl	8003452 <ft6x06_read_reg>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80034d8:	2301      	movs	r3, #1
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	2102      	movs	r1, #2
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffb7 	bl	8003452 <ft6x06_read_reg>
 80034e4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <ft6x06_td_status+0x34>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8003518:	1cfa      	adds	r2, r7, #3
 800351a:	2301      	movs	r3, #1
 800351c:	2191      	movs	r1, #145	@ 0x91
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffae 	bl	8003480 <ft6x06_write_reg>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800353a:	1cfa      	adds	r2, r7, #3
 800353c:	2301      	movs	r3, #1
 800353e:	2192      	movs	r1, #146	@ 0x92
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff9d 	bl	8003480 <ft6x06_write_reg>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800355c:	1cfa      	adds	r2, r7, #3
 800355e:	2301      	movs	r3, #1
 8003560:	2193      	movs	r1, #147	@ 0x93
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff8c 	bl	8003480 <ft6x06_write_reg>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800357e:	1cfa      	adds	r2, r7, #3
 8003580:	2301      	movs	r3, #1
 8003582:	2194      	movs	r1, #148	@ 0x94
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff7b 	bl	8003480 <ft6x06_write_reg>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80035a0:	1cfa      	adds	r2, r7, #3
 80035a2:	2301      	movs	r3, #1
 80035a4:	2195      	movs	r1, #149	@ 0x95
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff6a 	bl	8003480 <ft6x06_write_reg>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80035c2:	1cfa      	adds	r2, r7, #3
 80035c4:	2301      	movs	r3, #1
 80035c6:	2196      	movs	r1, #150	@ 0x96
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff59 	bl	8003480 <ft6x06_write_reg>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80035e4:	1cfa      	adds	r2, r7, #3
 80035e6:	2301      	movs	r3, #1
 80035e8:	21a4      	movs	r1, #164	@ 0xa4
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff48 	bl	8003480 <ft6x06_write_reg>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8003604:	2301      	movs	r3, #1
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	21a8      	movs	r1, #168	@ 0xa8
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff21 	bl	8003452 <ft6x06_read_reg>
 8003610:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <ft6x06_chip_id+0x2e>
  {
    *value &= FT6X06_CHIP_ID_BIT_MASK; 
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_CHIP_ID_BIT_POSITION; 
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <ST7789H2_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO pointer.
  * @retval Error status.
  */
int32_t ST7789H2_RegisterBusIO(ST7789H2_Object_t *pObj, ST7789H2_IO_t *pIO)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <ST7789H2_RegisterBusIO+0x18>
  {
    ret = ST7789H2_ERROR;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e033      	b.n	80036b4 <ST7789H2_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	891a      	ldrh	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg   = ST7789H2_ReadRegWrap;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	@ (80036c0 <ST7789H2_RegisterBusIO+0x8c>)
 8003688:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg  = ST7789H2_WriteRegWrap;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <ST7789H2_RegisterBusIO+0x90>)
 800368e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.SendData  = ST7789H2_SendDataWrap;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0d      	ldr	r2, [pc, #52]	@ (80036c8 <ST7789H2_RegisterBusIO+0x94>)
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.handle    = pObj;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (pObj->IO.Init != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <ST7789H2_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4798      	blx	r3
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	e002      	b.n	80036b4 <ST7789H2_RegisterBusIO+0x80>
    }
    else
    {
      ret = ST7789H2_ERROR;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80036b4:	68fb      	ldr	r3, [r7, #12]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	08004631 	.word	0x08004631
 80036c4:	0800465f 	.word	0x0800465f
 80036c8:	0800468d 	.word	0x0800468d

080036cc <ST7789H2_Init>:
  * @param  ColorCoding Color coding.
  * @param  Orientation Orientation.
  * @retval Component status.
  */
int32_t ST7789H2_Init(ST7789H2_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  int32_t ret = ST7789H2_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t parameter[28];

  if (pObj->IsInitialized == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 8235 	bne.w	8003b52 <ST7789H2_Init+0x486>
  {
    /* Sleep In Command */
    parameter[1] = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	747b      	strb	r3, [r7, #17]
    parameter[0] = ST7789H2_SLEEP_IN;
 80036ec:	2310      	movs	r3, #16
 80036ee:	743b      	strb	r3, [r7, #16]
    ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	331c      	adds	r3, #28
 80036f4:	f107 0110 	add.w	r1, r7, #16
 80036f8:	2201      	movs	r2, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f81c 	bl	8004738 <st7789h2_send_data>
 8003700:	4602      	mov	r2, r0
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	4413      	add	r3, r2
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Wait for 10ms */
    ST7789H2_Delay(pObj, 10);
 8003708:	210a      	movs	r1, #10
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 ffd0 	bl	80046b0 <ST7789H2_Delay>

    /* SW Reset Command */
    parameter[0] = ST7789H2_SW_RESET;
 8003710:	2301      	movs	r3, #1
 8003712:	743b      	strb	r3, [r7, #16]
    ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	331c      	adds	r3, #28
 8003718:	f107 0110 	add.w	r1, r7, #16
 800371c:	2201      	movs	r2, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f001 f80a 	bl	8004738 <st7789h2_send_data>
 8003724:	4602      	mov	r2, r0
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	4413      	add	r3, r2
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Wait for 200ms */
    ST7789H2_Delay(pObj, 200);
 800372c:	21c8      	movs	r1, #200	@ 0xc8
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 ffbe 	bl	80046b0 <ST7789H2_Delay>

    /* Sleep Out Command */
    parameter[0] = ST7789H2_SLEEP_OUT;
 8003734:	2311      	movs	r3, #17
 8003736:	743b      	strb	r3, [r7, #16]
    ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	331c      	adds	r3, #28
 800373c:	f107 0110 	add.w	r1, r7, #16
 8003740:	2201      	movs	r2, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fff8 	bl	8004738 <st7789h2_send_data>
 8003748:	4602      	mov	r2, r0
 800374a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374c:	4413      	add	r3, r2
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Wait for 120ms */
    ST7789H2_Delay(pObj, 120);
 8003750:	2178      	movs	r1, #120	@ 0x78
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 ffac 	bl	80046b0 <ST7789H2_Delay>

    /* Memory access control */
    if (Orientation == ST7789H2_ORIENTATION_PORTRAIT)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <ST7789H2_Init+0x98>
    {
      parameter[0] = 0x00; /* MY = 0, MX = 0, MV = 0 */
 800375e:	2300      	movs	r3, #0
 8003760:	743b      	strb	r3, [r7, #16]
 8003762:	e00d      	b.n	8003780 <ST7789H2_Init+0xb4>
    }
    else if (Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <ST7789H2_Init+0xa4>
    {
      parameter[0] = 0xA0; /* MY = 1, MX = 0, MV = 1 */
 800376a:	23a0      	movs	r3, #160	@ 0xa0
 800376c:	743b      	strb	r3, [r7, #16]
 800376e:	e007      	b.n	8003780 <ST7789H2_Init+0xb4>
    }
    else if (Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d102      	bne.n	800377c <ST7789H2_Init+0xb0>
    {
      parameter[0] = 0xC0; /* MY = 1, MX = 1, MV = 0 */
 8003776:	23c0      	movs	r3, #192	@ 0xc0
 8003778:	743b      	strb	r3, [r7, #16]
 800377a:	e001      	b.n	8003780 <ST7789H2_Init+0xb4>
    }
    else /* Orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180 */
    {
      parameter[0] = 0x60; /* MY = 0, MX = 1, MV = 1 */
 800377c:	2360      	movs	r3, #96	@ 0x60
 800377e:	743b      	strb	r3, [r7, #16]
    }
    parameter[1] = 0x00;
 8003780:	2300      	movs	r3, #0
 8003782:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f103 001c 	add.w	r0, r3, #28
 800378a:	f107 0210 	add.w	r2, r7, #16
 800378e:	2301      	movs	r3, #1
 8003790:	2136      	movs	r1, #54	@ 0x36
 8003792:	f000 ffbc 	bl	800470e <st7789h2_write_reg>
 8003796:	4602      	mov	r2, r0
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	4413      	add	r3, r2
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Color mode 16bits/pixel */
    parameter[0] = (uint8_t) ColorCoding;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	743b      	strb	r3, [r7, #16]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_COLOR_MODE, parameter, 1);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f103 001c 	add.w	r0, r3, #28
 80037aa:	f107 0210 	add.w	r2, r7, #16
 80037ae:	2301      	movs	r3, #1
 80037b0:	213a      	movs	r1, #58	@ 0x3a
 80037b2:	f000 ffac 	bl	800470e <st7789h2_write_reg>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	4413      	add	r3, r2
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Display inversion On */
    parameter[0] = ST7789H2_DISPLAY_INVERSION_ON;
 80037be:	2321      	movs	r3, #33	@ 0x21
 80037c0:	743b      	strb	r3, [r7, #16]
    ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	331c      	adds	r3, #28
 80037c6:	f107 0110 	add.w	r1, r7, #16
 80037ca:	2201      	movs	r2, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 ffb3 	bl	8004738 <st7789h2_send_data>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d6:	4413      	add	r3, r2
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set Column address CASET */
    if (Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <ST7789H2_Init+0x136>
    {
      parameter[0] = 0x00; /* XS[15:8] */
 80037e0:	2300      	movs	r3, #0
 80037e2:	743b      	strb	r3, [r7, #16]
      parameter[1] = 0x00;
 80037e4:	2300      	movs	r3, #0
 80037e6:	747b      	strb	r3, [r7, #17]
      parameter[2] = 0x50; /* XS[7:0] */
 80037e8:	2350      	movs	r3, #80	@ 0x50
 80037ea:	74bb      	strb	r3, [r7, #18]
      parameter[3] = 0x00;
 80037ec:	2300      	movs	r3, #0
 80037ee:	74fb      	strb	r3, [r7, #19]
      parameter[4] = 0x01; /* XE[15:8] */
 80037f0:	2301      	movs	r3, #1
 80037f2:	753b      	strb	r3, [r7, #20]
      parameter[5] = 0x00;
 80037f4:	2300      	movs	r3, #0
 80037f6:	757b      	strb	r3, [r7, #21]
      parameter[6] = 0x3F; /* XE[7:0] */
 80037f8:	233f      	movs	r3, #63	@ 0x3f
 80037fa:	75bb      	strb	r3, [r7, #22]
      parameter[7] = 0x00;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
 8003800:	e00f      	b.n	8003822 <ST7789H2_Init+0x156>
    }
    else
    {
      parameter[0] = 0x00; /* XS[15:8] */
 8003802:	2300      	movs	r3, #0
 8003804:	743b      	strb	r3, [r7, #16]
      parameter[1] = 0x00;
 8003806:	2300      	movs	r3, #0
 8003808:	747b      	strb	r3, [r7, #17]
      parameter[2] = 0x00; /* XS[7:0] */
 800380a:	2300      	movs	r3, #0
 800380c:	74bb      	strb	r3, [r7, #18]
      parameter[3] = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	74fb      	strb	r3, [r7, #19]
      parameter[4] = 0x00; /* XE[15:8] */
 8003812:	2300      	movs	r3, #0
 8003814:	753b      	strb	r3, [r7, #20]
      parameter[5] = 0x00;
 8003816:	2300      	movs	r3, #0
 8003818:	757b      	strb	r3, [r7, #21]
      parameter[6] = 0xEF; /* XE[7:0] */
 800381a:	23ef      	movs	r3, #239	@ 0xef
 800381c:	75bb      	strb	r3, [r7, #22]
      parameter[7] = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    }
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_CASET, parameter, 4);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f103 001c 	add.w	r0, r3, #28
 8003828:	f107 0210 	add.w	r2, r7, #16
 800382c:	2304      	movs	r3, #4
 800382e:	212a      	movs	r1, #42	@ 0x2a
 8003830:	f000 ff6d 	bl	800470e <st7789h2_write_reg>
 8003834:	4602      	mov	r2, r0
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	4413      	add	r3, r2
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set Row address RASET */
    if (Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d110      	bne.n	8003864 <ST7789H2_Init+0x198>
    {
      parameter[0] = 0x00; /* YS[15:8] */
 8003842:	2300      	movs	r3, #0
 8003844:	743b      	strb	r3, [r7, #16]
      parameter[1] = 0x00;
 8003846:	2300      	movs	r3, #0
 8003848:	747b      	strb	r3, [r7, #17]
      parameter[2] = 0x50; /* YS[7:0] */
 800384a:	2350      	movs	r3, #80	@ 0x50
 800384c:	74bb      	strb	r3, [r7, #18]
      parameter[3] = 0x00;
 800384e:	2300      	movs	r3, #0
 8003850:	74fb      	strb	r3, [r7, #19]
      parameter[4] = 0x01; /* YE[15:8] */
 8003852:	2301      	movs	r3, #1
 8003854:	753b      	strb	r3, [r7, #20]
      parameter[5] = 0x00;
 8003856:	2300      	movs	r3, #0
 8003858:	757b      	strb	r3, [r7, #21]
      parameter[6] = 0x3F; /* YE[7:0] */
 800385a:	233f      	movs	r3, #63	@ 0x3f
 800385c:	75bb      	strb	r3, [r7, #22]
      parameter[7] = 0x00;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
 8003862:	e00f      	b.n	8003884 <ST7789H2_Init+0x1b8>
    }
    else
    {
      parameter[0] = 0x00; /* YS[15:8] */
 8003864:	2300      	movs	r3, #0
 8003866:	743b      	strb	r3, [r7, #16]
      parameter[1] = 0x00;
 8003868:	2300      	movs	r3, #0
 800386a:	747b      	strb	r3, [r7, #17]
      parameter[2] = 0x00; /* YS[7:0] */
 800386c:	2300      	movs	r3, #0
 800386e:	74bb      	strb	r3, [r7, #18]
      parameter[3] = 0x00;
 8003870:	2300      	movs	r3, #0
 8003872:	74fb      	strb	r3, [r7, #19]
      parameter[4] = 0x00; /* YE[15:8] */
 8003874:	2300      	movs	r3, #0
 8003876:	753b      	strb	r3, [r7, #20]
      parameter[5] = 0x00;
 8003878:	2300      	movs	r3, #0
 800387a:	757b      	strb	r3, [r7, #21]
      parameter[6] = 0xEF; /* YE[7:0] */
 800387c:	23ef      	movs	r3, #239	@ 0xef
 800387e:	75bb      	strb	r3, [r7, #22]
      parameter[7] = 0x00;
 8003880:	2300      	movs	r3, #0
 8003882:	75fb      	strb	r3, [r7, #23]
    }
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_RASET, parameter, 4);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f103 001c 	add.w	r0, r3, #28
 800388a:	f107 0210 	add.w	r2, r7, #16
 800388e:	2304      	movs	r3, #4
 8003890:	212b      	movs	r1, #43	@ 0x2b
 8003892:	f000 ff3c 	bl	800470e <st7789h2_write_reg>
 8003896:	4602      	mov	r2, r0
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	4413      	add	r3, r2
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*--------------- ST7789H2 Frame rate setting ----------------------------*/
    /* PORCH control setting */
    parameter[0] = 0x0C;
 800389e:	230c      	movs	r3, #12
 80038a0:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	747b      	strb	r3, [r7, #17]
    parameter[2] = 0x0C;
 80038a6:	230c      	movs	r3, #12
 80038a8:	74bb      	strb	r3, [r7, #18]
    parameter[3] = 0x00;
 80038aa:	2300      	movs	r3, #0
 80038ac:	74fb      	strb	r3, [r7, #19]
    parameter[4] = 0x00;
 80038ae:	2300      	movs	r3, #0
 80038b0:	753b      	strb	r3, [r7, #20]
    parameter[5] = 0x00;
 80038b2:	2300      	movs	r3, #0
 80038b4:	757b      	strb	r3, [r7, #21]
    parameter[6] = 0x33;
 80038b6:	2333      	movs	r3, #51	@ 0x33
 80038b8:	75bb      	strb	r3, [r7, #22]
    parameter[7] = 0x00;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    parameter[8] = 0x33;
 80038be:	2333      	movs	r3, #51	@ 0x33
 80038c0:	763b      	strb	r3, [r7, #24]
    parameter[9] = 0x00;
 80038c2:	2300      	movs	r3, #0
 80038c4:	767b      	strb	r3, [r7, #25]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_PORCH_CTRL, parameter, 5);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f103 001c 	add.w	r0, r3, #28
 80038cc:	f107 0210 	add.w	r2, r7, #16
 80038d0:	2305      	movs	r3, #5
 80038d2:	21b2      	movs	r1, #178	@ 0xb2
 80038d4:	f000 ff1b 	bl	800470e <st7789h2_write_reg>
 80038d8:	4602      	mov	r2, r0
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	4413      	add	r3, r2
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* GATE control setting */
    parameter[0] = 0x35;
 80038e0:	2335      	movs	r3, #53	@ 0x35
 80038e2:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 80038e4:	2300      	movs	r3, #0
 80038e6:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_GATE_CTRL, parameter, 1);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f103 001c 	add.w	r0, r3, #28
 80038ee:	f107 0210 	add.w	r2, r7, #16
 80038f2:	2301      	movs	r3, #1
 80038f4:	21b7      	movs	r1, #183	@ 0xb7
 80038f6:	f000 ff0a 	bl	800470e <st7789h2_write_reg>
 80038fa:	4602      	mov	r2, r0
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	4413      	add	r3, r2
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*--------------- ST7789H2 Power setting ---------------------------------*/
    /* VCOM setting */
    parameter[0] = 0x1F;
 8003902:	231f      	movs	r3, #31
 8003904:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 8003906:	2300      	movs	r3, #0
 8003908:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_VCOM_SET, parameter, 1);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f103 001c 	add.w	r0, r3, #28
 8003910:	f107 0210 	add.w	r2, r7, #16
 8003914:	2301      	movs	r3, #1
 8003916:	21bb      	movs	r1, #187	@ 0xbb
 8003918:	f000 fef9 	bl	800470e <st7789h2_write_reg>
 800391c:	4602      	mov	r2, r0
 800391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003920:	4413      	add	r3, r2
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* LCM Control setting */
    parameter[0] = 0x2C;
 8003924:	232c      	movs	r3, #44	@ 0x2c
 8003926:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 8003928:	2300      	movs	r3, #0
 800392a:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_LCM_CTRL, parameter, 1);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f103 001c 	add.w	r0, r3, #28
 8003932:	f107 0210 	add.w	r2, r7, #16
 8003936:	2301      	movs	r3, #1
 8003938:	21c0      	movs	r1, #192	@ 0xc0
 800393a:	f000 fee8 	bl	800470e <st7789h2_write_reg>
 800393e:	4602      	mov	r2, r0
 8003940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003942:	4413      	add	r3, r2
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* VDV and VRH Command Enable */
    parameter[0] = 0x01;
 8003946:	2301      	movs	r3, #1
 8003948:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 800394a:	2300      	movs	r3, #0
 800394c:	747b      	strb	r3, [r7, #17]
    parameter[2] = 0xC3;
 800394e:	23c3      	movs	r3, #195	@ 0xc3
 8003950:	74bb      	strb	r3, [r7, #18]
    parameter[3] = 0x00;
 8003952:	2300      	movs	r3, #0
 8003954:	74fb      	strb	r3, [r7, #19]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_VDV_VRH_EN, parameter, 2);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f103 001c 	add.w	r0, r3, #28
 800395c:	f107 0210 	add.w	r2, r7, #16
 8003960:	2302      	movs	r3, #2
 8003962:	21c2      	movs	r1, #194	@ 0xc2
 8003964:	f000 fed3 	bl	800470e <st7789h2_write_reg>
 8003968:	4602      	mov	r2, r0
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	4413      	add	r3, r2
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* VDV Set */
    parameter[0] = 0x20;
 8003970:	2320      	movs	r3, #32
 8003972:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 8003974:	2300      	movs	r3, #0
 8003976:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_VDV_SET, parameter, 1);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f103 001c 	add.w	r0, r3, #28
 800397e:	f107 0210 	add.w	r2, r7, #16
 8003982:	2301      	movs	r3, #1
 8003984:	21c4      	movs	r1, #196	@ 0xc4
 8003986:	f000 fec2 	bl	800470e <st7789h2_write_reg>
 800398a:	4602      	mov	r2, r0
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	4413      	add	r3, r2
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Frame Rate Control in normal mode */
    parameter[0] = 0x0F;
 8003992:	230f      	movs	r3, #15
 8003994:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 8003996:	2300      	movs	r3, #0
 8003998:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_FR_CTRL, parameter, 1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f103 001c 	add.w	r0, r3, #28
 80039a0:	f107 0210 	add.w	r2, r7, #16
 80039a4:	2301      	movs	r3, #1
 80039a6:	21c6      	movs	r1, #198	@ 0xc6
 80039a8:	f000 feb1 	bl	800470e <st7789h2_write_reg>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b0:	4413      	add	r3, r2
 80039b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Power Control */
    parameter[0] = 0xA4;
 80039b4:	23a4      	movs	r3, #164	@ 0xa4
 80039b6:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 80039b8:	2300      	movs	r3, #0
 80039ba:	747b      	strb	r3, [r7, #17]
    parameter[2] = 0xA1;
 80039bc:	23a1      	movs	r3, #161	@ 0xa1
 80039be:	74bb      	strb	r3, [r7, #18]
    parameter[3] = 0x00;
 80039c0:	2300      	movs	r3, #0
 80039c2:	74fb      	strb	r3, [r7, #19]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_POWER_CTRL, parameter, 2);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f103 001c 	add.w	r0, r3, #28
 80039ca:	f107 0210 	add.w	r2, r7, #16
 80039ce:	2302      	movs	r3, #2
 80039d0:	21d0      	movs	r1, #208	@ 0xd0
 80039d2:	f000 fe9c 	bl	800470e <st7789h2_write_reg>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	4413      	add	r3, r2
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*--------------- ST7789H2 Gamma setting ---------------------------------*/
    /* Positive Voltage Gamma Control */
    parameter[0]  = 0xD0;
 80039de:	23d0      	movs	r3, #208	@ 0xd0
 80039e0:	743b      	strb	r3, [r7, #16]
    parameter[1]  = 0x00;
 80039e2:	2300      	movs	r3, #0
 80039e4:	747b      	strb	r3, [r7, #17]
    parameter[2]  = 0x08;
 80039e6:	2308      	movs	r3, #8
 80039e8:	74bb      	strb	r3, [r7, #18]
    parameter[3]  = 0x00;
 80039ea:	2300      	movs	r3, #0
 80039ec:	74fb      	strb	r3, [r7, #19]
    parameter[4]  = 0x11;
 80039ee:	2311      	movs	r3, #17
 80039f0:	753b      	strb	r3, [r7, #20]
    parameter[5]  = 0x00;
 80039f2:	2300      	movs	r3, #0
 80039f4:	757b      	strb	r3, [r7, #21]
    parameter[6]  = 0x08;
 80039f6:	2308      	movs	r3, #8
 80039f8:	75bb      	strb	r3, [r7, #22]
    parameter[7]  = 0x00;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    parameter[8]  = 0x0C;
 80039fe:	230c      	movs	r3, #12
 8003a00:	763b      	strb	r3, [r7, #24]
    parameter[9]  = 0x00;
 8003a02:	2300      	movs	r3, #0
 8003a04:	767b      	strb	r3, [r7, #25]
    parameter[10] = 0x15;
 8003a06:	2315      	movs	r3, #21
 8003a08:	76bb      	strb	r3, [r7, #26]
    parameter[11] = 0x00;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	76fb      	strb	r3, [r7, #27]
    parameter[12] = 0x39;
 8003a0e:	2339      	movs	r3, #57	@ 0x39
 8003a10:	773b      	strb	r3, [r7, #28]
    parameter[13] = 0x00;
 8003a12:	2300      	movs	r3, #0
 8003a14:	777b      	strb	r3, [r7, #29]
    parameter[14] = 0x33;
 8003a16:	2333      	movs	r3, #51	@ 0x33
 8003a18:	77bb      	strb	r3, [r7, #30]
    parameter[15] = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	77fb      	strb	r3, [r7, #31]
    parameter[16] = 0x50;
 8003a1e:	2350      	movs	r3, #80	@ 0x50
 8003a20:	f887 3020 	strb.w	r3, [r7, #32]
    parameter[17] = 0x00;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    parameter[18] = 0x36;
 8003a2a:	2336      	movs	r3, #54	@ 0x36
 8003a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    parameter[19] = 0x00;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    parameter[20] = 0x13;
 8003a36:	2313      	movs	r3, #19
 8003a38:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    parameter[21] = 0x00;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    parameter[22] = 0x14;
 8003a42:	2314      	movs	r3, #20
 8003a44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    parameter[23] = 0x00;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    parameter[24] = 0x29;
 8003a4e:	2329      	movs	r3, #41	@ 0x29
 8003a50:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    parameter[25] = 0x00;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    parameter[26] = 0x2D;
 8003a5a:	232d      	movs	r3, #45	@ 0x2d
 8003a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    parameter[27] = 0x00;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_PV_GAMMA_CTRL, parameter, 14);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f103 001c 	add.w	r0, r3, #28
 8003a6c:	f107 0210 	add.w	r2, r7, #16
 8003a70:	230e      	movs	r3, #14
 8003a72:	21e0      	movs	r1, #224	@ 0xe0
 8003a74:	f000 fe4b 	bl	800470e <st7789h2_write_reg>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	4413      	add	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Negative Voltage Gamma Control */
    parameter[0]  = 0xD0;
 8003a80:	23d0      	movs	r3, #208	@ 0xd0
 8003a82:	743b      	strb	r3, [r7, #16]
    parameter[1]  = 0x00;
 8003a84:	2300      	movs	r3, #0
 8003a86:	747b      	strb	r3, [r7, #17]
    parameter[2]  = 0x08;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	74bb      	strb	r3, [r7, #18]
    parameter[3]  = 0x00;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74fb      	strb	r3, [r7, #19]
    parameter[4]  = 0x10;
 8003a90:	2310      	movs	r3, #16
 8003a92:	753b      	strb	r3, [r7, #20]
    parameter[5]  = 0x00;
 8003a94:	2300      	movs	r3, #0
 8003a96:	757b      	strb	r3, [r7, #21]
    parameter[6]  = 0x08;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	75bb      	strb	r3, [r7, #22]
    parameter[7]  = 0x00;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
    parameter[8]  = 0x06;
 8003aa0:	2306      	movs	r3, #6
 8003aa2:	763b      	strb	r3, [r7, #24]
    parameter[9]  = 0x00;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	767b      	strb	r3, [r7, #25]
    parameter[10] = 0x06;
 8003aa8:	2306      	movs	r3, #6
 8003aaa:	76bb      	strb	r3, [r7, #26]
    parameter[11] = 0x00;
 8003aac:	2300      	movs	r3, #0
 8003aae:	76fb      	strb	r3, [r7, #27]
    parameter[12] = 0x39;
 8003ab0:	2339      	movs	r3, #57	@ 0x39
 8003ab2:	773b      	strb	r3, [r7, #28]
    parameter[13] = 0x00;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	777b      	strb	r3, [r7, #29]
    parameter[14] = 0x44;
 8003ab8:	2344      	movs	r3, #68	@ 0x44
 8003aba:	77bb      	strb	r3, [r7, #30]
    parameter[15] = 0x00;
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
    parameter[16] = 0x51;
 8003ac0:	2351      	movs	r3, #81	@ 0x51
 8003ac2:	f887 3020 	strb.w	r3, [r7, #32]
    parameter[17] = 0x00;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    parameter[18] = 0x0B;
 8003acc:	230b      	movs	r3, #11
 8003ace:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    parameter[19] = 0x00;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    parameter[20] = 0x16;
 8003ad8:	2316      	movs	r3, #22
 8003ada:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    parameter[21] = 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    parameter[22] = 0x14;
 8003ae4:	2314      	movs	r3, #20
 8003ae6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    parameter[23] = 0x00;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    parameter[24] = 0x2F;
 8003af0:	232f      	movs	r3, #47	@ 0x2f
 8003af2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    parameter[25] = 0x00;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    parameter[26] = 0x31;
 8003afc:	2331      	movs	r3, #49	@ 0x31
 8003afe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    parameter[27] = 0x00;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_NV_GAMMA_CTRL, parameter, 14);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f103 001c 	add.w	r0, r3, #28
 8003b0e:	f107 0210 	add.w	r2, r7, #16
 8003b12:	230e      	movs	r3, #14
 8003b14:	21e1      	movs	r1, #225	@ 0xe1
 8003b16:	f000 fdfa 	bl	800470e <st7789h2_write_reg>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	4413      	add	r3, r2
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
    parameter[0] = 0x01;
 8003b22:	2301      	movs	r3, #1
 8003b24:	743b      	strb	r3, [r7, #16]
    parameter[1] = 0x00;
 8003b26:	2300      	movs	r3, #0
 8003b28:	747b      	strb	r3, [r7, #17]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_TE_LINE_ON, parameter, 1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f103 001c 	add.w	r0, r3, #28
 8003b30:	f107 0210 	add.w	r2, r7, #16
 8003b34:	2301      	movs	r3, #1
 8003b36:	2135      	movs	r1, #53	@ 0x35
 8003b38:	f000 fde9 	bl	800470e <st7789h2_write_reg>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b40:	4413      	add	r3, r2
 8003b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

    pObj->IsInitialized = 1U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    pObj->Orientation   = Orientation;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  if (ret != ST7789H2_OK)
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <ST7789H2_Init+0x492>
  {
    ret = ST7789H2_ERROR;
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  return ret;
 8003b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3730      	adds	r7, #48	@ 0x30
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <ST7789H2_DeInit>:
  * @brief  De-Initialize the st7789h2 LCD Component.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t ST7789H2_DeInit(ST7789H2_Object_t *pObj)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  int32_t ret = ST7789H2_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  uint8_t parameter[2];

  if (pObj->IsInitialized != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <ST7789H2_DeInit+0x54>
  {
    ret += ST7789H2_DisplayOff(pObj);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f877 	bl	8003c72 <ST7789H2_DisplayOff>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    /* Power Off sequence ----------------------------------------------------*/
    /* Sleep In Command */
    parameter[1] = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	727b      	strb	r3, [r7, #9]
    parameter[0] = ST7789H2_SLEEP_IN;
 8003b90:	2310      	movs	r3, #16
 8003b92:	723b      	strb	r3, [r7, #8]
    ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	331c      	adds	r3, #28
 8003b98:	f107 0108 	add.w	r1, r7, #8
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fdca 	bl	8004738 <st7789h2_send_data>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
    /* Wait for 10ms */
    ST7789H2_Delay(pObj, 10);
 8003bac:	210a      	movs	r1, #10
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fd7e 	bl	80046b0 <ST7789H2_Delay>

    pObj->IsInitialized = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }

  if (ret != ST7789H2_OK)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <ST7789H2_DeInit+0x60>
  {
    ret = ST7789H2_ERROR;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <ST7789H2_ReadID>:
  * @param  pObj pointer to component object.
  * @param  Id   pointer to component id.
  * @retval Component status.
  */
int32_t ST7789H2_ReadID(ST7789H2_Object_t *pObj, uint32_t *Id)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t st7789h2_id[4];

  /* Get ID from component */
  ret = st7789h2_read_reg(&pObj->Ctx, ST7789H2_READ_ID1, st7789h2_id, 2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f103 001c 	add.w	r0, r3, #28
 8003be2:	f107 0208 	add.w	r2, r7, #8
 8003be6:	2302      	movs	r3, #2
 8003be8:	21da      	movs	r1, #218	@ 0xda
 8003bea:	f000 fd7b 	bl	80046e4 <st7789h2_read_reg>
 8003bee:	60f8      	str	r0, [r7, #12]

  *Id = (uint32_t)st7789h2_id[2] | ((uint32_t)st7789h2_id[3] << 8U);
 8003bf0:	7abb      	ldrb	r3, [r7, #10]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	601a      	str	r2, [r3, #0]

  if (ret != ST7789H2_OK)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <ST7789H2_ReadID+0x38>
  {
    ret = ST7789H2_ERROR;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <ST7789H2_DisplayOn>:
  * @brief  Set the display on.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t ST7789H2_DisplayOn(ST7789H2_Object_t *pObj)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  int32_t ret = ST7789H2_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  uint8_t parameter[2];

  parameter[1] = 0x00U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	727b      	strb	r3, [r7, #9]

  /* Display ON command */
  parameter[0] = ST7789H2_DISPLAY_ON;
 8003c24:	2329      	movs	r3, #41	@ 0x29
 8003c26:	723b      	strb	r3, [r7, #8]
  ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	331c      	adds	r3, #28
 8003c2c:	f107 0108 	add.w	r1, r7, #8
 8003c30:	2201      	movs	r2, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fd80 	bl	8004738 <st7789h2_send_data>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Sleep Out command */
  parameter[0] = ST7789H2_SLEEP_OUT;
 8003c40:	2311      	movs	r3, #17
 8003c42:	723b      	strb	r3, [r7, #8]
  ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	331c      	adds	r3, #28
 8003c48:	f107 0108 	add.w	r1, r7, #8
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fd72 	bl	8004738 <st7789h2_send_data>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  if (ret != ST7789H2_OK)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <ST7789H2_DisplayOn+0x54>
  {
    ret = ST7789H2_ERROR;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <ST7789H2_DisplayOff>:
  * @brief  Set the display off.
  * @param  pObj pointer to component object.
  * @retval Component status.
  */
int32_t ST7789H2_DisplayOff(ST7789H2_Object_t *pObj)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  int32_t ret = ST7789H2_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
  uint8_t parameter[2];

  /* Display OFF command */
  parameter[0] = 0xFEU;
 8003c7e:	23fe      	movs	r3, #254	@ 0xfe
 8003c80:	723b      	strb	r3, [r7, #8]
  parameter[1] = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	727b      	strb	r3, [r7, #9]
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_DISPLAY_OFF_PWR_SAVE, parameter, 1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f103 001c 	add.w	r0, r3, #28
 8003c8c:	f107 0208 	add.w	r2, r7, #8
 8003c90:	2301      	movs	r3, #1
 8003c92:	21bd      	movs	r1, #189	@ 0xbd
 8003c94:	f000 fd3b 	bl	800470e <st7789h2_write_reg>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Sleep In Command */
  parameter[0] = ST7789H2_SLEEP_IN;
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	723b      	strb	r3, [r7, #8]
  ret += st7789h2_send_data(&pObj->Ctx, parameter, 1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	331c      	adds	r3, #28
 8003ca8:	f107 0108 	add.w	r1, r7, #8
 8003cac:	2201      	movs	r2, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fd42 	bl	8004738 <st7789h2_send_data>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Wait for 10ms */
  ST7789H2_Delay(pObj, 10);
 8003cbc:	210a      	movs	r1, #10
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fcf6 	bl	80046b0 <ST7789H2_Delay>

  if (ret != ST7789H2_OK)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <ST7789H2_DisplayOff+0x5e>
  {
    ret = ST7789H2_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <ST7789H2_SetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Display brightness to be set.
  * @retval Component status.
  */
int32_t ST7789H2_SetBrightness(ST7789H2_Object_t *pObj, uint32_t Brightness)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return ST7789H2_ERROR;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <ST7789H2_GetBrightness>:
  * @param  pObj Pointer to component object.
  * @param  Brightness Current display brightness.
  * @retval Component status.
  */
int32_t ST7789H2_GetBrightness(ST7789H2_Object_t *pObj, uint32_t *Brightness)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return ST7789H2_ERROR;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <ST7789H2_SetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Display orientation to be set.
  * @retval Component status.
  */
int32_t ST7789H2_SetOrientation(ST7789H2_Object_t *pObj, uint32_t Orientation)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  int32_t ret = ST7789H2_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint8_t   parameter[2];

  /* Memory access control */
  if (Orientation == ST7789H2_ORIENTATION_PORTRAIT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <ST7789H2_SetOrientation+0x1a>
  {
    parameter[0] = 0x00U; /* MY = 0, MX = 0, MV = 0 */
 8003d22:	2300      	movs	r3, #0
 8003d24:	723b      	strb	r3, [r7, #8]
 8003d26:	e00d      	b.n	8003d44 <ST7789H2_SetOrientation+0x36>
  }
  else if (Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d102      	bne.n	8003d34 <ST7789H2_SetOrientation+0x26>
  {
    parameter[0] = 0xA0U; /* MY = 1, MX = 0, MV = 1 */
 8003d2e:	23a0      	movs	r3, #160	@ 0xa0
 8003d30:	723b      	strb	r3, [r7, #8]
 8003d32:	e007      	b.n	8003d44 <ST7789H2_SetOrientation+0x36>
  }
  else if (Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d102      	bne.n	8003d40 <ST7789H2_SetOrientation+0x32>
  {
    parameter[0] = 0xC0U; /* MY = 1, MX = 1, MV = 0 */
 8003d3a:	23c0      	movs	r3, #192	@ 0xc0
 8003d3c:	723b      	strb	r3, [r7, #8]
 8003d3e:	e001      	b.n	8003d44 <ST7789H2_SetOrientation+0x36>
  }
  else /* Orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180 */
  {
    parameter[0] = 0x60U; /* MY = 0, MX = 1, MV = 1 */
 8003d40:	2360      	movs	r3, #96	@ 0x60
 8003d42:	723b      	strb	r3, [r7, #8]
  }
  parameter[1] = 0x00U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	727b      	strb	r3, [r7, #9]
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f103 001c 	add.w	r0, r3, #28
 8003d4e:	f107 0208 	add.w	r2, r7, #8
 8003d52:	2301      	movs	r3, #1
 8003d54:	2136      	movs	r1, #54	@ 0x36
 8003d56:	f000 fcda 	bl	800470e <st7789h2_write_reg>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  pObj->Orientation = Orientation;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30

  return ret;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <ST7789H2_GetOrientation>:
  * @param  pObj Pointer to component object.
  * @param  Orientation Current display orientation.
  * @retval Component status.
  */
int32_t ST7789H2_GetOrientation(ST7789H2_Object_t *pObj, uint32_t *Orientation)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  int32_t ret = ST7789H2_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  *Orientation = pObj->Orientation;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	601a      	str	r2, [r3, #0]

  return ret;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <ST7789H2_SetCursor>:
  * @param  Xpos X position on LCD.
  * @param  Ypos Y position on LCD.
  * @retval Component status.
  */
int32_t ST7789H2_SetCursor(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b088      	sub	sp, #32
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  int32_t ret = ST7789H2_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  uint8_t parameter[8];

  /* CASET: Column Address Set */
  if (pObj->Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d116      	bne.n	8003ddc <ST7789H2_SetCursor+0x46>
  {
    parameter[0] = (uint8_t)((Xpos + 0x50U) >> 8);  /* XS[15:8] */
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3350      	adds	r3, #80	@ 0x50
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8003db8:	2300      	movs	r3, #0
 8003dba:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t)(Xpos + 0x50U);         /* XS[7:0] */
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3350      	adds	r3, #80	@ 0x50
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x01;                            /* XE[15:8] */
 8003dca:	2301      	movs	r3, #1
 8003dcc:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0x3F;                            /* XE[7:0] */
 8003dd2:	233f      	movs	r3, #63	@ 0x3f
 8003dd4:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e012      	b.n	8003e02 <ST7789H2_SetCursor+0x6c>
  }
  else
  {
    parameter[0] = (uint8_t)(Xpos >> 8);  /* XS[15:8] */
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8003de4:	2300      	movs	r3, #0
 8003de6:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t) Xpos;        /* XS[7:0] */
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x00;                  /* XE[15:8] */
 8003df2:	2300      	movs	r3, #0
 8003df4:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8003df6:	2300      	movs	r3, #0
 8003df8:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0xEF;                  /* XE[7:0] */
 8003dfa:	23ef      	movs	r3, #239	@ 0xef
 8003dfc:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	76fb      	strb	r3, [r7, #27]
  }
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_CASET, parameter, 4);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f103 001c 	add.w	r0, r3, #28
 8003e08:	f107 0214 	add.w	r2, r7, #20
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	212a      	movs	r1, #42	@ 0x2a
 8003e10:	f000 fc7d 	bl	800470e <st7789h2_write_reg>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	61fb      	str	r3, [r7, #28]

  /* RASET: Row Address Set */
  if (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d116      	bne.n	8003e52 <ST7789H2_SetCursor+0xbc>
  {
    parameter[0] = (uint8_t)((Ypos + 0x50U) >> 8);  /* YS[15:8] */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3350      	adds	r3, #80	@ 0x50
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t)(Ypos + 0x50U);         /* YS[7:0] */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	3350      	adds	r3, #80	@ 0x50
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x01;                            /* YE[15:8] */
 8003e40:	2301      	movs	r3, #1
 8003e42:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8003e44:	2300      	movs	r3, #0
 8003e46:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0x3F;                            /* YE[7:0] */
 8003e48:	233f      	movs	r3, #63	@ 0x3f
 8003e4a:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	76fb      	strb	r3, [r7, #27]
 8003e50:	e012      	b.n	8003e78 <ST7789H2_SetCursor+0xe2>
  }
  else
  {
    parameter[0] = (uint8_t)(Ypos >> 8);  /* YS[15:8] */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t) Ypos;        /* YS[7:0] */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8003e64:	2300      	movs	r3, #0
 8003e66:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x00;                  /* YE[15:8] */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0xEF;                  /* YE[7:0] */
 8003e70:	23ef      	movs	r3, #239	@ 0xef
 8003e72:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8003e74:	2300      	movs	r3, #0
 8003e76:	76fb      	strb	r3, [r7, #27]
  }
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_RASET, parameter, 4);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f103 001c 	add.w	r0, r3, #28
 8003e7e:	f107 0214 	add.w	r2, r7, #20
 8003e82:	2304      	movs	r3, #4
 8003e84:	212b      	movs	r1, #43	@ 0x2b
 8003e86:	f000 fc42 	bl	800470e <st7789h2_write_reg>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	61fb      	str	r3, [r7, #28]

  if (ret != ST7789H2_OK)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <ST7789H2_SetCursor+0x108>
  {
    ret = ST7789H2_ERROR;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <ST7789H2_DrawBitmap>:
  * @param  Ypos Y position on LCD.
  * @param  pBmp Pointer to bitmap.
  * @retval Component status.
  */
int32_t ST7789H2_DrawBitmap(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08e      	sub	sp, #56	@ 0x38
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  int32_t  ret = ST7789H2_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index, size;
  uint32_t width, height;
  uint32_t Ystart, Ystop;

  /* Read file size */
  size = ((uint32_t)pBmp[5] << 24) | ((uint32_t)pBmp[4] << 16) | ((uint32_t)pBmp[3] << 8) | (uint32_t)pBmp[2];
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	3305      	adds	r3, #5
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	061a      	lsls	r2, r3, #24
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3303      	adds	r3, #3
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	3202      	adds	r2, #2
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Get bitmap data address offset */
  index = ((uint32_t)pBmp[13] << 24) | ((uint32_t)pBmp[12] << 16) | ((uint32_t)pBmp[11] << 8) | (uint32_t)pBmp[10];
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	330d      	adds	r3, #13
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	061a      	lsls	r2, r3, #24
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	330b      	adds	r3, #11
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	4313      	orrs	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	320a      	adds	r2, #10
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Get image width */
  width = ((uint32_t)pBmp[21] << 24) | ((uint32_t)pBmp[20] << 16) | ((uint32_t)pBmp[19] << 8) | (uint32_t)pBmp[18];
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	3315      	adds	r3, #21
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	061a      	lsls	r2, r3, #24
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3313      	adds	r3, #19
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	4313      	orrs	r3, r2
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	3212      	adds	r2, #18
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	623b      	str	r3, [r7, #32]
  width--;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	623b      	str	r3, [r7, #32]
  /* Get image height */
  height = ((uint32_t)pBmp[25] << 24) | ((uint32_t)pBmp[24] << 16) | ((uint32_t)pBmp[23] << 8) | (uint32_t)pBmp[22];
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3319      	adds	r3, #25
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	061a      	lsls	r2, r3, #24
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	3317      	adds	r3, #23
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	3216      	adds	r2, #22
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
  height--;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
  /* Get size of data */
  size = size - index;
 8003f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  size = size / 2U;
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute new Y start and stop values */
  if (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10c      	bne.n	8003f8e <ST7789H2_DrawBitmap+0xe6>
  {
    Ystart = 319U - (Ypos + height);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003f7e:	3301      	adds	r3, #1
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
    Ystop  = 319U - Ypos;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003f88:	3301      	adds	r3, #1
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8c:	e018      	b.n	8003fc0 <ST7789H2_DrawBitmap+0x118>
  }
  else if (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d10a      	bne.n	8003fac <ST7789H2_DrawBitmap+0x104>
  {
    Ystart = 319U - (Ypos + 0x50U + height);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    Ystop  = 319U - (Ypos + 0x50U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003faa:	e009      	b.n	8003fc0 <ST7789H2_DrawBitmap+0x118>
  }
  else
  {
    Ystart = 239U - (Ypos + height);
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    Ystop  = 239U - Ypos;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set GRAM Area - Partial Display Control */
  if (pObj->Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d122      	bne.n	800400e <ST7789H2_DrawBitmap+0x166>
  {
    parameter[0] = (uint8_t)((Xpos + 0x50U) >> 8);          /* XS[15:8] */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3350      	adds	r3, #80	@ 0x50
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t)(Xpos + 0x50U);                 /* XS[7:0] */
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3350      	adds	r3, #80	@ 0x50
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	75fb      	strb	r3, [r7, #23]
    parameter[4] = (uint8_t)((Xpos + width + 0x50U) >> 8);  /* XE[15:8] */
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	4413      	add	r3, r2
 8003fea:	3350      	adds	r3, #80	@ 0x50
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	767b      	strb	r3, [r7, #25]
    parameter[6] = (uint8_t)(Xpos + width + 0x50U);         /* XE[7:0] */
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	b2db      	uxtb	r3, r3
 8004002:	3350      	adds	r3, #80	@ 0x50
 8004004:	b2db      	uxtb	r3, r3
 8004006:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8004008:	2300      	movs	r3, #0
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	e01b      	b.n	8004046 <ST7789H2_DrawBitmap+0x19e>
  }
  else
  {
    parameter[0] = (uint8_t)(Xpos >> 8);            /* XS[15:8] */
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	b2db      	uxtb	r3, r3
 8004014:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 8004016:	2300      	movs	r3, #0
 8004018:	757b      	strb	r3, [r7, #21]
    parameter[2] = (uint8_t) Xpos;                  /* XS[7:0] */
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]
    parameter[4] = (uint8_t)((Xpos + width) >> 8);  /* XE[15:8] */
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	4413      	add	r3, r2
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	b2db      	uxtb	r3, r3
 800402e:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 8004030:	2300      	movs	r3, #0
 8004032:	767b      	strb	r3, [r7, #25]
    parameter[6] = (uint8_t)(Xpos + width);         /* XE[7:0] */
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4413      	add	r3, r2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	76fb      	strb	r3, [r7, #27]
  }
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_CASET, parameter, 4);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f103 001c 	add.w	r0, r3, #28
 800404c:	f107 0214 	add.w	r2, r7, #20
 8004050:	2304      	movs	r3, #4
 8004052:	212a      	movs	r1, #42	@ 0x2a
 8004054:	f000 fb5b 	bl	800470e <st7789h2_write_reg>
 8004058:	4602      	mov	r2, r0
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	4413      	add	r3, r2
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
  parameter[0] = (uint8_t)(Ystart >> 8);  /* YS[15:8] */
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	0a1b      	lsrs	r3, r3, #8
 8004064:	b2db      	uxtb	r3, r3
 8004066:	753b      	strb	r3, [r7, #20]
  parameter[1] = 0x00;
 8004068:	2300      	movs	r3, #0
 800406a:	757b      	strb	r3, [r7, #21]
  parameter[2] = (uint8_t) Ystart;        /* YS[7:0] */
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	b2db      	uxtb	r3, r3
 8004070:	75bb      	strb	r3, [r7, #22]
  parameter[3] = 0x00;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
  parameter[4] = (uint8_t)(Ystop >> 8);   /* YE[15:8] */
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	b2db      	uxtb	r3, r3
 800407c:	763b      	strb	r3, [r7, #24]
  parameter[5] = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	767b      	strb	r3, [r7, #25]
  parameter[6] = (uint8_t) Ystop;         /* YE[7:0] */
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	b2db      	uxtb	r3, r3
 8004086:	76bb      	strb	r3, [r7, #26]
  parameter[7] = 0x00;
 8004088:	2300      	movs	r3, #0
 800408a:	76fb      	strb	r3, [r7, #27]
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_RASET, parameter, 4);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f103 001c 	add.w	r0, r3, #28
 8004092:	f107 0214 	add.w	r2, r7, #20
 8004096:	2304      	movs	r3, #4
 8004098:	212b      	movs	r1, #43	@ 0x2b
 800409a:	f000 fb38 	bl	800470e <st7789h2_write_reg>
 800409e:	4602      	mov	r2, r0
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	4413      	add	r3, r2
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if ((pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT) || (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <ST7789H2_DrawBitmap+0x20e>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d117      	bne.n	80040e6 <ST7789H2_DrawBitmap+0x23e>
  {
    /* Memory access control: Invert MY */
    parameter[0] = (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT) ? 0x80U : 0x40U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <ST7789H2_DrawBitmap+0x21a>
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	e000      	b.n	80040c4 <ST7789H2_DrawBitmap+0x21c>
 80040c2:	2340      	movs	r3, #64	@ 0x40
 80040c4:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	757b      	strb	r3, [r7, #21]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f103 001c 	add.w	r0, r3, #28
 80040d0:	f107 0214 	add.w	r2, r7, #20
 80040d4:	2301      	movs	r3, #1
 80040d6:	2136      	movs	r1, #54	@ 0x36
 80040d8:	f000 fb19 	bl	800470e <st7789h2_write_reg>
 80040dc:	4602      	mov	r2, r0
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	4413      	add	r3, r2
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e4:	e016      	b.n	8004114 <ST7789H2_DrawBitmap+0x26c>
  }
  else
  {
    /* Memory access control: Invert MX */
    parameter[0] = (pObj->Orientation == ST7789H2_ORIENTATION_LANDSCAPE) ? 0xE0U : 0x20U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <ST7789H2_DrawBitmap+0x24a>
 80040ee:	23e0      	movs	r3, #224	@ 0xe0
 80040f0:	e000      	b.n	80040f4 <ST7789H2_DrawBitmap+0x24c>
 80040f2:	2320      	movs	r3, #32
 80040f4:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	757b      	strb	r3, [r7, #21]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f103 001c 	add.w	r0, r3, #28
 8004100:	f107 0214 	add.w	r2, r7, #20
 8004104:	2301      	movs	r3, #1
 8004106:	2136      	movs	r1, #54	@ 0x36
 8004108:	f000 fb01 	bl	800470e <st7789h2_write_reg>
 800410c:	4602      	mov	r2, r0
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	4413      	add	r3, r2
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Write GRAM */
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM, &pBmp[index], size);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f103 001c 	add.w	r0, r3, #28
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	441a      	add	r2, r3
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	212c      	movs	r1, #44	@ 0x2c
 8004124:	f000 faf3 	bl	800470e <st7789h2_write_reg>
 8004128:	4602      	mov	r2, r0
 800412a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412c:	4413      	add	r3, r2
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Restore GRAM Area - Partial Display Control */
  if (pObj->Orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d110      	bne.n	800415a <ST7789H2_DrawBitmap+0x2b2>
  {
    parameter[0] = 0x00; /* XS[15:8] */
 8004138:	2300      	movs	r3, #0
 800413a:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 800413c:	2300      	movs	r3, #0
 800413e:	757b      	strb	r3, [r7, #21]
    parameter[2] = 0x50; /* XS[7:0] */
 8004140:	2350      	movs	r3, #80	@ 0x50
 8004142:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x01; /* XE[15:8] */
 8004148:	2301      	movs	r3, #1
 800414a:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 800414c:	2300      	movs	r3, #0
 800414e:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0x3F; /* XE[7:0] */
 8004150:	233f      	movs	r3, #63	@ 0x3f
 8004152:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8004154:	2300      	movs	r3, #0
 8004156:	76fb      	strb	r3, [r7, #27]
 8004158:	e00f      	b.n	800417a <ST7789H2_DrawBitmap+0x2d2>
  }
  else
  {
    parameter[0] = 0x00; /* XS[15:8] */
 800415a:	2300      	movs	r3, #0
 800415c:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 800415e:	2300      	movs	r3, #0
 8004160:	757b      	strb	r3, [r7, #21]
    parameter[2] = 0x00; /* XS[7:0] */
 8004162:	2300      	movs	r3, #0
 8004164:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 8004166:	2300      	movs	r3, #0
 8004168:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x00; /* XE[15:8] */
 800416a:	2300      	movs	r3, #0
 800416c:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0xEF; /* XE[7:0] */
 8004172:	23ef      	movs	r3, #239	@ 0xef
 8004174:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 8004176:	2300      	movs	r3, #0
 8004178:	76fb      	strb	r3, [r7, #27]
  }
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_CASET, parameter, 4);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f103 001c 	add.w	r0, r3, #28
 8004180:	f107 0214 	add.w	r2, r7, #20
 8004184:	2304      	movs	r3, #4
 8004186:	212a      	movs	r1, #42	@ 0x2a
 8004188:	f000 fac1 	bl	800470e <st7789h2_write_reg>
 800418c:	4602      	mov	r2, r0
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	4413      	add	r3, r2
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
  if (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004198:	2b02      	cmp	r3, #2
 800419a:	d110      	bne.n	80041be <ST7789H2_DrawBitmap+0x316>
  {
    parameter[0] = 0x00; /* YS[15:8] */
 800419c:	2300      	movs	r3, #0
 800419e:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 80041a0:	2300      	movs	r3, #0
 80041a2:	757b      	strb	r3, [r7, #21]
    parameter[2] = 0x50; /* YS[7:0] */
 80041a4:	2350      	movs	r3, #80	@ 0x50
 80041a6:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x01; /* YE[15:8] */
 80041ac:	2301      	movs	r3, #1
 80041ae:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 80041b0:	2300      	movs	r3, #0
 80041b2:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0x3F; /* YE[7:0] */
 80041b4:	233f      	movs	r3, #63	@ 0x3f
 80041b6:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 80041b8:	2300      	movs	r3, #0
 80041ba:	76fb      	strb	r3, [r7, #27]
 80041bc:	e00f      	b.n	80041de <ST7789H2_DrawBitmap+0x336>
  }
  else
  {
    parameter[0] = 0x00; /* YS[15:8] */
 80041be:	2300      	movs	r3, #0
 80041c0:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	757b      	strb	r3, [r7, #21]
    parameter[2] = 0x00; /* YS[7:0] */
 80041c6:	2300      	movs	r3, #0
 80041c8:	75bb      	strb	r3, [r7, #22]
    parameter[3] = 0x00;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
    parameter[4] = 0x00; /* YE[15:8] */
 80041ce:	2300      	movs	r3, #0
 80041d0:	763b      	strb	r3, [r7, #24]
    parameter[5] = 0x00;
 80041d2:	2300      	movs	r3, #0
 80041d4:	767b      	strb	r3, [r7, #25]
    parameter[6] = 0xEF; /* YE[7:0] */
 80041d6:	23ef      	movs	r3, #239	@ 0xef
 80041d8:	76bb      	strb	r3, [r7, #26]
    parameter[7] = 0x00;
 80041da:	2300      	movs	r3, #0
 80041dc:	76fb      	strb	r3, [r7, #27]
  }
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_RASET, parameter, 4);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f103 001c 	add.w	r0, r3, #28
 80041e4:	f107 0214 	add.w	r2, r7, #20
 80041e8:	2304      	movs	r3, #4
 80041ea:	212b      	movs	r1, #43	@ 0x2b
 80041ec:	f000 fa8f 	bl	800470e <st7789h2_write_reg>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f4:	4413      	add	r3, r2
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if ((pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT) || (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT_ROT180))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <ST7789H2_DrawBitmap+0x360>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	2b02      	cmp	r3, #2
 8004206:	d117      	bne.n	8004238 <ST7789H2_DrawBitmap+0x390>
  {
    /* Memory access control: Re-invert MY */
    parameter[0] = (pObj->Orientation == ST7789H2_ORIENTATION_PORTRAIT) ? 0x00U : 0xC0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <ST7789H2_DrawBitmap+0x36c>
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <ST7789H2_DrawBitmap+0x36e>
 8004214:	23c0      	movs	r3, #192	@ 0xc0
 8004216:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00U;
 8004218:	2300      	movs	r3, #0
 800421a:	757b      	strb	r3, [r7, #21]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f103 001c 	add.w	r0, r3, #28
 8004222:	f107 0214 	add.w	r2, r7, #20
 8004226:	2301      	movs	r3, #1
 8004228:	2136      	movs	r1, #54	@ 0x36
 800422a:	f000 fa70 	bl	800470e <st7789h2_write_reg>
 800422e:	4602      	mov	r2, r0
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	4413      	add	r3, r2
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
 8004236:	e016      	b.n	8004266 <ST7789H2_DrawBitmap+0x3be>
  }
  else
  {
    /* Memory access control: Re-invert MX */
    parameter[0] = (pObj->Orientation == ST7789H2_ORIENTATION_LANDSCAPE) ? 0xA0U : 0x60U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <ST7789H2_DrawBitmap+0x39c>
 8004240:	23a0      	movs	r3, #160	@ 0xa0
 8004242:	e000      	b.n	8004246 <ST7789H2_DrawBitmap+0x39e>
 8004244:	2360      	movs	r3, #96	@ 0x60
 8004246:	753b      	strb	r3, [r7, #20]
    parameter[1] = 0x00U;
 8004248:	2300      	movs	r3, #0
 800424a:	757b      	strb	r3, [r7, #21]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_MADCTL, parameter, 1);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f103 001c 	add.w	r0, r3, #28
 8004252:	f107 0214 	add.w	r2, r7, #20
 8004256:	2301      	movs	r3, #1
 8004258:	2136      	movs	r1, #54	@ 0x36
 800425a:	f000 fa58 	bl	800470e <st7789h2_write_reg>
 800425e:	4602      	mov	r2, r0
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	4413      	add	r3, r2
 8004264:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  if (ret != ST7789H2_OK)
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <ST7789H2_DrawBitmap+0x3ca>
  {
    ret = ST7789H2_ERROR;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  return ret;
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004274:	4618      	mov	r0, r3
 8004276:	3738      	adds	r7, #56	@ 0x38
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ST7789H2_FillRGBRect>:
  * @param  Width Width of the rectangle.
  * @param  Height Height of the rectangle.
  * @retval Component status.
  */
int32_t ST7789H2_FillRGBRect(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8004282:	af00      	add	r7, sp, #0
 8004284:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 8004288:	f5a4 74fa 	sub.w	r4, r4, #500	@ 0x1f4
 800428c:	6020      	str	r0, [r4, #0]
 800428e:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8004292:	f5a0 70fc 	sub.w	r0, r0, #504	@ 0x1f8
 8004296:	6001      	str	r1, [r0, #0]
 8004298:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800429c:	f5a1 71fe 	sub.w	r1, r1, #508	@ 0x1fc
 80042a0:	600a      	str	r2, [r1, #0]
 80042a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042a6:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 80042aa:	6013      	str	r3, [r2, #0]
  int32_t  ret = ST7789H2_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  uint8_t  buffer[480];
  uint8_t *rect; 
  uint32_t i, j;

  rect = pData;
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  
  for(i = 0; i < Height; i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80042c6:	e062      	b.n	800438e <ST7789H2_FillRGBRect+0x112>
  {
    /* Set Cursor */
    ret += ST7789H2_SetCursor(pObj, Xpos, Ypos + i);
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80042d6:	441a      	add	r2, r3
 80042d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042dc:	f5a3 71fc 	sub.w	r1, r3, #504	@ 0x1f8
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80042e8:	6809      	ldr	r1, [r1, #0]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	f7ff fd53 	bl	8003d96 <ST7789H2_SetCursor>
 80042f0:	4602      	mov	r2, r0
 80042f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80042f6:	4413      	add	r3, r2
 80042f8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    /* Sent a complete line */
    for(j = 0; j < Width; j++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8004302:	e025      	b.n	8004350 <ST7789H2_FillRGBRect+0xd4>
    {
      buffer[2U*j]      = *rect;
 8004304:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 800430e:	7811      	ldrb	r1, [r2, #0]
 8004310:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004314:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004318:	54d1      	strb	r1, [r2, r3]
      rect++;
 800431a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800431e:	3301      	adds	r3, #1
 8004320:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
      buffer[(2U*j)+1U] = *rect;
 8004324:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	3301      	adds	r3, #1
 800432c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8004330:	7811      	ldrb	r1, [r2, #0]
 8004332:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004336:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800433a:	54d1      	strb	r1, [r2, r3]
      rect++;
 800433c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004340:	3301      	adds	r3, #1
 8004342:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
    for(j = 0; j < Width; j++)
 8004346:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800434a:	3301      	adds	r3, #1
 800434c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8004350:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8004354:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004358:	429a      	cmp	r2, r3
 800435a:	d3d3      	bcc.n	8004304 <ST7789H2_FillRGBRect+0x88>
    }
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM, buffer, Width);
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f103 001c 	add.w	r0, r3, #28
 800436a:	f107 0210 	add.w	r2, r7, #16
 800436e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004372:	212c      	movs	r1, #44	@ 0x2c
 8004374:	f000 f9cb 	bl	800470e <st7789h2_write_reg>
 8004378:	4602      	mov	r2, r0
 800437a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800437e:	4413      	add	r3, r2
 8004380:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  for(i = 0; i < Height; i++)
 8004384:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004388:	3301      	adds	r3, #1
 800438a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800438e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8004392:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004396:	429a      	cmp	r2, r3
 8004398:	d396      	bcc.n	80042c8 <ST7789H2_FillRGBRect+0x4c>
  }

  if(ret != ST7789H2_OK)
 800439a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <ST7789H2_FillRGBRect+0x12e>
  {
    ret = ST7789H2_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043a6:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  }

  return ret;
 80043aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}

080043b8 <ST7789H2_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t ST7789H2_DrawHLine(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  int32_t  ret = ST7789H2_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
  uint8_t  parameter[2];
  uint32_t i;

  /* Set Cursor */
  ret += ST7789H2_SetCursor(pObj, Xpos, Ypos);
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff fce1 	bl	8003d96 <ST7789H2_SetCursor>
 80043d4:	4602      	mov	r2, r0
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]

  /* Sent a complete line */
  parameter[0] = (uint8_t)(Color & 0xFFU);
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	753b      	strb	r3, [r7, #20]
  parameter[1] = (uint8_t)((Color >> 8) & 0xFFU);
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	757b      	strb	r3, [r7, #21]
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM, parameter, 1);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f103 001c 	add.w	r0, r3, #28
 80043f0:	f107 0214 	add.w	r2, r7, #20
 80043f4:	2301      	movs	r3, #1
 80043f6:	212c      	movs	r1, #44	@ 0x2c
 80043f8:	f000 f989 	bl	800470e <st7789h2_write_reg>
 80043fc:	4602      	mov	r2, r0
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	61fb      	str	r3, [r7, #28]
  for (i = 1; i < Length; i++)
 8004404:	2301      	movs	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e00f      	b.n	800442a <ST7789H2_DrawHLine+0x72>
  {
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM_CONTINUE, parameter, 1);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f103 001c 	add.w	r0, r3, #28
 8004410:	f107 0214 	add.w	r2, r7, #20
 8004414:	2301      	movs	r3, #1
 8004416:	213c      	movs	r1, #60	@ 0x3c
 8004418:	f000 f979 	bl	800470e <st7789h2_write_reg>
 800441c:	4602      	mov	r2, r0
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]
  for (i = 1; i < Length; i++)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	3301      	adds	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3eb      	bcc.n	800440a <ST7789H2_DrawHLine+0x52>
  }

  /* Workaround for last pixel */
  if ((Xpos + Length) == 240U)
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4413      	add	r3, r2
 8004438:	2bf0      	cmp	r3, #240	@ 0xf0
 800443a:	d119      	bne.n	8004470 <ST7789H2_DrawHLine+0xb8>
  {
    /* Write last pixel */
    ret += ST7789H2_SetCursor(pObj, (Xpos + Length - 1U), Ypos);
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	3b01      	subs	r3, #1
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4619      	mov	r1, r3
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff fca4 	bl	8003d96 <ST7789H2_SetCursor>
 800444e:	4602      	mov	r2, r0
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	61fb      	str	r3, [r7, #28]
    ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM, parameter, 1);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f103 001c 	add.w	r0, r3, #28
 800445c:	f107 0214 	add.w	r2, r7, #20
 8004460:	2301      	movs	r3, #1
 8004462:	212c      	movs	r1, #44	@ 0x2c
 8004464:	f000 f953 	bl	800470e <st7789h2_write_reg>
 8004468:	4602      	mov	r2, r0
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]
  }
  
  if (ret != ST7789H2_OK)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ST7789H2_DrawHLine+0xc4>
  {
    ret = ST7789H2_ERROR;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800447a:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800447c:	69fb      	ldr	r3, [r7, #28]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <ST7789H2_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color  Color of the line.
  * @retval Component status.
  */
int32_t ST7789H2_DrawVLine(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
  int32_t  ret = ST7789H2_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t i;

  /* Sent a complete line */
  for (i = 0; i < Length; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e00e      	b.n	80044bc <ST7789H2_DrawVLine+0x36>
  {
    ret += ST7789H2_SetPixel(pObj, Xpos, (Ypos + i), Color);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	441a      	add	r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f83f 	bl	800452c <ST7789H2_SetPixel>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4413      	add	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Length; i++)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3ec      	bcc.n	800449e <ST7789H2_DrawVLine+0x18>
  }

  if (ret != ST7789H2_OK)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <ST7789H2_DrawVLine+0x4a>
  {
    ret = ST7789H2_ERROR;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044ce:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80044d0:	697b      	ldr	r3, [r7, #20]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <ST7789H2_FillRect>:
  * @param  Height Height of the rectangle.
  * @param  Color  Color of the rectangle.
  * @retval Component status.
  */
int32_t ST7789H2_FillRect(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b088      	sub	sp, #32
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
  int32_t  ret = ST7789H2_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for (i = 0U; i < Height; i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e013      	b.n	800451a <ST7789H2_FillRect+0x40>
  {
    if (ST7789H2_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != ST7789H2_OK)
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	441a      	add	r2, r3
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff59 	bl	80043b8 <ST7789H2_DrawHLine>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <ST7789H2_FillRect+0x3a>
    {
      ret = ST7789H2_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004510:	617b      	str	r3, [r7, #20]
      break;
 8004512:	e006      	b.n	8004522 <ST7789H2_FillRect+0x48>
  for (i = 0U; i < Height; i++)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	3301      	adds	r3, #1
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3e7      	bcc.n	80044f2 <ST7789H2_FillRect+0x18>
    }
  }

  return ret;
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <ST7789H2_SetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t ST7789H2_SetPixel(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7789H2_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]

  /* Set Cursor */
  ret += ST7789H2_SetCursor(pObj, Xpos, Ypos);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff fc27 	bl	8003d96 <ST7789H2_SetCursor>
 8004548:	4602      	mov	r2, r0
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  /* write pixel */
  ret += st7789h2_write_reg(&pObj->Ctx, ST7789H2_WRITE_RAM, (uint8_t *) &Color, 1);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f103 001c 	add.w	r0, r3, #28
 8004556:	463a      	mov	r2, r7
 8004558:	2301      	movs	r3, #1
 800455a:	212c      	movs	r1, #44	@ 0x2c
 800455c:	f000 f8d7 	bl	800470e <st7789h2_write_reg>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (ret != ST7789H2_OK)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <ST7789H2_SetPixel+0x48>
  {
    ret = ST7789H2_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004572:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004574:	697b      	ldr	r3, [r7, #20]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ST7789H2_GetPixel>:
  * @param  Ypos Y position on LCD.
  * @param  Color Color of the pixel.
  * @retval Component status.
  */
int32_t ST7789H2_GetPixel(ST7789H2_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b088      	sub	sp, #32
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7789H2_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
  uint8_t parameter[6];

  /* Set Cursor */
  ret += ST7789H2_SetCursor(pObj, Xpos, Ypos);
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff fbfe 	bl	8003d96 <ST7789H2_SetCursor>
 800459a:	4602      	mov	r2, r0
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	61fb      	str	r3, [r7, #28]

  /* read pixel */
  ret += st7789h2_read_reg(&pObj->Ctx, ST7789H2_READ_RAM, parameter, 3);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f103 001c 	add.w	r0, r3, #28
 80045a8:	f107 0214 	add.w	r2, r7, #20
 80045ac:	2303      	movs	r3, #3
 80045ae:	212e      	movs	r1, #46	@ 0x2e
 80045b0:	f000 f898 	bl	80046e4 <st7789h2_read_reg>
 80045b4:	4602      	mov	r2, r0
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	61fb      	str	r3, [r7, #28]

  /* Set color in RGB565 format */
  *Color = ((((uint32_t)parameter[3] << 8) & 0xF800U) |
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	f403 4278 	and.w	r2, r3, #63488	@ 0xf800
            (((uint32_t)parameter[2] << 3) & 0x07E0U) |
 80045c4:	7dbb      	ldrb	r3, [r7, #22]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
  *Color = ((((uint32_t)parameter[3] << 8) & 0xF800U) |
 80045cc:	431a      	orrs	r2, r3
            (((uint32_t)parameter[5] >> 3) & 0x001FU));
 80045ce:	7e7b      	ldrb	r3, [r7, #25]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 031f 	and.w	r3, r3, #31
            (((uint32_t)parameter[2] << 3) & 0x07E0U) |
 80045d8:	431a      	orrs	r2, r3
  *Color = ((((uint32_t)parameter[3] << 8) & 0xF800U) |
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	601a      	str	r2, [r3, #0]

  if (ret != ST7789H2_OK)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <ST7789H2_GetPixel+0x6c>
  {
    ret = ST7789H2_ERROR;
 80045e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045e8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80045ea:	69fb      	ldr	r3, [r7, #28]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <ST7789H2_GetXSize>:
  * @param  pObj Pointer to component object.
  * @param  Xsize X size of LCD.
  * @retval Component status.
  */
int32_t ST7789H2_GetXSize(ST7789H2_Object_t *pObj, uint32_t *XSize)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = 240;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	22f0      	movs	r2, #240	@ 0xf0
 8004602:	601a      	str	r2, [r3, #0]

  return ST7789H2_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <ST7789H2_GetYSize>:
  * @param  pObj Pointer to component object.
  * @param  Ysize Y size of LCD.
  * @retval Component status.
  */
int32_t ST7789H2_GetYSize(ST7789H2_Object_t *pObj, uint32_t *YSize)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = 240;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	22f0      	movs	r2, #240	@ 0xf0
 8004620:	601a      	str	r2, [r3, #0]

  return ST7789H2_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <ST7789H2_ReadRegWrap>:
  * @param  pData   The target register value to be red.
  * @param  Length  Buffer size to be red.
  * @retval error status.
  */
static int32_t ST7789H2_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	460b      	mov	r3, r1
 800463e:	817b      	strh	r3, [r7, #10]
  ST7789H2_Object_t *pObj = (ST7789H2_Object_t *)handle;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	691c      	ldr	r4, [r3, #16]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	8918      	ldrh	r0, [r3, #8]
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	47a0      	blx	r4
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd90      	pop	{r4, r7, pc}

0800465e <ST7789H2_WriteRegWrap>:
  * @param  pData  The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t ST7789H2_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 800465e:	b590      	push	{r4, r7, lr}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	460b      	mov	r3, r1
 800466c:	817b      	strh	r3, [r7, #10]
  ST7789H2_Object_t *pObj = (ST7789H2_Object_t *)handle;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	68dc      	ldr	r4, [r3, #12]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	8918      	ldrh	r0, [r3, #8]
 800467a:	8979      	ldrh	r1, [r7, #10]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	47a0      	blx	r4
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <ST7789H2_SendDataWrap>:
  * @param  pData  The value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t ST7789H2_SendDataWrap(void *handle, uint8_t *pData, uint32_t Length)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  ST7789H2_Object_t *pObj = (ST7789H2_Object_t *)handle;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	4798      	blx	r3
 80046a6:	4603      	mov	r3, r0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <ST7789H2_Delay>:
  * @brief  ST7789H2 delay
  * @param  Delay Delay in ms
  * @retval Component error status
  */
static void ST7789H2_Delay(ST7789H2_Object_t *pObj, uint32_t Delay)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4798      	blx	r3
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80046c4:	bf00      	nop
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	4798      	blx	r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d8f5      	bhi.n	80046c6 <ST7789H2_Delay+0x16>
  {
  }
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <st7789h2_read_reg>:
* Description   : Generic Reading function.
* Input         : Driver context, register Address, length of buffer
* Output        : Status.
*******************************************************************************/
int32_t st7789h2_read_reg(ST7789H2_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint32_t length)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	460b      	mov	r3, r1
 80046f2:	817b      	strh	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685c      	ldr	r4, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68d8      	ldr	r0, [r3, #12]
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	47a0      	blx	r4
 8004704:	4603      	mov	r3, r0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}

0800470e <st7789h2_write_reg>:
* Input         : Driver context, Register Address, data to be written,
*                 length of buffer.
* Output        : Status.
*******************************************************************************/
int32_t st7789h2_write_reg(ST7789H2_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint32_t length)
{
 800470e:	b590      	push	{r4, r7, lr}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	460b      	mov	r3, r1
 800471c:	817b      	strh	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68d8      	ldr	r0, [r3, #12]
 8004726:	8979      	ldrh	r1, [r7, #10]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	47a0      	blx	r4
 800472e:	4603      	mov	r3, r0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bd90      	pop	{r4, r7, pc}

08004738 <st7789h2_send_data>:
* Description   : Generic Send function.
* Input         : Driver context, data to be written, length of buffer.
* Output        : Status.
*******************************************************************************/
int32_t st7789h2_send_data(ST7789H2_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	68d0      	ldr	r0, [r2, #12]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	4798      	blx	r3
 8004752:	4603      	mov	r3, r0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <TicTacToe_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval TicTacToe error code
  */
int32_t TicTacToe_LED_Init(Led_TypeDef Led)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
  int32_t          status = TicTacToe_ERROR_NONE;
 8004766:	2300      	movs	r3, #0
 8004768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10c      	bne.n	800478a <TicTacToe_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	4a25      	ldr	r2, [pc, #148]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 8004776:	f043 0308 	orr.w	r3, r3, #8
 800477a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	e019      	b.n	80047be <TicTacToe_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 8004790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004794:	6593      	str	r3, [r2, #88]	@ 0x58
 8004796:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80047a2:	f7fd fa19 	bl	8001bd8 <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 80047a6:	4b19      	ldr	r3, [pc, #100]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	4a18      	ldr	r2, [pc, #96]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 80047ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b2:	4b16      	ldr	r3, [pc, #88]	@ (800480c <TicTacToe_LED_Init+0xb0>)
 80047b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	4a13      	ldr	r2, [pc, #76]	@ (8004810 <TicTacToe_LED_Init+0xb4>)
 80047c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c6:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80047c8:	2301      	movs	r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 80047cc:	2301      	movs	r3, #1
 80047ce:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d0:	2303      	movs	r3, #3
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004814 <TicTacToe_LED_Init+0xb8>)
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	f107 0218 	add.w	r2, r7, #24
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fc f884 	bl	80008f0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <TicTacToe_LED_Init+0xb8>)
 80047ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4a07      	ldr	r2, [pc, #28]	@ (8004810 <TicTacToe_LED_Init+0xb4>)
 80047f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc fae6 	bl	8000dcc <HAL_GPIO_WritePin>

  return status;
 8004800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004802:	4618      	mov	r0, r3
 8004804:	3730      	adds	r7, #48	@ 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	20000088 	.word	0x20000088
 8004814:	2000008c 	.word	0x2000008c

08004818 <TicTacToe_LED_Toggle>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval TicTacToe error code
  */
int32_t TicTacToe_LED_Toggle(Led_TypeDef Led)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  int32_t status = TicTacToe_ERROR_NONE;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <TicTacToe_LED_Toggle+0x30>)
 800482a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4906      	ldr	r1, [pc, #24]	@ (800484c <TicTacToe_LED_Toggle+0x34>)
 8004832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fc fadf 	bl	8000dfc <HAL_GPIO_TogglePin>

  return status;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	2000008c 	.word	0x2000008c
 800484c:	20000088 	.word	0x20000088

08004850 <TicTacToe_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval TicTacToe error code
  */
int32_t TicTacToe_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	@ 0x30
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	460a      	mov	r2, r1
 800485a:	71fb      	strb	r3, [r7, #7]
 800485c:	4613      	mov	r3, r2
 800485e:	71bb      	strb	r3, [r7, #6]
  int32_t               status = TicTacToe_ERROR_NONE;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              TicTacToe_BUTTON_IT_PRIO[BUTTONn] = {TicTacToe_BUTTON_USER_IT_PRIORITY};
 8004864:	2307      	movs	r3, #7
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8004868:	4b3f      	ldr	r3, [pc, #252]	@ (8004968 <TicTacToe_PB_Init+0x118>)
 800486a:	613b      	str	r3, [r7, #16]
  TicTacToe_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 800486c:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <TicTacToe_PB_Init+0x11c>)
 800486e:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8004870:	4b3f      	ldr	r3, [pc, #252]	@ (8004970 <TicTacToe_PB_Init+0x120>)
 8004872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004874:	4a3e      	ldr	r2, [pc, #248]	@ (8004970 <TicTacToe_PB_Init+0x120>)
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800487c:	4b3c      	ldr	r3, [pc, #240]	@ (8004970 <TicTacToe_PB_Init+0x120>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	4a3a      	ldr	r2, [pc, #232]	@ (8004974 <TicTacToe_PB_Init+0x124>)
 800488c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004890:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8004896:	2302      	movs	r3, #2
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 800489a:	79bb      	ldrb	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <TicTacToe_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	4a34      	ldr	r2, [pc, #208]	@ (8004978 <TicTacToe_PB_Init+0x128>)
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	f107 0218 	add.w	r2, r7, #24
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc f81c 	bl	80008f0 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80048b8:	79bb      	ldrb	r3, [r7, #6]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d14f      	bne.n	800495e <TicTacToe_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 80048be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <TicTacToe_PB_Init+0x128>)
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	f107 0218 	add.w	r2, r7, #24
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fc f80c 	bl	80008f0 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 80048d8:	79fa      	ldrb	r2, [r7, #7]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4a26      	ldr	r2, [pc, #152]	@ (800497c <TicTacToe_PB_Init+0x12c>)
 80048e4:	441a      	add	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	3330      	adds	r3, #48	@ 0x30
 80048ec:	443b      	add	r3, r7
 80048ee:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fb ff3a 	bl	800076e <HAL_EXTI_GetHandle>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d12b      	bne.n	8004958 <TicTacToe_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8004900:	79fa      	ldrb	r2, [r7, #7]
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a1c      	ldr	r2, [pc, #112]	@ (800497c <TicTacToe_PB_Init+0x12c>)
 800490c:	1898      	adds	r0, r3, r2
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	3330      	adds	r3, #48	@ 0x30
 8004914:	443b      	add	r3, r7
 8004916:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800491a:	461a      	mov	r2, r3
 800491c:	2101      	movs	r1, #1
 800491e:	f7fb fefa 	bl	8000716 <HAL_EXTI_RegisterCallback>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d113      	bne.n	8004950 <TicTacToe_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], TicTacToe_BUTTON_IT_PRIO[Button], 0x00);
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <TicTacToe_PB_Init+0x130>)
 800492c:	56d0      	ldrsb	r0, [r2, r3]
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3330      	adds	r3, #48	@ 0x30
 8004934:	443b      	add	r3, r7
 8004936:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800493a:	2200      	movs	r2, #0
 800493c:	4619      	mov	r1, r3
 800493e:	f7fb feb6 	bl	80006ae <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	4a0e      	ldr	r2, [pc, #56]	@ (8004980 <TicTacToe_PB_Init+0x130>)
 8004946:	56d3      	ldrsb	r3, [r2, r3]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb feca 	bl	80006e2 <HAL_NVIC_EnableIRQ>
 800494e:	e006      	b.n	800495e <TicTacToe_PB_Init+0x10e>
      }
      else
      {
        status = TicTacToe_ERROR_PERIPH_FAILURE;
 8004950:	f06f 0303 	mvn.w	r3, #3
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004956:	e002      	b.n	800495e <TicTacToe_PB_Init+0x10e>
      }
    }
    else
    {
      status = TicTacToe_ERROR_PERIPH_FAILURE;
 8004958:	f06f 0303 	mvn.w	r3, #3
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 800495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004960:	4618      	mov	r0, r3
 8004962:	3730      	adds	r7, #48	@ 0x30
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0600000d 	.word	0x0600000d
 800496c:	080049b1 	.word	0x080049b1
 8004970:	40021000 	.word	0x40021000
 8004974:	20000094 	.word	0x20000094
 8004978:	20000098 	.word	0x20000098
 800497c:	20000100 	.word	0x20000100
 8004980:	2000009c 	.word	0x2000009c

08004984 <TicTacToe_PB_IRQHandler>:
  *     @arg BUTTON_WAKEUP
  *     @arg BUTTON_TAMPER
  * @retval None.
  */
void TicTacToe_PB_IRQHandler(Button_TypeDef Button)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800498e:	79fa      	ldrb	r2, [r7, #7]
 8004990:	4613      	mov	r3, r2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4a04      	ldr	r2, [pc, #16]	@ (80049ac <TicTacToe_PB_IRQHandler+0x28>)
 800499a:	4413      	add	r3, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fefb 	bl	8000798 <HAL_EXTI_IRQHandler>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000100 	.word	0x20000100

080049b0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  TicTacToe_PB_Callback(BUTTON_USER);
 80049b4:	2000      	movs	r0, #0
 80049b6:	f002 f9c7 	bl	8006d48 <TicTacToe_PB_Callback>
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}

080049be <TicTacToe_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
int32_t TicTacToe_GetTick(void)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 80049c4:	f7fb fd68 	bl	8000498 <HAL_GetTick>
 80049c8:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 80049ca:	687b      	ldr	r3, [r7, #4]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <TicTacToe_I2C1_Init>:
/**
  * @brief  Initialize TicTacToe I2C1.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_I2C1_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
  int32_t status = TicTacToe_ERROR_NONE;
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]

  hbus_i2c1.Instance = BUS_I2C1;
 80049de:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <TicTacToe_I2C1_Init+0x6c>)
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <TicTacToe_I2C1_Init+0x70>)
 80049e2:	601a      	str	r2, [r3, #0]

  if (I2c1InitCounter == 0U)
 80049e4:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <TicTacToe_I2C1_Init+0x74>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d119      	bne.n	8004a20 <TicTacToe_I2C1_Init+0x4c>
  {
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 80049ec:	4814      	ldr	r0, [pc, #80]	@ (8004a40 <TicTacToe_I2C1_Init+0x6c>)
 80049ee:	f7fc fd1f 	bl	8001430 <HAL_I2C_GetState>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d113      	bne.n	8004a20 <TicTacToe_I2C1_Init+0x4c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C1_MspInit(&hbus_i2c1);
 80049f8:	4811      	ldr	r0, [pc, #68]	@ (8004a40 <TicTacToe_I2C1_Init+0x6c>)
 80049fa:	f000 f8c5 	bl	8004b88 <I2C1_MspInit>

      if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
 80049fe:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <TicTacToe_I2C1_Init+0x78>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4913      	ldr	r1, [pc, #76]	@ (8004a50 <TicTacToe_I2C1_Init+0x7c>)
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f9dd 	bl	8004dc4 <I2C_GetTiming>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	480c      	ldr	r0, [pc, #48]	@ (8004a40 <TicTacToe_I2C1_Init+0x6c>)
 8004a10:	f000 f848 	bl	8004aa4 <MX_I2C1_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <TicTacToe_I2C1_Init+0x4c>
      {
        status = TicTacToe_ERROR_BUS_FAILURE;
 8004a1a:	f06f 0307 	mvn.w	r3, #7
 8004a1e:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c1InitCounter < 0xFFFFFFFFU)
 8004a20:	4b09      	ldr	r3, [pc, #36]	@ (8004a48 <TicTacToe_I2C1_Init+0x74>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a28:	d004      	beq.n	8004a34 <TicTacToe_I2C1_Init+0x60>
  {
    I2c1InitCounter++;
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <TicTacToe_I2C1_Init+0x74>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a05      	ldr	r2, [pc, #20]	@ (8004a48 <TicTacToe_I2C1_Init+0x74>)
 8004a32:	6013      	str	r3, [r2, #0]
  }
  return status;
 8004a34:	687b      	ldr	r3, [r7, #4]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000b14 	.word	0x20000b14
 8004a44:	40005400 	.word	0x40005400
 8004a48:	2000010c 	.word	0x2000010c
 8004a4c:	20000000 	.word	0x20000000
 8004a50:	000186a0 	.word	0x000186a0

08004a54 <TicTacToe_I2C1_DeInit>:
/**
  * @brief  DeInitialize TicTacToe I2C1.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_I2C1_DeInit(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  int32_t status = TicTacToe_ERROR_NONE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]

  if (I2c1InitCounter > 0U)
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <TicTacToe_I2C1_DeInit+0x48>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d014      	beq.n	8004a90 <TicTacToe_I2C1_DeInit+0x3c>
  {
    I2c1InitCounter--;
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <TicTacToe_I2C1_DeInit+0x48>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a9c <TicTacToe_I2C1_DeInit+0x48>)
 8004a6e:	6013      	str	r3, [r2, #0]
    if (I2c1InitCounter == 0U)
 8004a70:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <TicTacToe_I2C1_DeInit+0x48>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <TicTacToe_I2C1_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C1_MspDeInit(&hbus_i2c1);
 8004a78:	4809      	ldr	r0, [pc, #36]	@ (8004aa0 <TicTacToe_I2C1_DeInit+0x4c>)
 8004a7a:	f000 f8db 	bl	8004c34 <I2C1_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
 8004a7e:	4808      	ldr	r0, [pc, #32]	@ (8004aa0 <TicTacToe_I2C1_DeInit+0x4c>)
 8004a80:	f7fc fa65 	bl	8000f4e <HAL_I2C_DeInit>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <TicTacToe_I2C1_DeInit+0x3c>
      {
        status = TicTacToe_ERROR_PERIPH_FAILURE;
 8004a8a:	f06f 0303 	mvn.w	r3, #3
 8004a8e:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 8004a90:	687b      	ldr	r3, [r7, #4]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000010c 	.word	0x2000010c
 8004aa0:	20000b14 	.word	0x20000b14

08004aa4 <MX_I2C1_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc f9a4 	bl	8000e30 <HAL_I2C_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <MX_I2C1_Init+0x50>
  {
    status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e014      	b.n	8004b1e <MX_I2C1_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc ff6a 	bl	80019d4 <HAL_I2CEx_ConfigAnalogFilter>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <MX_I2C1_Init+0x68>
    {
      status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
 8004b0a:	e008      	b.n	8004b1e <MX_I2C1_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc ffab 	bl	8001a6a <HAL_I2CEx_ConfigDigitalFilter>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_I2C1_Init+0x7a>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <TicTacToe_I2C1_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60ba      	str	r2, [r7, #8]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	81fb      	strh	r3, [r7, #14]
 8004b36:	460b      	mov	r3, r1
 8004b38:	81bb      	strh	r3, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  return I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8004b3e:	89b9      	ldrh	r1, [r7, #12]
 8004b40:	89f8      	ldrh	r0, [r7, #14]
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f000 f893 	bl	8004c74 <I2C1_WriteReg>
 8004b4e:	4603      	mov	r3, r0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <TicTacToe_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval TicTacToe status
  */
int32_t TicTacToe_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60ba      	str	r2, [r7, #8]
 8004b60:	461a      	mov	r2, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	81fb      	strh	r3, [r7, #14]
 8004b66:	460b      	mov	r3, r1
 8004b68:	81bb      	strh	r3, [r7, #12]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  return I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8004b6e:	89b9      	ldrh	r1, [r7, #12]
 8004b70:	89f8      	ldrh	r0, [r7, #14]
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f000 f8cf 	bl	8004d1c <I2C1_ReadReg>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C1_MspInit>:
  * @brief  Initializes I2C1 MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void  I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
 8004b90:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b94:	4a25      	ldr	r2, [pc, #148]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b9c:	4b23      	ldr	r3, [pc, #140]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	693b      	ldr	r3, [r7, #16]
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
 8004ba8:	4b20      	ldr	r3, [pc, #128]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bac:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004bae:	f043 0302 	orr.w	r3, r3, #2
 8004bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_GPIO_PIN;
 8004bc0:	2340      	movs	r3, #64	@ 0x40
 8004bc2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004bc4:	2312      	movs	r3, #18
 8004bc6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4815      	ldr	r0, [pc, #84]	@ (8004c30 <I2C1_MspInit+0xa8>)
 8004bdc:	f7fb fe88 	bl	80008f0 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_GPIO_PIN;
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8004be4:	2304      	movs	r3, #4
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4619      	mov	r1, r3
 8004bee:	4810      	ldr	r0, [pc, #64]	@ (8004c30 <I2C1_MspInit+0xa8>)
 8004bf0:	f7fb fe7e 	bl	80008f0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004bfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c00:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 8004c0c:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	4a06      	ldr	r2, [pc, #24]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c16:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 8004c18:	4b04      	ldr	r3, [pc, #16]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	4a03      	ldr	r2, [pc, #12]	@ (8004c2c <I2C1_MspInit+0xa4>)
 8004c1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004c24:	bf00      	nop
 8004c26:	3728      	adds	r7, #40	@ 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	42020400 	.word	0x42020400

08004c34 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  gpio_init_structure.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004c3c:	2340      	movs	r3, #64	@ 0x40
 8004c3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4619      	mov	r1, r3
 8004c44:	4809      	ldr	r0, [pc, #36]	@ (8004c6c <I2C1_MspDeInit+0x38>)
 8004c46:	f7fb ffd3 	bl	8000bf0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4619      	mov	r1, r3
 8004c52:	4806      	ldr	r0, [pc, #24]	@ (8004c6c <I2C1_MspDeInit+0x38>)
 8004c54:	f7fb ffcc 	bl	8000bf0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <I2C1_MspDeInit+0x3c>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	4a04      	ldr	r2, [pc, #16]	@ (8004c70 <I2C1_MspDeInit+0x3c>)
 8004c5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c62:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c64:	bf00      	nop
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	42020400 	.word	0x42020400
 8004c70:	40021000 	.word	0x40021000

08004c74 <I2C1_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval TicTacToe status.
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af04      	add	r7, sp, #16
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	81fb      	strh	r3, [r7, #14]
 8004c80:	460b      	mov	r3, r1
 8004c82:	81bb      	strh	r3, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	817b      	strh	r3, [r7, #10]
  int32_t  status = TicTacToe_ERROR_NONE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 8004c8c:	8978      	ldrh	r0, [r7, #10]
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	89f9      	ldrh	r1, [r7, #14]
 8004c92:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	8c3b      	ldrh	r3, [r7, #32]
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	481d      	ldr	r0, [pc, #116]	@ (8004d18 <I2C1_WriteReg+0xa4>)
 8004ca4:	f7fc f996 	bl	8000fd4 <HAL_I2C_Mem_Write>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02f      	beq.n	8004d0e <I2C1_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 8004cae:	481a      	ldr	r0, [pc, #104]	@ (8004d18 <I2C1_WriteReg+0xa4>)
 8004cb0:	f7fc fbcc 	bl	800144c <HAL_I2C_GetError>
 8004cb4:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <I2C1_WriteReg+0x54>
    {
      status = TicTacToe_ERROR_BUS_PROTOCOL_FAILURE;
 8004cc0:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e022      	b.n	8004d0e <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <I2C1_WriteReg+0x66>
    {
      status = TicTacToe_ERROR_BUS_ARBITRATION_LOSS;
 8004cd2:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e019      	b.n	8004d0e <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C1_WriteReg+0x78>
    {
      status = TicTacToe_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004ce4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e010      	b.n	8004d0e <I2C1_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <I2C1_WriteReg+0x8c>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <I2C1_WriteReg+0x94>
    {
      status = TicTacToe_ERROR_BUS_TRANSACTION_FAILURE;
 8004d00:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e002      	b.n	8004d0e <I2C1_WriteReg+0x9a>
    }
    else
    {
      status = TicTacToe_ERROR_PERIPH_FAILURE;
 8004d08:	f06f 0303 	mvn.w	r3, #3
 8004d0c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8004d0e:	697b      	ldr	r3, [r7, #20]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000b14 	.word	0x20000b14

08004d1c <I2C1_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval TicTacToe status.
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	4603      	mov	r3, r0
 8004d26:	81fb      	strh	r3, [r7, #14]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	81bb      	strh	r3, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	817b      	strh	r3, [r7, #10]
  int32_t  status = TicTacToe_ERROR_NONE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 8004d34:	8978      	ldrh	r0, [r7, #10]
 8004d36:	89ba      	ldrh	r2, [r7, #12]
 8004d38:	89f9      	ldrh	r1, [r7, #14]
 8004d3a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	8c3b      	ldrh	r3, [r7, #32]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	481d      	ldr	r0, [pc, #116]	@ (8004dc0 <I2C1_ReadReg+0xa4>)
 8004d4c:	f7fc fa56 	bl	80011fc <HAL_I2C_Mem_Read>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d02f      	beq.n	8004db6 <I2C1_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 8004d56:	481a      	ldr	r0, [pc, #104]	@ (8004dc0 <I2C1_ReadReg+0xa4>)
 8004d58:	f7fc fb78 	bl	800144c <HAL_I2C_GetError>
 8004d5c:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <I2C1_ReadReg+0x54>
    {
      status = TicTacToe_ERROR_BUS_PROTOCOL_FAILURE;
 8004d68:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e022      	b.n	8004db6 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <I2C1_ReadReg+0x66>
    {
      status = TicTacToe_ERROR_BUS_ARBITRATION_LOSS;
 8004d7a:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e019      	b.n	8004db6 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <I2C1_ReadReg+0x78>
    {
      status = TicTacToe_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004d8c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e010      	b.n	8004db6 <I2C1_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <I2C1_ReadReg+0x8c>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <I2C1_ReadReg+0x94>
    {
      status = TicTacToe_ERROR_BUS_TRANSACTION_FAILURE;
 8004da8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e002      	b.n	8004db6 <I2C1_ReadReg+0x9a>
    }
    else
    {
      status = TicTacToe_ERROR_PERIPH_FAILURE;
 8004db0:	f06f 0303 	mvn.w	r3, #3
 8004db4:	617b      	str	r3, [r7, #20]
    }

  }

  return status;
 8004db6:	697b      	ldr	r3, [r7, #20]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000b14 	.word	0x20000b14

08004dc4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d06b      	beq.n	8004eb0 <I2C_GetTiming+0xec>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d068      	beq.n	8004eb0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e060      	b.n	8004ea6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004de4:	4a35      	ldr	r2, [pc, #212]	@ (8004ebc <I2C_GetTiming+0xf8>)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	212c      	movs	r1, #44	@ 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d352      	bcc.n	8004ea0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004dfa:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <I2C_GetTiming+0xf8>)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	212c      	movs	r1, #44	@ 0x2c
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	4413      	add	r3, r2
 8004e06:	3308      	adds	r3, #8
 8004e08:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d847      	bhi.n	8004ea0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004e10:	6939      	ldr	r1, [r7, #16]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f856 	bl	8004ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f940 	bl	80050a0 <I2C_Compute_SCLL_SCLH>
 8004e20:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e26:	d842      	bhi.n	8004eae <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004e28:	4925      	ldr	r1, [pc, #148]	@ (8004ec0 <I2C_GetTiming+0xfc>)
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004e3a:	4821      	ldr	r0, [pc, #132]	@ (8004ec0 <I2C_GetTiming+0xfc>)
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4403      	add	r3, r0
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	051b      	lsls	r3, r3, #20
 8004e4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004e52:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004e54:	481a      	ldr	r0, [pc, #104]	@ (8004ec0 <I2C_GetTiming+0xfc>)
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4403      	add	r3, r0
 8004e62:	3308      	adds	r3, #8
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004e6c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8004e6e:	4814      	ldr	r0, [pc, #80]	@ (8004ec0 <I2C_GetTiming+0xfc>)
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4403      	add	r3, r0
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004e84:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004e86:	480e      	ldr	r0, [pc, #56]	@ (8004ec0 <I2C_GetTiming+0xfc>)
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4403      	add	r3, r0
 8004e94:	3310      	adds	r3, #16
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	617b      	str	r3, [r7, #20]
        }
        break;
 8004e9e:	e006      	b.n	8004eae <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d99b      	bls.n	8004de4 <I2C_GetTiming+0x20>
 8004eac:	e000      	b.n	8004eb0 <I2C_GetTiming+0xec>
        break;
 8004eae:	bf00      	nop
      }
    }
  }

  return ret;
 8004eb0:	697b      	ldr	r3, [r7, #20]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	08007a54 	.word	0x08007a54
 8004ec0:	20000110 	.word	0x20000110

08004ec4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b08f      	sub	sp, #60	@ 0x3c
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004ece:	2310      	movs	r3, #16
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	085a      	lsrs	r2, r3, #1
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8005090 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ee0:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8004ee2:	2332      	movs	r3, #50	@ 0x32
 8004ee4:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8004ee6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004eea:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004eec:	4a69      	ldr	r2, [pc, #420]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	212c      	movs	r1, #44	@ 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3324      	adds	r3, #36	@ 0x24
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	4a65      	ldr	r2, [pc, #404]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	212c      	movs	r1, #44	@ 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004f10:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004f12:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004f14:	495f      	ldr	r1, [pc, #380]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	202c      	movs	r0, #44	@ 0x2c
 8004f1a:	fb00 f303 	mul.w	r3, r0, r3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3328      	adds	r3, #40	@ 0x28
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3303      	adds	r3, #3
 8004f26:	69f9      	ldr	r1, [r7, #28]
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f30:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	212c      	movs	r1, #44	@ 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	4a54      	ldr	r2, [pc, #336]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	212c      	movs	r1, #44	@ 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3320      	adds	r3, #32
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004f54:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f56:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004f58:	494e      	ldr	r1, [pc, #312]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	202c      	movs	r0, #44	@ 0x2c
 8004f5e:	fb00 f303 	mul.w	r3, r0, r3
 8004f62:	440b      	add	r3, r1
 8004f64:	3328      	adds	r3, #40	@ 0x28
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	69f9      	ldr	r1, [r7, #28]
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004f74:	4a47      	ldr	r2, [pc, #284]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	212c      	movs	r1, #44	@ 0x2c
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3320      	adds	r3, #32
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	4a43      	ldr	r2, [pc, #268]	@ (8005094 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	212c      	movs	r1, #44	@ 0x2c
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	3314      	adds	r3, #20
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4403      	add	r3, r0
 8004f98:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dc01      	bgt.n	8004fa4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8004fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dc01      	bgt.n	8004fae <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb2:	e062      	b.n	800507a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e059      	b.n	800506e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc0:	3201      	adds	r2, #1
 8004fc2:	fb03 f202 	mul.w	r2, r3, r2
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
 8004fcc:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d348      	bcc.n	8005068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	e042      	b.n	8005062 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	fb03 f202 	mul.w	r2, r3, r2
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d332      	bcc.n	800505c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d82e      	bhi.n	800505c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8004ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005002:	429a      	cmp	r2, r3
 8005004:	d02a      	beq.n	800505c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005006:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4924      	ldr	r1, [pc, #144]	@ (800509c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005018:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800501a:	4b1f      	ldr	r3, [pc, #124]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	491f      	ldr	r1, [pc, #124]	@ (800509c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3304      	adds	r3, #4
 800502c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4919      	ldr	r1, [pc, #100]	@ (800509c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3308      	adds	r3, #8
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800504a:	4b13      	ldr	r3, [pc, #76]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a11      	ldr	r2, [pc, #68]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005052:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005054:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b7f      	cmp	r3, #127	@ 0x7f
 800505a:	d812      	bhi.n	8005082 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	3301      	adds	r3, #1
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d9b9      	bls.n	8004fdc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	3301      	adds	r3, #1
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	2b0f      	cmp	r3, #15
 8005072:	d9a2      	bls.n	8004fba <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	3301      	adds	r3, #1
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d999      	bls.n	8004fb4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8005080:	e000      	b.n	8005084 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8005082:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005084:	373c      	adds	r7, #60	@ 0x3c
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	3b9aca00 	.word	0x3b9aca00
 8005094:	08007a54 	.word	0x08007a54
 8005098:	20000b10 	.word	0x20000b10
 800509c:	20000110 	.word	0x20000110

080050a0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b093      	sub	sp, #76	@ 0x4c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	085a      	lsrs	r2, r3, #1
 80050b4:	4b7a      	ldr	r3, [pc, #488]	@ (80052a0 <I2C_Compute_SCLL_SCLH+0x200>)
 80050b6:	4413      	add	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80050be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80050c0:	4a78      	ldr	r2, [pc, #480]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	212c      	movs	r1, #44	@ 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	085a      	lsrs	r2, r3, #1
 80050d0:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <I2C_Compute_SCLL_SCLH+0x200>)
 80050d2:	4413      	add	r3, r2
 80050d4:	4973      	ldr	r1, [pc, #460]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	202c      	movs	r0, #44	@ 0x2c
 80050da:	fb00 f202 	mul.w	r2, r0, r2
 80050de:	440a      	add	r2, r1
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 80050e8:	2332      	movs	r3, #50	@ 0x32
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80050ec:	4a6d      	ldr	r2, [pc, #436]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	212c      	movs	r1, #44	@ 0x2c
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	3328      	adds	r3, #40	@ 0x28
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005104:	4a67      	ldr	r2, [pc, #412]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	212c      	movs	r1, #44	@ 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3304      	adds	r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a62      	ldr	r2, [pc, #392]	@ (80052a0 <I2C_Compute_SCLL_SCLH+0x200>)
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800511c:	4a61      	ldr	r2, [pc, #388]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	212c      	movs	r1, #44	@ 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3308      	adds	r3, #8
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a5c      	ldr	r2, [pc, #368]	@ (80052a0 <I2C_Compute_SCLL_SCLH+0x200>)
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005138:	2300      	movs	r3, #0
 800513a:	637b      	str	r3, [r7, #52]	@ 0x34
 800513c:	e0a3      	b.n	8005286 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800513e:	495a      	ldr	r1, [pc, #360]	@ (80052a8 <I2C_Compute_SCLL_SCLH+0x208>)
 8005140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005158:	2300      	movs	r3, #0
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800515c:	e08c      	b.n	8005278 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800515e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	441a      	add	r2, r3
 8005164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005166:	3301      	adds	r3, #1
 8005168:	6979      	ldr	r1, [r7, #20]
 800516a:	fb03 f101 	mul.w	r1, r3, r1
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	440b      	add	r3, r1
 8005174:	4413      	add	r3, r2
 8005176:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005178:	4a4a      	ldr	r2, [pc, #296]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	212c      	movs	r1, #44	@ 0x2c
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3318      	adds	r3, #24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	429a      	cmp	r2, r3
 800518c:	d971      	bls.n	8005272 <I2C_Compute_SCLL_SCLH+0x1d2>
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d268      	bcs.n	8005272 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a4:	e062      	b.n	800526c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	441a      	add	r2, r3
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	3301      	adds	r3, #1
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	fb03 f101 	mul.w	r1, r3, r1
 80051b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	441a      	add	r2, r3
 80051c6:	4937      	ldr	r1, [pc, #220]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	202c      	movs	r0, #44	@ 0x2c
 80051cc:	fb00 f303 	mul.w	r3, r0, r3
 80051d0:	440b      	add	r3, r1
 80051d2:	3320      	adds	r3, #32
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	441a      	add	r2, r3
 80051d8:	4932      	ldr	r1, [pc, #200]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	202c      	movs	r0, #44	@ 0x2c
 80051de:	fb00 f303 	mul.w	r3, r0, r3
 80051e2:	440b      	add	r3, r1
 80051e4:	3324      	adds	r3, #36	@ 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d338      	bcc.n	8005266 <I2C_Compute_SCLL_SCLH+0x1c6>
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d834      	bhi.n	8005266 <I2C_Compute_SCLL_SCLH+0x1c6>
 80051fc:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <I2C_Compute_SCLL_SCLH+0x204>)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	212c      	movs	r1, #44	@ 0x2c
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	331c      	adds	r3, #28
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	d329      	bcc.n	8005266 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d225      	bcs.n	8005266 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	2b00      	cmp	r3, #0
 8005226:	da02      	bge.n	800522e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	425b      	negs	r3, r3
 800522c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005232:	429a      	cmp	r2, r3
 8005234:	d917      	bls.n	8005266 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800523a:	491b      	ldr	r1, [pc, #108]	@ (80052a8 <I2C_Compute_SCLL_SCLH+0x208>)
 800523c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3310      	adds	r3, #16
 800524a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800524c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800524e:	4916      	ldr	r1, [pc, #88]	@ (80052a8 <I2C_Compute_SCLL_SCLH+0x208>)
 8005250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	330c      	adds	r3, #12
 800525e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005260:	601a      	str	r2, [r3, #0]
              ret = count;
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	3301      	adds	r3, #1
 800526a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800526c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526e:	2bff      	cmp	r3, #255	@ 0xff
 8005270:	d999      	bls.n	80051a6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005274:	3301      	adds	r3, #1
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527a:	2bff      	cmp	r3, #255	@ 0xff
 800527c:	f67f af6f 	bls.w	800515e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	3301      	adds	r3, #1
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <I2C_Compute_SCLL_SCLH+0x20c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800528c:	429a      	cmp	r2, r3
 800528e:	f4ff af56 	bcc.w	800513e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005294:	4618      	mov	r0, r3
 8005296:	374c      	adds	r7, #76	@ 0x4c
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	3b9aca00 	.word	0x3b9aca00
 80052a4:	08007a54 	.word	0x08007a54
 80052a8:	20000110 	.word	0x20000110
 80052ac:	20000b10 	.word	0x20000b10

080052b0 <TicTacToe_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT, LCD_ORIENTATION_LANDSCAPE,
  *                     LCD_ORIENTATION_PORTRAIT_ROT180 or LCD_ORIENTATION_LANDSCAPE_ROT180.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <TicTacToe_LCD_Init+0x1a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d903      	bls.n	80052d2 <TicTacToe_LCD_Init+0x22>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 80052ca:	f06f 0301 	mvn.w	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e00a      	b.n	80052e8 <TicTacToe_LCD_Init+0x38>
  }
  else
  {
    /* Power up LCD */
    ST7789H2_PowerUp();
 80052d2:	f000 faeb 	bl	80058ac <ST7789H2_PowerUp>

    /* Probe the LCD driver */
    if (ST7789H2_Probe(Orientation) != TicTacToe_ERROR_NONE)
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f000 fa70 	bl	80057bc <ST7789H2_Probe>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <TicTacToe_LCD_Init+0x38>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 80052e2:	f06f 0304 	mvn.w	r3, #4
 80052e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <TicTacToe_LCD_DisplayOn>:
  * @brief  Set the display on.
  * @param  Instance LCD Instance.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_DisplayOn(uint32_t Instance)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  int32_t status = TicTacToe_ERROR_NONE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <TicTacToe_LCD_DisplayOn+0x1a>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005306:	f06f 0301 	mvn.w	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e010      	b.n	8005330 <TicTacToe_LCD_DisplayOn+0x3c>
  }
  else
  {
    /* Set the display on */
    if (Lcd_Drv[Instance]->DisplayOn(Lcd_CompObj[Instance]) < 0)
 800530e:	4a0b      	ldr	r2, [pc, #44]	@ (800533c <TicTacToe_LCD_DisplayOn+0x48>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4909      	ldr	r1, [pc, #36]	@ (8005340 <TicTacToe_LCD_DisplayOn+0x4c>)
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005320:	4610      	mov	r0, r2
 8005322:	4798      	blx	r3
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	da02      	bge.n	8005330 <TicTacToe_LCD_DisplayOn+0x3c>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 800532a:	f06f 0304 	mvn.w	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000bc4 	.word	0x20000bc4
 8005340:	20000bc0 	.word	0x20000bc0

08005344 <TicTacToe_LCD_GetXSize>:
  * @param  Instance LCD Instance.
  * @param  Xsize LCD X size.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_GetXSize(uint32_t Instance, uint32_t *Xsize)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Xsize == NULL))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <TicTacToe_LCD_GetXSize+0x1a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <TicTacToe_LCD_GetXSize+0x22>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 800535e:	f06f 0301 	mvn.w	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e011      	b.n	800538a <TicTacToe_LCD_GetXSize+0x46>
  }
  else
  {
    /* Get the display Xsize */
    if (Lcd_Drv[Instance]->GetXSize(Lcd_CompObj[Instance], Xsize) < 0)
 8005366:	4a0b      	ldr	r2, [pc, #44]	@ (8005394 <TicTacToe_LCD_GetXSize+0x50>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005370:	4909      	ldr	r1, [pc, #36]	@ (8005398 <TicTacToe_LCD_GetXSize+0x54>)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	da02      	bge.n	800538a <TicTacToe_LCD_GetXSize+0x46>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005384:	f06f 0304 	mvn.w	r3, #4
 8005388:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000bc4 	.word	0x20000bc4
 8005398:	20000bc0 	.word	0x20000bc0

0800539c <TicTacToe_LCD_GetYSize>:
  * @param  Instance LCD Instance.
  * @param  Ysize LCD Y size.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_GetYSize(uint32_t Instance, uint32_t *Ysize)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR) || (Ysize == NULL))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <TicTacToe_LCD_GetYSize+0x1a>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <TicTacToe_LCD_GetYSize+0x22>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 80053b6:	f06f 0301 	mvn.w	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e011      	b.n	80053e2 <TicTacToe_LCD_GetYSize+0x46>
  }
  else
  {
    /* Get the display Ysize */
    if (Lcd_Drv[Instance]->GetYSize(Lcd_CompObj[Instance], Ysize) < 0)
 80053be:	4a0b      	ldr	r2, [pc, #44]	@ (80053ec <TicTacToe_LCD_GetYSize+0x50>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c8:	4909      	ldr	r1, [pc, #36]	@ (80053f0 <TicTacToe_LCD_GetYSize+0x54>)
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	4610      	mov	r0, r2
 80053d4:	4798      	blx	r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da02      	bge.n	80053e2 <TicTacToe_LCD_GetYSize+0x46>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 80053dc:	f06f 0304 	mvn.w	r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000bc4 	.word	0x20000bc4
 80053f0:	20000bc0 	.word	0x20000bc0

080053f4 <TicTacToe_LCD_SetActiveLayer>:
  * @param  Instance LCD Instance.
  * @param  LayerIndex Active layer index.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <TicTacToe_LCD_SetActiveLayer+0x1a>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005408:	f06f 0301 	mvn.w	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
    UNUSED(LayerIndex);
  }

  return status;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TicTacToe_LCD_DrawBitmap>:
  * @param  Ypos Y position.
  * @param  pBmp Pointer to bitmap.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <TicTacToe_LCD_DrawBitmap+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005434:	f06f 0301 	mvn.w	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e012      	b.n	8005462 <TicTacToe_LCD_DrawBitmap+0x46>
  }
  else
  {
    /* Draw the bitmap on LCD */
    if (Lcd_Drv[Instance]->DrawBitmap(Lcd_CompObj[Instance], Xpos, Ypos, pBmp) < 0)
 800543c:	4a0b      	ldr	r2, [pc, #44]	@ (800546c <TicTacToe_LCD_DrawBitmap+0x50>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005446:	4a0a      	ldr	r2, [pc, #40]	@ (8005470 <TicTacToe_LCD_DrawBitmap+0x54>)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	47a0      	blx	r4
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	da02      	bge.n	8005462 <TicTacToe_LCD_DrawBitmap+0x46>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 800545c:	f06f 0304 	mvn.w	r3, #4
 8005460:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005462:	697b      	ldr	r3, [r7, #20]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}
 800546c:	20000bc4 	.word	0x20000bc4
 8005470:	20000bc0 	.word	0x20000bc0

08005474 <TicTacToe_LCD_FillRGBRect>:
  * @param  Width Width of the rectangle.
  * @param  Height Height of the rectangle.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005474:	b590      	push	{r4, r7, lr}
 8005476:	b089      	sub	sp, #36	@ 0x24
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <TicTacToe_LCD_FillRGBRect+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 800548c:	f06f 0301 	mvn.w	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e016      	b.n	80054c2 <TicTacToe_LCD_FillRGBRect+0x4e>
  }
  else
  {
    /* Fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRGBRect(Lcd_CompObj[Instance], Xpos, Ypos, pData, Width, Height) < 0)
 8005494:	4a0d      	ldr	r2, [pc, #52]	@ (80054cc <TicTacToe_LCD_FillRGBRect+0x58>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800549e:	4a0c      	ldr	r2, [pc, #48]	@ (80054d0 <TicTacToe_LCD_FillRGBRect+0x5c>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	47a0      	blx	r4
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	da02      	bge.n	80054c2 <TicTacToe_LCD_FillRGBRect+0x4e>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 80054bc:	f06f 0304 	mvn.w	r3, #4
 80054c0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;  
 80054c2:	697b      	ldr	r3, [r7, #20]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	20000bc4 	.word	0x20000bc4
 80054d0:	20000bc0 	.word	0x20000bc0

080054d4 <TicTacToe_LCD_DrawHLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b089      	sub	sp, #36	@ 0x24
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <TicTacToe_LCD_DrawHLine+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 80054ec:	f06f 0301 	mvn.w	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e014      	b.n	800551e <TicTacToe_LCD_DrawHLine+0x4a>
  }
  else
  {
    /* Draw the horizontal line on LCD */
    if (Lcd_Drv[Instance]->DrawHLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 80054f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005528 <TicTacToe_LCD_DrawHLine+0x54>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80054fe:	4a0b      	ldr	r2, [pc, #44]	@ (800552c <TicTacToe_LCD_DrawHLine+0x58>)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	47a0      	blx	r4
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	da02      	bge.n	800551e <TicTacToe_LCD_DrawHLine+0x4a>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005518:	f06f 0304 	mvn.w	r3, #4
 800551c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800551e:	697b      	ldr	r3, [r7, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	20000bc4 	.word	0x20000bc4
 800552c:	20000bc0 	.word	0x20000bc0

08005530 <TicTacToe_LCD_DrawVLine>:
  * @param  Length Length of the line.
  * @param  Color Color of the line.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b089      	sub	sp, #36	@ 0x24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <TicTacToe_LCD_DrawVLine+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005548:	f06f 0301 	mvn.w	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e014      	b.n	800557a <TicTacToe_LCD_DrawVLine+0x4a>
  }
  else
  {
    /* Draw the vertical line on LCD */
    if (Lcd_Drv[Instance]->DrawVLine(Lcd_CompObj[Instance], Xpos, Ypos, Length, Color) < 0)
 8005550:	4a0c      	ldr	r2, [pc, #48]	@ (8005584 <TicTacToe_LCD_DrawVLine+0x54>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800555a:	4a0b      	ldr	r2, [pc, #44]	@ (8005588 <TicTacToe_LCD_DrawVLine+0x58>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	47a0      	blx	r4
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	da02      	bge.n	800557a <TicTacToe_LCD_DrawVLine+0x4a>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005574:	f06f 0304 	mvn.w	r3, #4
 8005578:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800557a:	697b      	ldr	r3, [r7, #20]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd90      	pop	{r4, r7, pc}
 8005584:	20000bc4 	.word	0x20000bc4
 8005588:	20000bc0 	.word	0x20000bc0

0800558c <TicTacToe_LCD_FillRect>:
  * @param  Height Height of the rectangle.
  * @param  Color Color of the rectangle.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b089      	sub	sp, #36	@ 0x24
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <TicTacToe_LCD_FillRect+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 80055a4:	f06f 0301 	mvn.w	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e016      	b.n	80055da <TicTacToe_LCD_FillRect+0x4e>
  }
  else
  {
    /* Draw an fill rectangle on LCD */
    if (Lcd_Drv[Instance]->FillRect(Lcd_CompObj[Instance], Xpos, Ypos, Width, Height, Color) < 0)
 80055ac:	4a0d      	ldr	r2, [pc, #52]	@ (80055e4 <TicTacToe_LCD_FillRect+0x58>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b4:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80055b6:	4a0c      	ldr	r2, [pc, #48]	@ (80055e8 <TicTacToe_LCD_FillRect+0x5c>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	47a0      	blx	r4
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da02      	bge.n	80055da <TicTacToe_LCD_FillRect+0x4e>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 80055d4:	f06f 0304 	mvn.w	r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80055da:	697b      	ldr	r3, [r7, #20]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd90      	pop	{r4, r7, pc}
 80055e4:	20000bc4 	.word	0x20000bc4
 80055e8:	20000bc0 	.word	0x20000bc0

080055ec <TicTacToe_LCD_ReadPixel>:
  * @param  Ypos Y position.
  * @param  Color Pointer to the pixel.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <TicTacToe_LCD_ReadPixel+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005604:	f06f 0301 	mvn.w	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e012      	b.n	8005632 <TicTacToe_LCD_ReadPixel+0x46>
  }
  else
  {
    /* Read pixel on LCD */
    if (Lcd_Drv[Instance]->GetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 800560c:	4a0b      	ldr	r2, [pc, #44]	@ (800563c <TicTacToe_LCD_ReadPixel+0x50>)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8005616:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <TicTacToe_LCD_ReadPixel+0x54>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	47a0      	blx	r4
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	da02      	bge.n	8005632 <TicTacToe_LCD_ReadPixel+0x46>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 800562c:	f06f 0304 	mvn.w	r3, #4
 8005630:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8005632:	697b      	ldr	r3, [r7, #20]
}
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd90      	pop	{r4, r7, pc}
 800563c:	20000bc4 	.word	0x20000bc4
 8005640:	20000bc0 	.word	0x20000bc0

08005644 <TicTacToe_LCD_WritePixel>:
  * @param  Ypos Y position.
  * @param  Color Pixel.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8005644:	b590      	push	{r4, r7, lr}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

  if (Instance >= LCD_INSTANCES_NBR)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <TicTacToe_LCD_WritePixel+0x20>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 800565c:	f06f 0301 	mvn.w	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e012      	b.n	800568a <TicTacToe_LCD_WritePixel+0x46>
  }
  else
  {
    /* Write pixel on LCD */
    if (Lcd_Drv[Instance]->SetPixel(Lcd_CompObj[Instance], Xpos, Ypos, Color) < 0)
 8005664:	4a0b      	ldr	r2, [pc, #44]	@ (8005694 <TicTacToe_LCD_WritePixel+0x50>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800566e:	4a0a      	ldr	r2, [pc, #40]	@ (8005698 <TicTacToe_LCD_WritePixel+0x54>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	47a0      	blx	r4
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	da02      	bge.n	800568a <TicTacToe_LCD_WritePixel+0x46>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005684:	f06f 0304 	mvn.w	r3, #4
 8005688:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800568a:	697b      	ldr	r3, [r7, #20]
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}
 8005694:	20000bc4 	.word	0x20000bc4
 8005698:	20000bc0 	.word	0x20000bc0

0800569c <TicTacToe_LCD_GetFormat>:
  * @param  Instance LCD Instance.
  * @param  Format Pointer on pixel format.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_LCD_GetFormat(uint32_t Instance, uint32_t *Format)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  int32_t status = TicTacToe_ERROR_NONE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <TicTacToe_LCD_GetFormat+0x1c>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 80056b0:	f06f 0301 	mvn.w	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e002      	b.n	80056be <TicTacToe_LCD_GetFormat+0x22>
  }
  else
  {
    /* Get pixel format supported by LCD */
    *Format = LCD_PIXEL_FORMAT_RGB565;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2202      	movs	r2, #2
 80056bc:	601a      	str	r2, [r3, #0]
  }

  return status;  
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <MX_FMC_BANK1_Init>:
  * @brief  MX FMC BANK1 initialization.
  * @param  hSram SRAM handle.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_FMC_BANK1_Init(SRAM_HandleTypeDef *hSram)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  static FMC_NORSRAM_TimingTypeDef  SramTiming = {0};
  static FMC_NORSRAM_TimingTypeDef  ExtendedTiming = {0};

  /* SRAM device configuration */
  hSram->Init.DataAddressMux         = FMC_DATA_ADDRESS_MUX_DISABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
  hSram->Init.MemoryType             = FMC_MEMORY_TYPE_SRAM;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]
  hSram->Init.MemoryDataWidth        = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2210      	movs	r2, #16
 80056e4:	615a      	str	r2, [r3, #20]
  hSram->Init.BurstAccessMode        = FMC_BURST_ACCESS_MODE_DISABLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
  hSram->Init.WaitSignalPolarity     = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
  hSram->Init.WaitSignalActive       = FMC_WAIT_TIMING_BEFORE_WS;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
  hSram->Init.WriteOperation         = FMC_WRITE_OPERATION_ENABLE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hSram->Init.WaitSignal             = FMC_WAIT_SIGNAL_DISABLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	@ 0x28
  hSram->Init.ExtendedMode           = FMC_EXTENDED_MODE_DISABLE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hSram->Init.AsynchronousWait       = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
  hSram->Init.WriteBurst             = FMC_WRITE_BURST_DISABLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34
  hSram->Init.ContinuousClock        = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38
  hSram->Init.WriteFifo              = FMC_WRITE_FIFO_DISABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005724:	63da      	str	r2, [r3, #60]	@ 0x3c
  hSram->Init.PageSize               = FMC_PAGE_SIZE_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
  hSram->Init.NBLSetupTime           = FMC_NBL_SETUPTIME_0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
  hSram->Init.MaxChipSelectPulse     = DISABLE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  hSram->Init.MaxChipSelectPulseTime = 1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	64da      	str	r2, [r3, #76]	@ 0x4c

  SramTiming.AddressSetupTime      = 1;
 8005740:	4b1c      	ldr	r3, [pc, #112]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
  SramTiming.AddressHoldTime       = 1;
 8005746:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005748:	2201      	movs	r2, #1
 800574a:	605a      	str	r2, [r3, #4]
  SramTiming.DataSetupTime         = 32;
 800574c:	4b19      	ldr	r3, [pc, #100]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 800574e:	2220      	movs	r2, #32
 8005750:	609a      	str	r2, [r3, #8]
  SramTiming.DataHoldTime          = 0;
 8005752:	4b18      	ldr	r3, [pc, #96]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005754:	2200      	movs	r2, #0
 8005756:	60da      	str	r2, [r3, #12]
  SramTiming.BusTurnAroundDuration = 0;
 8005758:	4b16      	ldr	r3, [pc, #88]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
  SramTiming.CLKDivision           = 2;
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005760:	2202      	movs	r2, #2
 8005762:	615a      	str	r2, [r3, #20]
  SramTiming.DataLatency           = 2;
 8005764:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005766:	2202      	movs	r2, #2
 8005768:	619a      	str	r2, [r3, #24]
  SramTiming.AccessMode            = FMC_ACCESS_MODE_A;
 800576a:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 800576c:	2200      	movs	r2, #0
 800576e:	61da      	str	r2, [r3, #28]

  ExtendedTiming.AddressSetupTime      = 5;
 8005770:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 8005772:	2205      	movs	r2, #5
 8005774:	601a      	str	r2, [r3, #0]
  ExtendedTiming.AddressHoldTime       = 1;
 8005776:	4b10      	ldr	r3, [pc, #64]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 8005778:	2201      	movs	r2, #1
 800577a:	605a      	str	r2, [r3, #4]
  ExtendedTiming.DataSetupTime         = 3;
 800577c:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 800577e:	2203      	movs	r2, #3
 8005780:	609a      	str	r2, [r3, #8]
  ExtendedTiming.BusTurnAroundDuration = 2;
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 8005784:	2202      	movs	r2, #2
 8005786:	611a      	str	r2, [r3, #16]
  ExtendedTiming.CLKDivision           = SramTiming.CLKDivision;
 8005788:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 800578e:	6153      	str	r3, [r2, #20]
  ExtendedTiming.DataLatency           = SramTiming.DataLatency;
 8005790:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4a08      	ldr	r2, [pc, #32]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 8005796:	6193      	str	r3, [r2, #24]
  ExtendedTiming.AccessMode            = SramTiming.AccessMode;
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	4a06      	ldr	r2, [pc, #24]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 800579e:	61d3      	str	r3, [r2, #28]

  return HAL_SRAM_Init(hSram, &SramTiming, &ExtendedTiming);
 80057a0:	4a05      	ldr	r2, [pc, #20]	@ (80057b8 <MX_FMC_BANK1_Init+0xec>)
 80057a2:	4904      	ldr	r1, [pc, #16]	@ (80057b4 <MX_FMC_BANK1_Init+0xe8>)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fd f9d9 	bl	8002b5c <HAL_SRAM_Init>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000bc8 	.word	0x20000bc8
 80057b8:	20000be8 	.word	0x20000be8

080057bc <ST7789H2_Probe>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT, LCD_ORIENTATION_LANDSCAPE,
  *                     LCD_ORIENTATION_PORTRAIT_ROT180 or LCD_ORIENTATION_LANDSCAPE_ROT180.
  * @retval TicTacToe status.
  */
static int32_t ST7789H2_Probe(uint32_t Orientation)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	@ 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t                 st7789h2_id;
  static ST7789H2_Object_t ST7789H2Obj;
  uint32_t                 lcd_orientation;

  /* Configure the LCD driver */
  IOCtx.Address     = LCD_FMC_ADDRESS;
 80057c4:	2301      	movs	r3, #1
 80057c6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = LCD_FMC_Init;
 80057c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005884 <ST7789H2_Probe+0xc8>)
 80057ca:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = LCD_FMC_DeInit;
 80057cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005888 <ST7789H2_Probe+0xcc>)
 80057ce:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = LCD_FMC_ReadReg16;
 80057d0:	4b2e      	ldr	r3, [pc, #184]	@ (800588c <ST7789H2_Probe+0xd0>)
 80057d2:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = LCD_FMC_WriteReg16;
 80057d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005890 <ST7789H2_Probe+0xd4>)
 80057d6:	61bb      	str	r3, [r7, #24]
  IOCtx.SendData    = LCD_FMC_Send;
 80057d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005894 <ST7789H2_Probe+0xd8>)
 80057da:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = LCD_FMC_GetTick;
 80057dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005898 <ST7789H2_Probe+0xdc>)
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ST7789H2_RegisterBusIO(&ST7789H2Obj, &IOCtx) != ST7789H2_OK)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4619      	mov	r1, r3
 80057e6:	482d      	ldr	r0, [pc, #180]	@ (800589c <ST7789H2_Probe+0xe0>)
 80057e8:	f7fd ff24 	bl	8003634 <ST7789H2_RegisterBusIO>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <ST7789H2_Probe+0x3e>
  {
    status = TicTacToe_ERROR_BUS_FAILURE;
 80057f2:	f06f 0307 	mvn.w	r3, #7
 80057f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f8:	e03e      	b.n	8005878 <ST7789H2_Probe+0xbc>
  }
  else if (ST7789H2_ReadID(&ST7789H2Obj, &st7789h2_id) != ST7789H2_OK)
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	4826      	ldr	r0, [pc, #152]	@ (800589c <ST7789H2_Probe+0xe0>)
 8005802:	f7fe f9e6 	bl	8003bd2 <ST7789H2_ReadID>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <ST7789H2_Probe+0x58>
  {
    status = TicTacToe_ERROR_COMPONENT_FAILURE;
 800580c:	f06f 0304 	mvn.w	r3, #4
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005812:	e031      	b.n	8005878 <ST7789H2_Probe+0xbc>
  }
  else if (st7789h2_id != ST7789H2_ID)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b85      	cmp	r3, #133	@ 0x85
 8005818:	d003      	beq.n	8005822 <ST7789H2_Probe+0x66>
  {
    status = TicTacToe_ERROR_UNKNOWN_COMPONENT;
 800581a:	f06f 0306 	mvn.w	r3, #6
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005820:	e02a      	b.n	8005878 <ST7789H2_Probe+0xbc>
  }
  else
  {
    Lcd_CompObj[0] = &ST7789H2Obj;
 8005822:	4b1f      	ldr	r3, [pc, #124]	@ (80058a0 <ST7789H2_Probe+0xe4>)
 8005824:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <ST7789H2_Probe+0xe0>)
 8005826:	601a      	str	r2, [r3, #0]
    Lcd_Drv[0] = (LCD_Drv_t *) &ST7789H2_Driver;
 8005828:	4b1e      	ldr	r3, [pc, #120]	@ (80058a4 <ST7789H2_Probe+0xe8>)
 800582a:	4a1f      	ldr	r2, [pc, #124]	@ (80058a8 <ST7789H2_Probe+0xec>)
 800582c:	601a      	str	r2, [r3, #0]
    if (Orientation == LCD_ORIENTATION_PORTRAIT)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <ST7789H2_Probe+0x7e>
    {
      lcd_orientation = ST7789H2_ORIENTATION_PORTRAIT;
 8005834:	2300      	movs	r3, #0
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005838:	e00d      	b.n	8005856 <ST7789H2_Probe+0x9a>
    }
    else if (Orientation == LCD_ORIENTATION_LANDSCAPE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <ST7789H2_Probe+0x8a>
    {
      lcd_orientation = ST7789H2_ORIENTATION_LANDSCAPE;
 8005840:	2301      	movs	r3, #1
 8005842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005844:	e007      	b.n	8005856 <ST7789H2_Probe+0x9a>
    }
    else if (Orientation == LCD_ORIENTATION_PORTRAIT_ROT180)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d102      	bne.n	8005852 <ST7789H2_Probe+0x96>
    {
      lcd_orientation = ST7789H2_ORIENTATION_PORTRAIT_ROT180;
 800584c:	2302      	movs	r3, #2
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005850:	e001      	b.n	8005856 <ST7789H2_Probe+0x9a>
    }
    else
    {
      lcd_orientation = ST7789H2_ORIENTATION_LANDSCAPE_ROT180;
 8005852:	2303      	movs	r3, #3
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (Lcd_Drv[0]->Init(Lcd_CompObj[0], ST7789H2_FORMAT_RBG565, lcd_orientation) < 0)
 8005856:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <ST7789H2_Probe+0xe8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <ST7789H2_Probe+0xe4>)
 800585e:	6810      	ldr	r0, [r2, #0]
 8005860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005862:	2105      	movs	r1, #5
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	da03      	bge.n	8005874 <ST7789H2_Probe+0xb8>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 800586c:	f06f 0304 	mvn.w	r3, #4
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005872:	e001      	b.n	8005878 <ST7789H2_Probe+0xbc>
    }
    else
    {
      status = TicTacToe_ERROR_NONE;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800587a:	4618      	mov	r0, r3
 800587c:	3730      	adds	r7, #48	@ 0x30
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	080059a1 	.word	0x080059a1
 8005888:	080059f9 	.word	0x080059f9
 800588c:	08005aa9 	.word	0x08005aa9
 8005890:	08005a29 	.word	0x08005a29
 8005894:	08005b2d 	.word	0x08005b2d
 8005898:	08005b93 	.word	0x08005b93
 800589c:	20000c08 	.word	0x20000c08
 80058a0:	20000bc0 	.word	0x20000bc0
 80058a4:	20000bc4 	.word	0x20000bc4
 80058a8:	2000003c 	.word	0x2000003c

080058ac <ST7789H2_PowerUp>:
/**
  * @brief  Reset ST7789H2 and activate backlight.
  * @retval None.
  */
static void ST7789H2_PowerUp(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Initialize and configure the ST7789H2 power pin */
  LCD_POWER_GPIO_CLOCK_ENABLE();
 80058b2:	4b37      	ldr	r3, [pc, #220]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b6:	4a36      	ldr	r2, [pc, #216]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058be:	4b34      	ldr	r3, [pc, #208]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80058ca:	2301      	movs	r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d2:	2303      	movs	r3, #3
 80058d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin   = LCD_POWER_GPIO_PIN;
 80058d6:	2301      	movs	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_POWER_GPIO_PORT, &GPIO_InitStruct);
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	4619      	mov	r1, r3
 80058e0:	482c      	ldr	r0, [pc, #176]	@ (8005994 <ST7789H2_PowerUp+0xe8>)
 80058e2:	f7fb f805 	bl	80008f0 <HAL_GPIO_Init>

  /* Power on the ST7789H2 */
  HAL_GPIO_WritePin(LCD_POWER_GPIO_PORT, LCD_POWER_GPIO_PIN, GPIO_PIN_RESET);
 80058e6:	2200      	movs	r2, #0
 80058e8:	2101      	movs	r1, #1
 80058ea:	482a      	ldr	r0, [pc, #168]	@ (8005994 <ST7789H2_PowerUp+0xe8>)
 80058ec:	f7fb fa6e 	bl	8000dcc <HAL_GPIO_WritePin>

  /* Initialize and configure the ST7789H2 reset pin */
  LCD_RESET_GPIO_CLOCK_ENABLE();
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f4:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058f6:	f043 0320 	orr.w	r3, r3, #32
 80058fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058fc:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 80058fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005908:	2301      	movs	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005910:	2303      	movs	r3, #3
 8005912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin   = LCD_RESET_GPIO_PIN;
 8005914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005918:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &GPIO_InitStruct);
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	4619      	mov	r1, r3
 8005920:	481d      	ldr	r0, [pc, #116]	@ (8005998 <ST7789H2_PowerUp+0xec>)
 8005922:	f7fa ffe5 	bl	80008f0 <HAL_GPIO_Init>

  /* Reset the ST7789H2 */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_GPIO_PIN, GPIO_PIN_RESET);
 8005926:	2200      	movs	r2, #0
 8005928:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800592c:	481a      	ldr	r0, [pc, #104]	@ (8005998 <ST7789H2_PowerUp+0xec>)
 800592e:	f7fb fa4d 	bl	8000dcc <HAL_GPIO_WritePin>
  HAL_Delay(1); /* wait at least 10us according ST7789H2 datasheet */
 8005932:	2001      	movs	r0, #1
 8005934:	f7fa fdbc 	bl	80004b0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_GPIO_PIN, GPIO_PIN_SET);
 8005938:	2201      	movs	r2, #1
 800593a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800593e:	4816      	ldr	r0, [pc, #88]	@ (8005998 <ST7789H2_PowerUp+0xec>)
 8005940:	f7fb fa44 	bl	8000dcc <HAL_GPIO_WritePin>
  HAL_Delay(120); /* wait maximum 120ms according ST7789H2 datasheet */
 8005944:	2078      	movs	r0, #120	@ 0x78
 8005946:	f7fa fdb3 	bl	80004b0 <HAL_Delay>

  /* Initialize GPIO for backlight control and enable backlight */
  LCD_BACKLIGHT_GPIO_CLOCK_ENABLE();
 800594a:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	4a10      	ldr	r2, [pc, #64]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 8005950:	f043 0310 	orr.w	r3, r3, #16
 8005954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005956:	4b0e      	ldr	r3, [pc, #56]	@ (8005990 <ST7789H2_PowerUp+0xe4>)
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8005962:	2301      	movs	r3, #1
 8005964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800596a:	2303      	movs	r3, #3
 800596c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin       = LCD_BACKLIGHT_GPIO_PIN;
 800596e:	2302      	movs	r3, #2
 8005970:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_PORT, &GPIO_InitStruct);
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	4619      	mov	r1, r3
 8005978:	4808      	ldr	r0, [pc, #32]	@ (800599c <ST7789H2_PowerUp+0xf0>)
 800597a:	f7fa ffb9 	bl	80008f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_PORT, LCD_BACKLIGHT_GPIO_PIN, GPIO_PIN_SET);
 800597e:	2201      	movs	r2, #1
 8005980:	2102      	movs	r1, #2
 8005982:	4806      	ldr	r0, [pc, #24]	@ (800599c <ST7789H2_PowerUp+0xf0>)
 8005984:	f7fb fa22 	bl	8000dcc <HAL_GPIO_WritePin>
}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	42021c00 	.word	0x42021c00
 8005998:	42021400 	.word	0x42021400
 800599c:	42021000 	.word	0x42021000

080059a0 <LCD_FMC_Init>:
/**
  * @brief  Initialize FMC.
  * @retval TicTacToe status.
  */
static int32_t LCD_FMC_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
  int32_t status = TicTacToe_ERROR_NONE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]

  hlcd_sram[0].Instance    = FMC_NORSRAM_DEVICE;
 80059aa:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059ac:	4a10      	ldr	r2, [pc, #64]	@ (80059f0 <LCD_FMC_Init+0x50>)
 80059ae:	601a      	str	r2, [r3, #0]
  hlcd_sram[0].Extended    = FMC_NORSRAM_EXTENDED_DEVICE;
 80059b0:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059b2:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <LCD_FMC_Init+0x54>)
 80059b4:	605a      	str	r2, [r3, #4]
  hlcd_sram[0].Init.NSBank = FMC_NORSRAM_BANK1;
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]

  if (HAL_SRAM_GetState(&hlcd_sram[0]) == HAL_SRAM_STATE_RESET)
 80059bc:	480b      	ldr	r0, [pc, #44]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059be:	f7fd f946 	bl	8002c4e <HAL_SRAM_GetState>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <LCD_FMC_Init+0x40>
  {
#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
    /* Init the FMC Msp */
    FMC_MspInit(&hlcd_sram[0]);
 80059c8:	4808      	ldr	r0, [pc, #32]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059ca:	f000 f8ed 	bl	8005ba8 <FMC_MspInit>

    if (MX_FMC_BANK1_Init(&hlcd_sram[0]) != HAL_OK)
 80059ce:	4807      	ldr	r0, [pc, #28]	@ (80059ec <LCD_FMC_Init+0x4c>)
 80059d0:	f7ff fe7c 	bl	80056cc <MX_FMC_BANK1_Init>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <LCD_FMC_Init+0x40>
    {
      status = TicTacToe_ERROR_BUS_FAILURE;
 80059da:	f06f 0307 	mvn.w	r3, #7
 80059de:	607b      	str	r3, [r7, #4]
        status = TicTacToe_ERROR_BUS_FAILURE;
      }
    }
#endif
  }
  return status;
 80059e0:	687b      	ldr	r3, [r7, #4]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000b68 	.word	0x20000b68
 80059f0:	44020000 	.word	0x44020000
 80059f4:	44020104 	.word	0x44020104

080059f8 <LCD_FMC_DeInit>:
/**
  * @brief  DeInitialize TicTacToe FMC.
  * @retval TicTacToe status.
  */
static int32_t LCD_FMC_DeInit(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
  int32_t status = TicTacToe_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]

#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 0)
  FMC_MspDeInit(&hlcd_sram[0]);
 8005a02:	4808      	ldr	r0, [pc, #32]	@ (8005a24 <LCD_FMC_DeInit+0x2c>)
 8005a04:	f000 f944 	bl	8005c90 <FMC_MspDeInit>
#endif

  /* De-Init the FMC */
  if (HAL_SRAM_DeInit(&hlcd_sram[0]) != HAL_OK)
 8005a08:	4806      	ldr	r0, [pc, #24]	@ (8005a24 <LCD_FMC_DeInit+0x2c>)
 8005a0a:	f7fd f8ef 	bl	8002bec <HAL_SRAM_DeInit>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <LCD_FMC_DeInit+0x22>
  {
    status = TicTacToe_ERROR_PERIPH_FAILURE;
 8005a14:	f06f 0303 	mvn.w	r3, #3
 8005a18:	607b      	str	r3, [r7, #4]
  }

  return status;
 8005a1a:	687b      	ldr	r3, [r7, #4]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000b68 	.word	0x20000b68

08005a28 <LCD_FMC_WriteReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval TicTacToe status.
  */
static int32_t LCD_FMC_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60ba      	str	r2, [r7, #8]
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	4603      	mov	r3, r0
 8005a34:	81fb      	strh	r3, [r7, #14]
 8005a36:	460b      	mov	r3, r1
 8005a38:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = TicTacToe_ERROR_NONE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <LCD_FMC_WriteReg16+0x2c>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LCD_FMC_WriteReg16+0x2c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <LCD_FMC_WriteReg16+0x34>
  {
    ret = TicTacToe_ERROR_WRONG_PARAM;
 8005a54:	f06f 0301 	mvn.w	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e01c      	b.n	8005a96 <LCD_FMC_WriteReg16+0x6e>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 8005a5c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8005a60:	89bb      	ldrh	r3, [r7, #12]
 8005a62:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 8005a64:	e012      	b.n	8005a8c <LCD_FMC_WriteReg16+0x64>
    {
      /* Write register value */
      *(uint16_t *)LCD_DATA_ADDR = (((uint16_t)pData[i + 1U] << 8U) & 0xFF00U) | ((uint16_t)pData[i] & 0x00FFU);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	440a      	add	r2, r1
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4a09      	ldr	r2, [pc, #36]	@ (8005aa4 <LCD_FMC_WriteReg16+0x7c>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
      /* Update data pointer */
      i += 2U;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	613b      	str	r3, [r7, #16]
    while (i < (2U * Length))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d3e7      	bcc.n	8005a66 <LCD_FMC_WriteReg16+0x3e>
    }
  }

  /* TicTacToe status */
  return ret;
 8005a96:	697b      	ldr	r3, [r7, #20]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	60000002 	.word	0x60000002

08005aa8 <LCD_FMC_ReadReg16>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval TicTacToe status.
  */
static int32_t LCD_FMC_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint32_t Length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	@ 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60ba      	str	r2, [r7, #8]
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	81fb      	strh	r3, [r7, #14]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	81bb      	strh	r3, [r7, #12]
  int32_t  ret = TicTacToe_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t i = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]
  uint16_t tmp;

  if ((DevAddr != LCD_FMC_ADDRESS) || (pData == NULL) || (Length == 0U))
 8005ac2:	89fb      	ldrh	r3, [r7, #14]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <LCD_FMC_ReadReg16+0x2c>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <LCD_FMC_ReadReg16+0x2c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <LCD_FMC_ReadReg16+0x34>
  {
    ret = TicTacToe_ERROR_WRONG_PARAM;
 8005ad4:	f06f 0301 	mvn.w	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e01e      	b.n	8005b1a <LCD_FMC_ReadReg16+0x72>
  }
  else
  {
    /* Write register address */
    *(uint16_t *)LCD_REGISTER_ADDR = Reg;
 8005adc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8005ae0:	89bb      	ldrh	r3, [r7, #12]
 8005ae2:	8013      	strh	r3, [r2, #0]
    while (i < (2U * Length))
 8005ae4:	e014      	b.n	8005b10 <LCD_FMC_ReadReg16+0x68>
    {
      tmp = *(uint16_t *)LCD_DATA_ADDR;
 8005ae6:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <LCD_FMC_ReadReg16+0x80>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	82fb      	strh	r3, [r7, #22]
      pData[i]    = (uint8_t) tmp;
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	4413      	add	r3, r2
 8005af2:	8afa      	ldrh	r2, [r7, #22]
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
      pData[i + 1U] = (uint8_t)(tmp >> 8U);
 8005af8:	8afb      	ldrh	r3, [r7, #22]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	b299      	uxth	r1, r3
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	3301      	adds	r3, #1
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	b2ca      	uxtb	r2, r1
 8005b08:	701a      	strb	r2, [r3, #0]
      /* Update data pointer */
      i += 2U;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
    while (i < (2U * Length))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e5      	bcc.n	8005ae6 <LCD_FMC_ReadReg16+0x3e>
    }
  }

  /* TicTacToe status */
  return ret;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	@ 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	60000002 	.word	0x60000002

08005b2c <LCD_FMC_Send>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval TicTacToe status.
  */
static int32_t LCD_FMC_Send(uint8_t *pData, uint32_t Length)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  int32_t  ret = TicTacToe_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t i = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]

  if ((pData == NULL) || (Length == 0U))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <LCD_FMC_Send+0x1e>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d117      	bne.n	8005b7a <LCD_FMC_Send+0x4e>
  {
    ret = TicTacToe_ERROR_WRONG_PARAM;
 8005b4a:	f06f 0301 	mvn.w	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e018      	b.n	8005b84 <LCD_FMC_Send+0x58>
  else
  {
    while (i < (2U * Length))
    {
      /* Send value */
      *(uint16_t *)LCD_REGISTER_ADDR = (((uint16_t)pData[i + 1U] << 8U) & 0xFF00U) | ((uint16_t)pData[i] & 0x00FFU);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	3301      	adds	r3, #1
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	440a      	add	r2, r1
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	8013      	strh	r3, [r2, #0]
      /* Update data pointer */
      i += 2U;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	3302      	adds	r3, #2
 8005b78:	60bb      	str	r3, [r7, #8]
    while (i < (2U * Length))
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3e6      	bcc.n	8005b52 <LCD_FMC_Send+0x26>
    }
  }

  /* TicTacToe status */
  return ret;
 8005b84:	68fb      	ldr	r3, [r7, #12]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <LCD_FMC_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval Tick value.
  */
static int32_t LCD_FMC_GetTick(void)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8005b98:	f7fa fc7e 	bl	8000498 <HAL_GetTick>
 8005b9c:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 8005b9e:	687b      	ldr	r3, [r7, #4]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <FMC_MspInit>:
  * @brief  Initializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void  FMC_MspInit(SRAM_HandleTypeDef *hSram)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	@ 0x30
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hSram);

  /*** Configure the GPIOs ***/

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005bb0:	4b33      	ldr	r3, [pc, #204]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb4:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bbc:	4b30      	ldr	r3, [pc, #192]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bce:	f043 0308 	orr.w	r3, r3, #8
 8005bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be4:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005be6:	f043 0310 	orr.w	r3, r3, #16
 8005bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bec:	4b24      	ldr	r3, [pc, #144]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005bf8:	4b21      	ldr	r3, [pc, #132]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfc:	4a20      	ldr	r2, [pc, #128]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005bfe:	f043 0320 	orr.w	r3, r3, #32
 8005c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c04:	4b1e      	ldr	r3, [pc, #120]	@ (8005c80 <FMC_MspInit+0xd8>)
 8005c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c10:	2302      	movs	r3, #2
 8005c12:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c14:	2303      	movs	r3, #3
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005c18:	230c      	movs	r3, #12
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /*## NE configuration #######*/
  /* NE1 : LCD */
  gpio_init_structure.Pin = GPIO_PIN_7;
 8005c20:	2380      	movs	r3, #128	@ 0x80
 8005c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c24:	f107 031c 	add.w	r3, r7, #28
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4816      	ldr	r0, [pc, #88]	@ (8005c84 <FMC_MspInit+0xdc>)
 8005c2c:	f7fa fe60 	bl	80008f0 <HAL_GPIO_Init>

  /*## NOE and NWE configuration #######*/
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8005c30:	2330      	movs	r3, #48	@ 0x30
 8005c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c34:	f107 031c 	add.w	r3, r7, #28
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4812      	ldr	r0, [pc, #72]	@ (8005c84 <FMC_MspInit+0xdc>)
 8005c3c:	f7fa fe58 	bl	80008f0 <HAL_GPIO_Init>

  /*## RS configuration #######*/
  gpio_init_structure.Pin = GPIO_PIN_0;
 8005c40:	2301      	movs	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005c44:	f107 031c 	add.w	r3, r7, #28
 8005c48:	4619      	mov	r1, r3
 8005c4a:	480f      	ldr	r0, [pc, #60]	@ (8005c88 <FMC_MspInit+0xe0>)
 8005c4c:	f7fa fe50 	bl	80008f0 <HAL_GPIO_Init>

  /*## Data Bus #######*/
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_8 | GPIO_PIN_9 | \
 8005c54:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005c58:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c5a:	f107 031c 	add.w	r3, r7, #28
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4808      	ldr	r0, [pc, #32]	@ (8005c84 <FMC_MspInit+0xdc>)
 8005c62:	f7fa fe45 	bl	80008f0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin = GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | \
 8005c66:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8005c6a:	61fb      	str	r3, [r7, #28]
                            GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | \
                            GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005c6c:	f107 031c 	add.w	r3, r7, #28
 8005c70:	4619      	mov	r1, r3
 8005c72:	4806      	ldr	r0, [pc, #24]	@ (8005c8c <FMC_MspInit+0xe4>)
 8005c74:	f7fa fe3c 	bl	80008f0 <HAL_GPIO_Init>
}
 8005c78:	bf00      	nop
 8005c7a:	3730      	adds	r7, #48	@ 0x30
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000
 8005c84:	42020c00 	.word	0x42020c00
 8005c88:	42021400 	.word	0x42021400
 8005c8c:	42021000 	.word	0x42021000

08005c90 <FMC_MspDeInit>:
  * @brief  DeInitializes FMC MSP.
  * @param  hSram : SRAM handler
  * @retval None
  */
static void FMC_MspDeInit(SRAM_HandleTypeDef *hSram)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSram);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  | \
 8005c98:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8005c9c:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | \
                              GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	480e      	ldr	r0, [pc, #56]	@ (8005cdc <FMC_MspDeInit+0x4c>)
 8005ca4:	f7fa ffa4 	bl	8000bf0 <HAL_GPIO_DeInit>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_7  | GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | \
 8005ca8:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8005cac:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | \
                              GPIO_PIN_15;
  \

  HAL_GPIO_DeInit(GPIOE, gpio_init_structure.Pin);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	480b      	ldr	r0, [pc, #44]	@ (8005ce0 <FMC_MspDeInit+0x50>)
 8005cb4:	f7fa ff9c 	bl	8000bf0 <HAL_GPIO_DeInit>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOF, gpio_init_structure.Pin);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4808      	ldr	r0, [pc, #32]	@ (8005ce4 <FMC_MspDeInit+0x54>)
 8005cc2:	f7fa ff95 	bl	8000bf0 <HAL_GPIO_DeInit>

  /* Disable FMC clock */
  __HAL_RCC_FMC_CLK_DISABLE();
 8005cc6:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <FMC_MspDeInit+0x58>)
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <FMC_MspDeInit+0x58>)
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8005cd2:	bf00      	nop
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	42020c00 	.word	0x42020c00
 8005ce0:	42021000 	.word	0x42021000
 8005ce4:	42021400 	.word	0x42021400
 8005ce8:	40021000 	.word	0x40021000

08005cec <TicTacToe_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08e      	sub	sp, #56	@ 0x38
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  int32_t               status = TicTacToe_ERROR_NONE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              TS_EXTI_LINE[TS_INSTANCES_NBR] = {EXTI_LINE_1};
 8005cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8005eac <TicTacToe_TS_Init+0x1c0>)
 8005cfc:	61fb      	str	r3, [r7, #28]
  TicTacToe_EXTI_LineCallback TsCallback[TS_INSTANCES_NBR]   = {TS_EXTI_Callback};
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb0 <TicTacToe_TS_Init+0x1c4>)
 8005d00:	61bb      	str	r3, [r7, #24]

  if (TS_Init == NULL)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <TicTacToe_TS_Init+0x24>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005d08:	f06f 0301 	mvn.w	r3, #1
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0e:	e0c8      	b.n	8005ea2 <TicTacToe_TS_Init+0x1b6>
  }
  else if ((Instance >= TS_INSTANCES_NBR) || (TS_Init->Orientation > TS_ORIENTATION_LANDSCAPE_ROT180))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <TicTacToe_TS_Init+0x32>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d903      	bls.n	8005d26 <TicTacToe_TS_Init+0x3a>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005d1e:	f06f 0301 	mvn.w	r3, #1
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d24:	e0bd      	b.n	8005ea2 <TicTacToe_TS_Init+0x1b6>
  }
  else
  {
    /* Probe the TS driver */
    if (FT6X06_Probe(Instance) != TicTacToe_ERROR_NONE)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa32 	bl	8006190 <FT6X06_Probe>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <TicTacToe_TS_Init+0x4e>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005d32:	f06f 0304 	mvn.w	r3, #4
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d38:	e0b3      	b.n	8005ea2 <TicTacToe_TS_Init+0x1b6>
    }
    else
    {
      TS_Capabilities_t Capabilities;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	495d      	ldr	r1, [pc, #372]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	015b      	lsls	r3, r3, #5
 8005d44:	440b      	add	r3, r1
 8005d46:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4959      	ldr	r1, [pc, #356]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	015b      	lsls	r3, r3, #5
 8005d52:	440b      	add	r3, r1
 8005d54:	3304      	adds	r3, #4
 8005d56:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	4955      	ldr	r1, [pc, #340]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	015b      	lsls	r3, r3, #5
 8005d62:	440b      	add	r3, r1
 8005d64:	3308      	adds	r3, #8
 8005d66:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	4951      	ldr	r1, [pc, #324]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	015b      	lsls	r3, r3, #5
 8005d72:	440b      	add	r3, r1
 8005d74:	330c      	adds	r3, #12
 8005d76:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005d78:	4a4f      	ldr	r2, [pc, #316]	@ (8005eb8 <TicTacToe_TS_Init+0x1cc>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	494e      	ldr	r1, [pc, #312]	@ (8005ebc <TicTacToe_TS_Init+0x1d0>)
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d8a:	f107 010c 	add.w	r1, r7, #12
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4798      	blx	r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	da03      	bge.n	8005da0 <TicTacToe_TS_Init+0xb4>
      {
        status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005d98:	f06f 0304 	mvn.w	r3, #4
 8005d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9e:	e080      	b.n	8005ea2 <TicTacToe_TS_Init+0x1b6>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4944      	ldr	r1, [pc, #272]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	015b      	lsls	r3, r3, #5
 8005da8:	440b      	add	r3, r1
 8005daa:	3310      	adds	r3, #16
 8005dac:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4940      	ldr	r1, [pc, #256]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	015b      	lsls	r3, r3, #5
 8005db6:	440b      	add	r3, r1
 8005db8:	3314      	adds	r3, #20
 8005dba:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        Ts_Ctx[Instance].PreviousX = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	493a      	ldr	r1, [pc, #232]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	015b      	lsls	r3, r3, #5
 8005dce:	440b      	add	r3, r1
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	4934      	ldr	r1, [pc, #208]	@ (8005eb4 <TicTacToe_TS_Init+0x1c8>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	015b      	lsls	r3, r3, #5
 8005de6:	440b      	add	r3, r1
 8005de8:	331c      	adds	r3, #28
 8005dea:	601a      	str	r2, [r3, #0]

        /* Configure TS interrupt GPIO */
        TS_IT_GPIO_CLOCK_ENABLE();
 8005dec:	4b34      	ldr	r3, [pc, #208]	@ (8005ec0 <TicTacToe_TS_Init+0x1d4>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df0:	4a33      	ldr	r2, [pc, #204]	@ (8005ec0 <TicTacToe_TS_Init+0x1d4>)
 8005df2:	f043 0320 	orr.w	r3, r3, #32
 8005df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df8:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <TicTacToe_TS_Init+0x1d4>)
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
        GPIO_Init.Pin   = TS_IT_GPIO_PIN;
 8005e04:	2302      	movs	r3, #2
 8005e06:	623b      	str	r3, [r7, #32]
        GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_Init.Mode  = GPIO_MODE_IT_FALLING;
 8005e0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_Init.Pull  = GPIO_PULLUP;
 8005e12:	2301      	movs	r3, #1
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
        HAL_GPIO_Init(TS_IT_GPIO_PORT, &GPIO_Init);
 8005e16:	f107 0320 	add.w	r3, r7, #32
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4829      	ldr	r0, [pc, #164]	@ (8005ec4 <TicTacToe_TS_Init+0x1d8>)
 8005e1e:	f7fa fd67 	bl	80008f0 <HAL_GPIO_Init>
        if (HAL_EXTI_GetHandle(&hts_exti[Instance], TS_EXTI_LINE[Instance]) == HAL_OK)
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4a26      	ldr	r2, [pc, #152]	@ (8005ec8 <TicTacToe_TS_Init+0x1dc>)
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	3338      	adds	r3, #56	@ 0x38
 8005e36:	443b      	add	r3, r7
 8005e38:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fa fc95 	bl	800076e <HAL_EXTI_GetHandle>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d117      	bne.n	8005e7a <TicTacToe_TS_Init+0x18e>
        {
          if (HAL_EXTI_RegisterCallback(&hts_exti[Instance], HAL_EXTI_FALLING_CB_ID, TsCallback[Instance]) != HAL_OK)
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <TicTacToe_TS_Init+0x1dc>)
 8005e56:	1898      	adds	r0, r3, r2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	3338      	adds	r3, #56	@ 0x38
 8005e5e:	443b      	add	r3, r7
 8005e60:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e64:	461a      	mov	r2, r3
 8005e66:	2102      	movs	r1, #2
 8005e68:	f7fa fc55 	bl	8000716 <HAL_EXTI_RegisterCallback>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <TicTacToe_TS_Init+0x194>
          {
            status = TicTacToe_ERROR_PERIPH_FAILURE;
 8005e72:	f06f 0303 	mvn.w	r3, #3
 8005e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e78:	e002      	b.n	8005e80 <TicTacToe_TS_Init+0x194>
          }
        }
        else
        {
          status = TicTacToe_ERROR_PERIPH_FAILURE;
 8005e7a:	f06f 0303 	mvn.w	r3, #3
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        /* Enable interrupt trigger mode on TS driver */
        if (Ts_Drv[Instance]->EnableIT(Ts_CompObj[Instance]) < 0)
 8005e80:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb8 <TicTacToe_TS_Init+0x1cc>)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	490c      	ldr	r1, [pc, #48]	@ (8005ebc <TicTacToe_TS_Init+0x1d0>)
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e92:	4610      	mov	r0, r2
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da02      	bge.n	8005ea2 <TicTacToe_TS_Init+0x1b6>
        {
          status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005e9c:	f06f 0304 	mvn.w	r3, #4
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
  }

  return status;
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3738      	adds	r7, #56	@ 0x38
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	06000001 	.word	0x06000001
 8005eb0:	0800625d 	.word	0x0800625d
 8005eb4:	20000c44 	.word	0x20000c44
 8005eb8:	20000c40 	.word	0x20000c40
 8005ebc:	20000c3c 	.word	0x20000c3c
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	42021400 	.word	0x42021400
 8005ec8:	20000c64 	.word	0x20000c64

08005ecc <TicTacToe_TS_EnableIT>:
  * @brief  Enable the TS interrupt.
  * @param  Instance TS Instance.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_TS_EnableIT(uint32_t Instance)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  int32_t               status = TicTacToe_ERROR_NONE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t              TS_IT_PRIO[TS_INSTANCES_NBR]     = {TicTacToe_TS_IT_PRIORITY};
 8005ed8:	2307      	movs	r3, #7
 8005eda:	60bb      	str	r3, [r7, #8]

  if (Instance >= TS_INSTANCES_NBR)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <TicTacToe_TS_EnableIT+0x1e>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005ee2:	f06f 0301 	mvn.w	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e019      	b.n	8005f1e <TicTacToe_TS_EnableIT+0x52>
  }
  else
  {
    /* Update polling mode status */
    TsPollingMode = DISABLE;
 8005eea:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <TicTacToe_TS_EnableIT+0x5c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]

    /* Activate TS interrupt */
    /* Enable and set TS EXTI interrupt to the lowest priority */
    HAL_NVIC_SetPriority(Ts_IRQn[Instance], TS_IT_PRIO[Instance], 0x00);
 8005ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8005f2c <TicTacToe_TS_EnableIT+0x60>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f993 0000 	ldrsb.w	r0, [r3]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	3310      	adds	r3, #16
 8005f00:	443b      	add	r3, r7
 8005f02:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f7fa fbd0 	bl	80006ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(Ts_IRQn[Instance]);
 8005f0e:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <TicTacToe_TS_EnableIT+0x60>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	f993 3000 	ldrsb.w	r3, [r3]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fa fbe2 	bl	80006e2 <HAL_NVIC_EnableIRQ>
  }

  return status;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	2000009d 	.word	0x2000009d
 8005f2c:	200000a0 	.word	0x200000a0

08005f30 <TicTacToe_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval TicTacToe status.
  */
int32_t TicTacToe_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  int32_t  status = TicTacToe_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t xDiff, yDiff;

  if ((Instance >= TS_INSTANCES_NBR) || (TS_State == NULL))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <TicTacToe_TS_GetState+0x1a>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <TicTacToe_TS_GetState+0x22>
  {
    status = TicTacToe_ERROR_WRONG_PARAM;
 8005f4a:	f06f 0301 	mvn.w	r3, #1
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f50:	e0fb      	b.n	800614a <TicTacToe_TS_GetState+0x21a>
  }
  else
  {
    FT6X06_State_t State;
    uint8_t        CallDriver = 1U;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /* In polling mode */
    if (TsPollingMode == ENABLE)
 8005f58:	4b7e      	ldr	r3, [pc, #504]	@ (8006154 <TicTacToe_TS_GetState+0x224>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11f      	bne.n	8005fa0 <TicTacToe_TS_GetState+0x70>
    {
      if (HAL_EXTI_GetPending(&hts_exti[Instance], EXTI_TRIGGER_FALLING) == 0x0U)
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8006158 <TicTacToe_TS_GetState+0x228>)
 8005f6c:	4413      	add	r3, r2
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa fc59 	bl	8000828 <HAL_EXTI_GetPending>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <TicTacToe_TS_GetState+0x5a>
      {
        /* No need to call driver, no new touch available */
        CallDriver = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TS_State->TouchDetected = 0U;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e00a      	b.n	8005fa0 <TicTacToe_TS_GetState+0x70>
      }
      else
      {
        /* New touch available, clear pending flag */
        HAL_EXTI_ClearPending(&hts_exti[Instance], EXTI_TRIGGER_FALLING);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a70      	ldr	r2, [pc, #448]	@ (8006158 <TicTacToe_TS_GetState+0x228>)
 8005f96:	4413      	add	r3, r2
 8005f98:	2102      	movs	r1, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa fc7a 	bl	8000894 <HAL_EXTI_ClearPending>
      }
    }

    if (CallDriver == 1U)
 8005fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	f040 80d0 	bne.w	800614a <TicTacToe_TS_GetState+0x21a>
    {
      /* Get the TS state */
      if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &State) < 0)
 8005faa:	4a6c      	ldr	r2, [pc, #432]	@ (800615c <TicTacToe_TS_GetState+0x22c>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	496a      	ldr	r1, [pc, #424]	@ (8006160 <TicTacToe_TS_GetState+0x230>)
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005fbc:	f107 010c 	add.w	r1, r7, #12
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da03      	bge.n	8005fd2 <TicTacToe_TS_GetState+0xa2>
      {
        status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8005fca:	f06f 0304 	mvn.w	r3, #4
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd0:	e0bb      	b.n	800614a <TicTacToe_TS_GetState+0x21a>
      }
      else
      {
        if (State.TouchDetected != 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b5 	beq.w	8006144 <TicTacToe_TS_GetState+0x214>
        {
          /* Compute the oriented touch X and Y */
          if (Ts_Ctx[Instance].Orientation == TS_ORIENTATION_LANDSCAPE)
 8005fda:	4a62      	ldr	r2, [pc, #392]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	015b      	lsls	r3, r3, #5
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d106      	bne.n	8005ff8 <TicTacToe_TS_GetState+0xc8>
          {
            TS_State->TouchX = State.TouchX;
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = State.TouchY;
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	609a      	str	r2, [r3, #8]
 8005ff6:	e03f      	b.n	8006078 <TicTacToe_TS_GetState+0x148>
          }
          else if (Ts_Ctx[Instance].Orientation == TS_ORIENTATION_PORTRAIT_ROT180)
 8005ff8:	4a5a      	ldr	r2, [pc, #360]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	015b      	lsls	r3, r3, #5
 8005ffe:	4413      	add	r3, r2
 8006000:	3308      	adds	r3, #8
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d10d      	bne.n	8006024 <TicTacToe_TS_GetState+0xf4>
          {
            TS_State->TouchX = Ts_Ctx[Instance].MaxY - State.TouchY;
 8006008:	4a56      	ldr	r2, [pc, #344]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	015b      	lsls	r3, r3, #5
 800600e:	4413      	add	r3, r2
 8006010:	3314      	adds	r3, #20
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = State.TouchX;
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	609a      	str	r2, [r3, #8]
 8006022:	e029      	b.n	8006078 <TicTacToe_TS_GetState+0x148>
          }
          else if (Ts_Ctx[Instance].Orientation == TS_ORIENTATION_LANDSCAPE_ROT180)
 8006024:	4a4f      	ldr	r2, [pc, #316]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	015b      	lsls	r3, r3, #5
 800602a:	4413      	add	r3, r2
 800602c:	3308      	adds	r3, #8
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d114      	bne.n	800605e <TicTacToe_TS_GetState+0x12e>
          {
            TS_State->TouchX = Ts_Ctx[Instance].MaxX - State.TouchX;
 8006034:	4a4b      	ldr	r2, [pc, #300]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	015b      	lsls	r3, r3, #5
 800603a:	4413      	add	r3, r2
 800603c:	3310      	adds	r3, #16
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].MaxY - State.TouchY;
 8006048:	4a46      	ldr	r2, [pc, #280]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	015b      	lsls	r3, r3, #5
 800604e:	4413      	add	r3, r2
 8006050:	3314      	adds	r3, #20
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e00c      	b.n	8006078 <TicTacToe_TS_GetState+0x148>
          }
          else /* PORTRAIT */
          {
            TS_State->TouchX = State.TouchY;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].MaxX - State.TouchX;
 8006064:	4a3f      	ldr	r2, [pc, #252]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	015b      	lsls	r3, r3, #5
 800606a:	4413      	add	r3, r2
 800606c:	3310      	adds	r3, #16
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	609a      	str	r2, [r3, #8]
          }
          /* Check accuracy */
          xDiff = (TS_State->TouchX >= Ts_Ctx[Instance].PreviousX) ?
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	4939      	ldr	r1, [pc, #228]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	015b      	lsls	r3, r3, #5
 8006082:	440b      	add	r3, r1
 8006084:	3318      	adds	r3, #24
 8006086:	681b      	ldr	r3, [r3, #0]
            (TS_State->TouchX - Ts_Ctx[Instance].PreviousX) :
 8006088:	429a      	cmp	r2, r3
 800608a:	d309      	bcc.n	80060a0 <TicTacToe_TS_GetState+0x170>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4934      	ldr	r1, [pc, #208]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	015b      	lsls	r3, r3, #5
 8006096:	440b      	add	r3, r1
 8006098:	3318      	adds	r3, #24
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	e008      	b.n	80060b2 <TicTacToe_TS_GetState+0x182>
            (Ts_Ctx[Instance].PreviousX - TS_State->TouchX);
 80060a0:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	015b      	lsls	r3, r3, #5
 80060a6:	4413      	add	r3, r2
 80060a8:	3318      	adds	r3, #24
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
            (TS_State->TouchX - Ts_Ctx[Instance].PreviousX) :
 80060b0:	1ad3      	subs	r3, r2, r3
          xDiff = (TS_State->TouchX >= Ts_Ctx[Instance].PreviousX) ?
 80060b2:	61fb      	str	r3, [r7, #28]
            yDiff = (TS_State->TouchY >= Ts_Ctx[Instance].PreviousY) ?
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	492a      	ldr	r1, [pc, #168]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	015b      	lsls	r3, r3, #5
 80060be:	440b      	add	r3, r1
 80060c0:	331c      	adds	r3, #28
 80060c2:	681b      	ldr	r3, [r3, #0]
              (TS_State->TouchY - Ts_Ctx[Instance].PreviousY) :
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d309      	bcc.n	80060dc <TicTacToe_TS_GetState+0x1ac>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	4925      	ldr	r1, [pc, #148]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	015b      	lsls	r3, r3, #5
 80060d2:	440b      	add	r3, r1
 80060d4:	331c      	adds	r3, #28
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	e008      	b.n	80060ee <TicTacToe_TS_GetState+0x1be>
              (Ts_Ctx[Instance].PreviousY - TS_State->TouchY);
 80060dc:	4a21      	ldr	r2, [pc, #132]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	015b      	lsls	r3, r3, #5
 80060e2:	4413      	add	r3, r2
 80060e4:	331c      	adds	r3, #28
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
              (TS_State->TouchY - Ts_Ctx[Instance].PreviousY) :
 80060ec:	1ad3      	subs	r3, r2, r3
            yDiff = (TS_State->TouchY >= Ts_Ctx[Instance].PreviousY) ?
 80060ee:	61bb      	str	r3, [r7, #24]
              if ((xDiff <= Ts_Ctx[Instance].Accuracy) && (yDiff <= Ts_Ctx[Instance].Accuracy))
 80060f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	4413      	add	r3, r2
 80060f8:	330c      	adds	r3, #12
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d80c      	bhi.n	800611c <TicTacToe_TS_GetState+0x1ec>
 8006102:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	015b      	lsls	r3, r3, #5
 8006108:	4413      	add	r3, r2
 800610a:	330c      	adds	r3, #12
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d803      	bhi.n	800611c <TicTacToe_TS_GetState+0x1ec>
              {
                /* Touch not detected */
                TS_State->TouchDetected = 0U;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e016      	b.n	800614a <TicTacToe_TS_GetState+0x21a>
              }
              else
              {
                /* New touch detected */
                TS_State->TouchDetected = 1U;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]
                Ts_Ctx[Instance].PreviousX = TS_State->TouchX;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	490f      	ldr	r1, [pc, #60]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	015b      	lsls	r3, r3, #5
 800612c:	440b      	add	r3, r1
 800612e:	3318      	adds	r3, #24
 8006130:	601a      	str	r2, [r3, #0]
                Ts_Ctx[Instance].PreviousY = TS_State->TouchY;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	490b      	ldr	r1, [pc, #44]	@ (8006164 <TicTacToe_TS_GetState+0x234>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	440b      	add	r3, r1
 800613e:	331c      	adds	r3, #28
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <TicTacToe_TS_GetState+0x21a>
              }
        }
        else
        {
          TS_State->TouchDetected = 0U;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  return status;
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800614c:	4618      	mov	r0, r3
 800614e:	3728      	adds	r7, #40	@ 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	2000009d 	.word	0x2000009d
 8006158:	20000c64 	.word	0x20000c64
 800615c:	20000c40 	.word	0x20000c40
 8006160:	20000c3c 	.word	0x20000c3c
 8006164:	20000c44 	.word	0x20000c44

08006168 <TicTacToe_TS_IRQHandler>:
  * @brief  TicTacToe TS interrupt handler.
  * @param  Instance TS Instance.
  * @retval None.
  */
void TicTacToe_TS_IRQHandler(uint32_t Instance)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  HAL_EXTI_IRQHandler(&hts_exti[Instance]);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4a04      	ldr	r2, [pc, #16]	@ (800618c <TicTacToe_TS_IRQHandler+0x24>)
 800617c:	4413      	add	r3, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa fb0a 	bl	8000798 <HAL_EXTI_IRQHandler>
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000c64 	.word	0x20000c64

08006190 <FT6X06_Probe>:
  * @brief  Probe the FT6X06 TS driver.
  * @param  Instance TS Instance.
  * @retval TicTacToe status.
  */
static int32_t FT6X06_Probe(uint32_t Instance)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	@ 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  FT6X06_IO_t            IOCtx;
  uint32_t               ft6x06_id;
  static FT6X06_Object_t FT6X06Obj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8006198:	2370      	movs	r3, #112	@ 0x70
 800619a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = TicTacToe_I2C1_Init;
 800619c:	4b26      	ldr	r3, [pc, #152]	@ (8006238 <FT6X06_Probe+0xa8>)
 800619e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = TicTacToe_I2C1_DeInit;
 80061a0:	4b26      	ldr	r3, [pc, #152]	@ (800623c <FT6X06_Probe+0xac>)
 80061a2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = TicTacToe_I2C1_ReadReg;
 80061a4:	4b26      	ldr	r3, [pc, #152]	@ (8006240 <FT6X06_Probe+0xb0>)
 80061a6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = TicTacToe_I2C1_WriteReg;
 80061a8:	4b26      	ldr	r3, [pc, #152]	@ (8006244 <FT6X06_Probe+0xb4>)
 80061aa:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = TicTacToe_GetTick;
 80061ac:	4b26      	ldr	r3, [pc, #152]	@ (8006248 <FT6X06_Probe+0xb8>)
 80061ae:	623b      	str	r3, [r7, #32]

  if (FT6X06_RegisterBusIO(&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	4619      	mov	r1, r3
 80061b6:	4825      	ldr	r0, [pc, #148]	@ (800624c <FT6X06_Probe+0xbc>)
 80061b8:	f7fc ff10 	bl	8002fdc <FT6X06_RegisterBusIO>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <FT6X06_Probe+0x3a>
  {
    status = TicTacToe_ERROR_BUS_FAILURE;
 80061c2:	f06f 0307 	mvn.w	r3, #7
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c8:	e031      	b.n	800622e <FT6X06_Probe+0x9e>
  }
  else if (FT6X06_ReadID(&FT6X06Obj, &ft6x06_id) != FT6X06_OK)
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4619      	mov	r1, r3
 80061d0:	481e      	ldr	r0, [pc, #120]	@ (800624c <FT6X06_Probe+0xbc>)
 80061d2:	f7fc fff9 	bl	80031c8 <FT6X06_ReadID>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <FT6X06_Probe+0x54>
  {
    status = TicTacToe_ERROR_COMPONENT_FAILURE;
 80061dc:	f06f 0304 	mvn.w	r3, #4
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e2:	e024      	b.n	800622e <FT6X06_Probe+0x9e>
  } 
  else if (ft6x06_id != FT6X06_ID)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b11      	cmp	r3, #17
 80061e8:	d003      	beq.n	80061f2 <FT6X06_Probe+0x62>
  {
    status = TicTacToe_ERROR_UNKNOWN_COMPONENT;
 80061ea:	f06f 0306 	mvn.w	r3, #6
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f0:	e01d      	b.n	800622e <FT6X06_Probe+0x9e>
  }
  else
  {
    Ts_CompObj[Instance] = &FT6X06Obj;
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <FT6X06_Probe+0xc0>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4915      	ldr	r1, [pc, #84]	@ (800624c <FT6X06_Probe+0xbc>)
 80061f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]   = (TS_Drv_t *) &FT6X06_TS_Driver;
 80061fc:	4a15      	ldr	r2, [pc, #84]	@ (8006254 <FT6X06_Probe+0xc4>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4915      	ldr	r1, [pc, #84]	@ (8006258 <FT6X06_Probe+0xc8>)
 8006202:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 8006206:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <FT6X06_Probe+0xc4>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	490f      	ldr	r1, [pc, #60]	@ (8006250 <FT6X06_Probe+0xc0>)
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006218:	4610      	mov	r0, r2
 800621a:	4798      	blx	r3
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	da03      	bge.n	800622a <FT6X06_Probe+0x9a>
    {
      status = TicTacToe_ERROR_COMPONENT_FAILURE;
 8006222:	f06f 0304 	mvn.w	r3, #4
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
 8006228:	e001      	b.n	800622e <FT6X06_Probe+0x9e>
    }
    else
    {
      status = TicTacToe_ERROR_NONE;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return status;
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
} 
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	@ 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	080049d5 	.word	0x080049d5
 800623c:	08004a55 	.word	0x08004a55
 8006240:	08004b59 	.word	0x08004b59
 8006244:	08004b29 	.word	0x08004b29
 8006248:	080049bf 	.word	0x080049bf
 800624c:	20000c70 	.word	0x20000c70
 8006250:	20000c3c 	.word	0x20000c3c
 8006254:	20000c40 	.word	0x20000c40
 8006258:	2000000c 	.word	0x2000000c

0800625c <TS_EXTI_Callback>:
/**
  * @brief  TS EXTI callback.
  * @retval None.
  */
static void TS_EXTI_Callback(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  TicTacToe_TS_Callback(0);
 8006260:	2000      	movs	r0, #0
 8006262:	f000 fd85 	bl	8006d70 <TicTacToe_TS_Callback>

  /* Clear interrupt on TS driver */
  if (Ts_Drv[0]->ClearIT(Ts_CompObj[0]) < 0)
 8006266:	4b04      	ldr	r3, [pc, #16]	@ (8006278 <TS_EXTI_Callback+0x1c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	4a03      	ldr	r2, [pc, #12]	@ (800627c <TS_EXTI_Callback+0x20>)
 800626e:	6812      	ldr	r2, [r2, #0]
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
  {
    /* Nothing to do */
  }
}
 8006274:	bf00      	nop
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000c40 	.word	0x20000c40
 800627c:	20000c3c 	.word	0x20000c3c

08006280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8006280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006284:	f7f9 ffd8 	bl	8000238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006288:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800628a:	e003      	b.n	8006294 <LoopCopyDataInit>

0800628c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800628c:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800628e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006290:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006292:	3104      	adds	r1, #4

08006294 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006294:	480a      	ldr	r0, [pc, #40]	@ (80062c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006296:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006298:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800629a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800629c:	d3f6      	bcc.n	800628c <CopyDataInit>
	ldr	r2, =_sbss
 800629e:	4a0a      	ldr	r2, [pc, #40]	@ (80062c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80062a0:	e002      	b.n	80062a8 <LoopFillZerobss>

080062a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80062a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80062a4:	f842 3b04 	str.w	r3, [r2], #4

080062a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80062a8:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <LoopForever+0x16>)
	cmp	r2, r3
 80062aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80062ac:	d3f9      	bcc.n	80062a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80062ae:	f001 fb2b 	bl	8007908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062b2:	f000 f80f 	bl	80062d4 <main>

080062b6 <LoopForever>:

LoopForever:
    b LoopForever
 80062b6:	e7fe      	b.n	80062b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80062b8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80062bc:	0800a5f8 	.word	0x0800a5f8
	ldr	r0, =_sdata
 80062c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80062c4:	200000e0 	.word	0x200000e0
	ldr	r2, =_sbss
 80062c8:	200000e0 	.word	0x200000e0
	ldr	r3, = _ebss
 80062cc:	20000d28 	.word	0x20000d28

080062d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062d0:	e7fe      	b.n	80062d0 <ADC1_2_IRQHandler>
	...

080062d4 <main>:
 * @brief  Main program with an FSM implementation of TicTacToe
 * @param  None
 * @retval None
 */
int main(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
	// general initializations
	HAL_Init();
 80062da:	f7fa f86b 	bl	80003b4 <HAL_Init>
	SystemClock_Config();
 80062de:	f000 fc19 	bl	8006b14 <SystemClock_Config>
	SystemHardwareInit();
 80062e2:	f000 fc81 	bl	8006be8 <SystemHardwareInit>

	// Touch state
	TS_State_t TsState = {0};
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	609a      	str	r2, [r3, #8]

	Initialize_Board(BoardState);
 80062f0:	48a6      	ldr	r0, [pc, #664]	@ (800658c <main+0x2b8>)
 80062f2:	f000 faf5 	bl	80068e0 <Initialize_Board>

	while (1)
	{

		{ // Read touch and Button. Do not modify.
			if (TouchDetected == SET)
 80062f6:	4ba6      	ldr	r3, [pc, #664]	@ (8006590 <main+0x2bc>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d11a      	bne.n	8006336 <main+0x62>
			{ // Detects screen touch (PersistentTouch)
				TouchDetected = RESET;
 8006300:	4ba3      	ldr	r3, [pc, #652]	@ (8006590 <main+0x2bc>)
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]

				if (TicTacToe_TS_GetState(0, &TsState) != TicTacToe_ERROR_NONE)
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	4619      	mov	r1, r3
 800630a:	2000      	movs	r0, #0
 800630c:	f7ff fe10 	bl	8005f30 <TicTacToe_TS_GetState>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <main+0x46>
				{
					Error_Handler();
 8006316:	f000 fd0b 	bl	8006d30 <Error_Handler>
				}
				if (TsState.TouchDetected >= 1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <main+0x62>
				{
					x = TsState.TouchX;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	b29a      	uxth	r2, r3
 8006324:	4b9b      	ldr	r3, [pc, #620]	@ (8006594 <main+0x2c0>)
 8006326:	801a      	strh	r2, [r3, #0]
					y = TsState.TouchY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	b29a      	uxth	r2, r3
 800632c:	4b9a      	ldr	r3, [pc, #616]	@ (8006598 <main+0x2c4>)
 800632e:	801a      	strh	r2, [r3, #0]
					Touch = 1;
 8006330:	4b9a      	ldr	r3, [pc, #616]	@ (800659c <main+0x2c8>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
				}
			}

			if (UserButtonPressed == SET)
 8006336:	4b9a      	ldr	r3, [pc, #616]	@ (80065a0 <main+0x2cc>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d105      	bne.n	800634c <main+0x78>
			{ // Detects button pressure (PersistentButton).
				UserButtonPressed = RESET;
 8006340:	4b97      	ldr	r3, [pc, #604]	@ (80065a0 <main+0x2cc>)
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
				Button = 1;
 8006346:	4b97      	ldr	r3, [pc, #604]	@ (80065a4 <main+0x2d0>)
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
			}
		}

		// ************************ LAB: Do not modify before this line **********************
		// Update State on entry
		if (State != PreviousState)
 800634c:	4b96      	ldr	r3, [pc, #600]	@ (80065a8 <main+0x2d4>)
 800634e:	781a      	ldrb	r2, [r3, #0]
 8006350:	4b96      	ldr	r3, [pc, #600]	@ (80065ac <main+0x2d8>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	f000 808b 	beq.w	8006470 <main+0x19c>
		{
			switch (State)
 800635a:	4b93      	ldr	r3, [pc, #588]	@ (80065a8 <main+0x2d4>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b09      	cmp	r3, #9
 8006360:	d87f      	bhi.n	8006462 <main+0x18e>
 8006362:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <main+0x94>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	08006391 	.word	0x08006391
 800636c:	080063af 	.word	0x080063af
 8006370:	080063c3 	.word	0x080063c3
 8006374:	080063e1 	.word	0x080063e1
 8006378:	08006405 	.word	0x08006405
 800637c:	08006419 	.word	0x08006419
 8006380:	08006437 	.word	0x08006437
 8006384:	080063fd 	.word	0x080063fd
 8006388:	08006453 	.word	0x08006453
 800638c:	0800645b 	.word	0x0800645b
			{
			case WELCOME:
				Initialize_Board(BoardState);
 8006390:	487e      	ldr	r0, [pc, #504]	@ (800658c <main+0x2b8>)
 8006392:	f000 faa5 	bl	80068e0 <Initialize_Board>
				Touch = 0;
 8006396:	4b81      	ldr	r3, [pc, #516]	@ (800659c <main+0x2c8>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
				Clear_Display_Welcome();
 800639c:	f000 f9ca 	bl	8006734 <Clear_Display_Welcome>
				Display_Text((uint8_t *)"Touch screen to start new game");
 80063a0:	4883      	ldr	r0, [pc, #524]	@ (80065b0 <main+0x2dc>)
 80063a2:	f000 fa65 	bl	8006870 <Display_Text>
				Display_Other_Text((uint8_t *)"Always exit with push-button");
 80063a6:	4883      	ldr	r0, [pc, #524]	@ (80065b4 <main+0x2e0>)
 80063a8:	f000 fa7e 	bl	80068a8 <Display_Other_Text>
				break;
 80063ac:	e060      	b.n	8006470 <main+0x19c>
			case BLUE_QUESTION:
				Touch = 0;
 80063ae:	4b7b      	ldr	r3, [pc, #492]	@ (800659c <main+0x2c8>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
				Clear_Display_Board(BoardState);
 80063b4:	4875      	ldr	r0, [pc, #468]	@ (800658c <main+0x2b8>)
 80063b6:	f000 f9e7 	bl	8006788 <Clear_Display_Board>
				Display_Text((uint8_t *)"Blue's move");
 80063ba:	487f      	ldr	r0, [pc, #508]	@ (80065b8 <main+0x2e4>)
 80063bc:	f000 fa58 	bl	8006870 <Display_Text>
				break;
 80063c0:	e056      	b.n	8006470 <main+0x19c>
			case BLUE_ANSWER:
				Valid = Check_Move_Validity(x, y, BoardState, &ix, &iy);
 80063c2:	4b74      	ldr	r3, [pc, #464]	@ (8006594 <main+0x2c0>)
 80063c4:	8818      	ldrh	r0, [r3, #0]
 80063c6:	4b74      	ldr	r3, [pc, #464]	@ (8006598 <main+0x2c4>)
 80063c8:	8819      	ldrh	r1, [r3, #0]
 80063ca:	4b7c      	ldr	r3, [pc, #496]	@ (80065bc <main+0x2e8>)
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4b7c      	ldr	r3, [pc, #496]	@ (80065c0 <main+0x2ec>)
 80063d0:	4a6e      	ldr	r2, [pc, #440]	@ (800658c <main+0x2b8>)
 80063d2:	f000 fa9e 	bl	8006912 <Check_Move_Validity>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	4b7a      	ldr	r3, [pc, #488]	@ (80065c4 <main+0x2f0>)
 80063dc:	701a      	strb	r2, [r3, #0]
				break;
 80063de:	e047      	b.n	8006470 <main+0x19c>


			case BLUE_UPDATE:
				BoardState[ix + 3 * iy] = BLUE;
 80063e0:	4b77      	ldr	r3, [pc, #476]	@ (80065c0 <main+0x2ec>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	4b75      	ldr	r3, [pc, #468]	@ (80065bc <main+0x2e8>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	440b      	add	r3, r1
 80063f4:	4a65      	ldr	r2, [pc, #404]	@ (800658c <main+0x2b8>)
 80063f6:	2102      	movs	r1, #2
 80063f8:	54d1      	strb	r1, [r2, r3]
				break;
 80063fa:	e039      	b.n	8006470 <main+0x19c>

			case BLUE_WINNER:
				Display_Text((uint8_t *)"Blue wins!");
 80063fc:	4872      	ldr	r0, [pc, #456]	@ (80065c8 <main+0x2f4>)
 80063fe:	f000 fa37 	bl	8006870 <Display_Text>
				break;
 8006402:	e035      	b.n	8006470 <main+0x19c>


			case RED_QUESTION:
				Touch = 0;
 8006404:	4b65      	ldr	r3, [pc, #404]	@ (800659c <main+0x2c8>)
 8006406:	2200      	movs	r2, #0
 8006408:	701a      	strb	r2, [r3, #0]
				Clear_Display_Board(BoardState);
 800640a:	4860      	ldr	r0, [pc, #384]	@ (800658c <main+0x2b8>)
 800640c:	f000 f9bc 	bl	8006788 <Clear_Display_Board>
				Display_Text((uint8_t *)"Red's move");
 8006410:	486e      	ldr	r0, [pc, #440]	@ (80065cc <main+0x2f8>)
 8006412:	f000 fa2d 	bl	8006870 <Display_Text>
				break;
 8006416:	e02b      	b.n	8006470 <main+0x19c>

			case RED_ANSWER:
				Valid = Check_Move_Validity(x, y, BoardState, &ix, &iy);
 8006418:	4b5e      	ldr	r3, [pc, #376]	@ (8006594 <main+0x2c0>)
 800641a:	8818      	ldrh	r0, [r3, #0]
 800641c:	4b5e      	ldr	r3, [pc, #376]	@ (8006598 <main+0x2c4>)
 800641e:	8819      	ldrh	r1, [r3, #0]
 8006420:	4b66      	ldr	r3, [pc, #408]	@ (80065bc <main+0x2e8>)
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4b66      	ldr	r3, [pc, #408]	@ (80065c0 <main+0x2ec>)
 8006426:	4a59      	ldr	r2, [pc, #356]	@ (800658c <main+0x2b8>)
 8006428:	f000 fa73 	bl	8006912 <Check_Move_Validity>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	4b64      	ldr	r3, [pc, #400]	@ (80065c4 <main+0x2f0>)
 8006432:	701a      	strb	r2, [r3, #0]
				break;
 8006434:	e01c      	b.n	8006470 <main+0x19c>

			case RED_UPDATE:
				BoardState[ix + 3 * iy] = RED;
 8006436:	4b62      	ldr	r3, [pc, #392]	@ (80065c0 <main+0x2ec>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	4b5f      	ldr	r3, [pc, #380]	@ (80065bc <main+0x2e8>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	440b      	add	r3, r1
 800644a:	4a50      	ldr	r2, [pc, #320]	@ (800658c <main+0x2b8>)
 800644c:	2101      	movs	r1, #1
 800644e:	54d1      	strb	r1, [r2, r3]
				break;
 8006450:	e00e      	b.n	8006470 <main+0x19c>

			case RED_WINNER:
				Display_Text((uint8_t *)"Red wins!");
 8006452:	485f      	ldr	r0, [pc, #380]	@ (80065d0 <main+0x2fc>)
 8006454:	f000 fa0c 	bl	8006870 <Display_Text>
				break;
 8006458:	e00a      	b.n	8006470 <main+0x19c>

			
			case NO_WIN:
				Display_Text((uint8_t *)"It's a draw!");
 800645a:	485e      	ldr	r0, [pc, #376]	@ (80065d4 <main+0x300>)
 800645c:	f000 fa08 	bl	8006870 <Display_Text>
				break;
 8006460:	e006      	b.n	8006470 <main+0x19c>


			case EXIT:
			default:
				Clear_Display_Welcome();
 8006462:	f000 f967 	bl	8006734 <Clear_Display_Welcome>
				Display_Text((uint8_t *)"Good bye");
 8006466:	485c      	ldr	r0, [pc, #368]	@ (80065d8 <main+0x304>)
 8006468:	f000 fa02 	bl	8006870 <Display_Text>
				//					  HAL_Delay(5000);
				return 0;
 800646c:	2300      	movs	r3, #0
 800646e:	e149      	b.n	8006704 <main+0x430>
		} // on entry



		// transitions
		switch (State)
 8006470:	4b4d      	ldr	r3, [pc, #308]	@ (80065a8 <main+0x2d4>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b09      	cmp	r3, #9
 8006476:	f200 8132 	bhi.w	80066de <main+0x40a>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <main+0x1ac>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064d1 	.word	0x080064d1
 8006488:	080064f9 	.word	0x080064f9
 800648c:	08006541 	.word	0x08006541
 8006490:	080065e5 	.word	0x080065e5
 8006494:	0800660b 	.word	0x0800660b
 8006498:	08006653 	.word	0x08006653
 800649c:	0800669d 	.word	0x0800669d
 80064a0:	080066b3 	.word	0x080066b3
 80064a4:	080066c9 	.word	0x080066c9
		{
		case WELCOME:
			PreviousState = WELCOME;
 80064a8:	4b40      	ldr	r3, [pc, #256]	@ (80065ac <main+0x2d8>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
			if (Button)
 80064ae:	4b3d      	ldr	r3, [pc, #244]	@ (80065a4 <main+0x2d0>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <main+0x1ea>
			{
				State = EXIT;
 80064b6:	4b3c      	ldr	r3, [pc, #240]	@ (80065a8 <main+0x2d4>)
 80064b8:	220a      	movs	r2, #10
 80064ba:	701a      	strb	r2, [r3, #0]
			}
			else if (Touch)
			{
				State = BLUE_QUESTION;
			}
			break;
 80064bc:	e116      	b.n	80066ec <main+0x418>
			else if (Touch)
 80064be:	4b37      	ldr	r3, [pc, #220]	@ (800659c <main+0x2c8>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8112 	beq.w	80066ec <main+0x418>
				State = BLUE_QUESTION;
 80064c8:	4b37      	ldr	r3, [pc, #220]	@ (80065a8 <main+0x2d4>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
			break;
 80064ce:	e10d      	b.n	80066ec <main+0x418>
		case BLUE_QUESTION:
			PreviousState = BLUE_QUESTION;
 80064d0:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <main+0x2d8>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
			if (Button)
 80064d6:	4b33      	ldr	r3, [pc, #204]	@ (80065a4 <main+0x2d0>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <main+0x212>
			{
				State = EXIT;
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <main+0x2d4>)
 80064e0:	220a      	movs	r2, #10
 80064e2:	701a      	strb	r2, [r3, #0]
			}
			else if (Touch)
			{
				State = BLUE_ANSWER;
			}
			break;
 80064e4:	e104      	b.n	80066f0 <main+0x41c>
			else if (Touch)
 80064e6:	4b2d      	ldr	r3, [pc, #180]	@ (800659c <main+0x2c8>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8100 	beq.w	80066f0 <main+0x41c>
				State = BLUE_ANSWER;
 80064f0:	4b2d      	ldr	r3, [pc, #180]	@ (80065a8 <main+0x2d4>)
 80064f2:	2202      	movs	r2, #2
 80064f4:	701a      	strb	r2, [r3, #0]
			break;
 80064f6:	e0fb      	b.n	80066f0 <main+0x41c>


		case BLUE_ANSWER:
			PreviousState = BLUE_ANSWER;
 80064f8:	4b2c      	ldr	r3, [pc, #176]	@ (80065ac <main+0x2d8>)
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
			if (Button)
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <main+0x2d0>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <main+0x23a>
			{
				State = EXIT;
 8006506:	4b28      	ldr	r3, [pc, #160]	@ (80065a8 <main+0x2d4>)
 8006508:	220a      	movs	r2, #10
 800650a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				State = BLUE_QUESTION;
			}
			break;
 800650c:	e0f9      	b.n	8006702 <main+0x42e>
			else if (Valid)
 800650e:	4b2d      	ldr	r3, [pc, #180]	@ (80065c4 <main+0x2f0>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <main+0x264>
				BoardState[ix + 3 * iy] = BLUE;
 8006516:	4b2a      	ldr	r3, [pc, #168]	@ (80065c0 <main+0x2ec>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	4b27      	ldr	r3, [pc, #156]	@ (80065bc <main+0x2e8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	440b      	add	r3, r1
 800652a:	4a18      	ldr	r2, [pc, #96]	@ (800658c <main+0x2b8>)
 800652c:	2102      	movs	r1, #2
 800652e:	54d1      	strb	r1, [r2, r3]
				State = BLUE_UPDATE;
 8006530:	4b1d      	ldr	r3, [pc, #116]	@ (80065a8 <main+0x2d4>)
 8006532:	2203      	movs	r2, #3
 8006534:	701a      	strb	r2, [r3, #0]
			break;
 8006536:	e0e4      	b.n	8006702 <main+0x42e>
				State = BLUE_QUESTION;
 8006538:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <main+0x2d4>)
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
			break;
 800653e:	e0e0      	b.n	8006702 <main+0x42e>

		case BLUE_UPDATE:
			PreviousState = BLUE_UPDATE;
 8006540:	4b1a      	ldr	r3, [pc, #104]	@ (80065ac <main+0x2d8>)
 8006542:	2203      	movs	r2, #3
 8006544:	701a      	strb	r2, [r3, #0]
			Win = Check_Win(BoardState);
 8006546:	4811      	ldr	r0, [pc, #68]	@ (800658c <main+0x2b8>)
 8006548:	f000 fa4a 	bl	80069e0 <Check_Win>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <main+0x308>)
 8006552:	701a      	strb	r2, [r3, #0]
			Full = Check_Full(BoardState);
 8006554:	480d      	ldr	r0, [pc, #52]	@ (800658c <main+0x2b8>)
 8006556:	f000 fac0 	bl	8006ada <Check_Full>
 800655a:	4603      	mov	r3, r0
 800655c:	461a      	mov	r2, r3
 800655e:	4b20      	ldr	r3, [pc, #128]	@ (80065e0 <main+0x30c>)
 8006560:	701a      	strb	r2, [r3, #0]
			if (Win)
 8006562:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <main+0x308>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <main+0x29e>
				State = BLUE_WINNER;
 800656a:	4b0f      	ldr	r3, [pc, #60]	@ (80065a8 <main+0x2d4>)
 800656c:	2207      	movs	r2, #7
 800656e:	701a      	strb	r2, [r3, #0]
			else if (Full)
				State = NO_WIN;
			else
				State = RED_QUESTION;
			break;
 8006570:	e0c7      	b.n	8006702 <main+0x42e>
			else if (Full)
 8006572:	4b1b      	ldr	r3, [pc, #108]	@ (80065e0 <main+0x30c>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <main+0x2ae>
				State = NO_WIN;
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <main+0x2d4>)
 800657c:	2209      	movs	r2, #9
 800657e:	701a      	strb	r2, [r3, #0]
			break;
 8006580:	e0bf      	b.n	8006702 <main+0x42e>
				State = RED_QUESTION;
 8006582:	4b09      	ldr	r3, [pc, #36]	@ (80065a8 <main+0x2d4>)
 8006584:	2204      	movs	r2, #4
 8006586:	701a      	strb	r2, [r3, #0]
			break;
 8006588:	e0bb      	b.n	8006702 <main+0x42e>
 800658a:	bf00      	nop
 800658c:	20000ca8 	.word	0x20000ca8
 8006590:	20000c99 	.word	0x20000c99
 8006594:	20000c9a 	.word	0x20000c9a
 8006598:	20000c9c 	.word	0x20000c9c
 800659c:	20000ca0 	.word	0x20000ca0
 80065a0:	20000c98 	.word	0x20000c98
 80065a4:	20000ca4 	.word	0x20000ca4
 80065a8:	20000ca5 	.word	0x20000ca5
 80065ac:	200000c2 	.word	0x200000c2
 80065b0:	08007968 	.word	0x08007968
 80065b4:	08007988 	.word	0x08007988
 80065b8:	080079a8 	.word	0x080079a8
 80065bc:	20000c9f 	.word	0x20000c9f
 80065c0:	20000c9e 	.word	0x20000c9e
 80065c4:	20000ca1 	.word	0x20000ca1
 80065c8:	080079b4 	.word	0x080079b4
 80065cc:	080079c0 	.word	0x080079c0
 80065d0:	080079cc 	.word	0x080079cc
 80065d4:	080079d8 	.word	0x080079d8
 80065d8:	080079e8 	.word	0x080079e8
 80065dc:	20000ca2 	.word	0x20000ca2
 80065e0:	20000ca3 	.word	0x20000ca3


		case RED_QUESTION:
			PreviousState = RED_QUESTION;
 80065e4:	4b49      	ldr	r3, [pc, #292]	@ (800670c <main+0x438>)
 80065e6:	2204      	movs	r2, #4
 80065e8:	701a      	strb	r2, [r3, #0]
			if (Button)
 80065ea:	4b49      	ldr	r3, [pc, #292]	@ (8006710 <main+0x43c>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <main+0x326>
				State = EXIT;
 80065f2:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <main+0x440>)
 80065f4:	220a      	movs	r2, #10
 80065f6:	701a      	strb	r2, [r3, #0]
			else if (Touch)
				State = RED_ANSWER;
			break;
 80065f8:	e07c      	b.n	80066f4 <main+0x420>
			else if (Touch)
 80065fa:	4b47      	ldr	r3, [pc, #284]	@ (8006718 <main+0x444>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d078      	beq.n	80066f4 <main+0x420>
				State = RED_ANSWER;
 8006602:	4b44      	ldr	r3, [pc, #272]	@ (8006714 <main+0x440>)
 8006604:	2205      	movs	r2, #5
 8006606:	701a      	strb	r2, [r3, #0]
			break;
 8006608:	e074      	b.n	80066f4 <main+0x420>

		case RED_ANSWER:
			PreviousState = RED_ANSWER;
 800660a:	4b40      	ldr	r3, [pc, #256]	@ (800670c <main+0x438>)
 800660c:	2205      	movs	r2, #5
 800660e:	701a      	strb	r2, [r3, #0]
			if (Button)
 8006610:	4b3f      	ldr	r3, [pc, #252]	@ (8006710 <main+0x43c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <main+0x34c>
				State = EXIT;
 8006618:	4b3e      	ldr	r3, [pc, #248]	@ (8006714 <main+0x440>)
 800661a:	220a      	movs	r2, #10
 800661c:	701a      	strb	r2, [r3, #0]
				BoardState[ix + 3 * iy] = RED;
				State = RED_UPDATE;
			}
			else
				State = RED_QUESTION;
			break;
 800661e:	e070      	b.n	8006702 <main+0x42e>
			else if (Valid)
 8006620:	4b3e      	ldr	r3, [pc, #248]	@ (800671c <main+0x448>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d010      	beq.n	800664a <main+0x376>
				BoardState[ix + 3 * iy] = RED;
 8006628:	4b3d      	ldr	r3, [pc, #244]	@ (8006720 <main+0x44c>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	4619      	mov	r1, r3
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <main+0x450>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	4613      	mov	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4413      	add	r3, r2
 800663a:	440b      	add	r3, r1
 800663c:	4a3a      	ldr	r2, [pc, #232]	@ (8006728 <main+0x454>)
 800663e:	2101      	movs	r1, #1
 8006640:	54d1      	strb	r1, [r2, r3]
				State = RED_UPDATE;
 8006642:	4b34      	ldr	r3, [pc, #208]	@ (8006714 <main+0x440>)
 8006644:	2206      	movs	r2, #6
 8006646:	701a      	strb	r2, [r3, #0]
			break;
 8006648:	e05b      	b.n	8006702 <main+0x42e>
				State = RED_QUESTION;
 800664a:	4b32      	ldr	r3, [pc, #200]	@ (8006714 <main+0x440>)
 800664c:	2204      	movs	r2, #4
 800664e:	701a      	strb	r2, [r3, #0]
			break;
 8006650:	e057      	b.n	8006702 <main+0x42e>

		case RED_UPDATE:
			PreviousState = RED_UPDATE;
 8006652:	4b2e      	ldr	r3, [pc, #184]	@ (800670c <main+0x438>)
 8006654:	2206      	movs	r2, #6
 8006656:	701a      	strb	r2, [r3, #0]
			Win = Check_Win(BoardState);
 8006658:	4833      	ldr	r0, [pc, #204]	@ (8006728 <main+0x454>)
 800665a:	f000 f9c1 	bl	80069e0 <Check_Win>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	4b32      	ldr	r3, [pc, #200]	@ (800672c <main+0x458>)
 8006664:	701a      	strb	r2, [r3, #0]
			Full = Check_Full(BoardState);
 8006666:	4830      	ldr	r0, [pc, #192]	@ (8006728 <main+0x454>)
 8006668:	f000 fa37 	bl	8006ada <Check_Full>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	4b2f      	ldr	r3, [pc, #188]	@ (8006730 <main+0x45c>)
 8006672:	701a      	strb	r2, [r3, #0]
			if (Win)
 8006674:	4b2d      	ldr	r3, [pc, #180]	@ (800672c <main+0x458>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <main+0x3b0>
				State = RED_WINNER;
 800667c:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <main+0x440>)
 800667e:	2208      	movs	r2, #8
 8006680:	701a      	strb	r2, [r3, #0]
			else if (Full)
				State = NO_WIN;
			else
				State = BLUE_QUESTION;
			break;
 8006682:	e03e      	b.n	8006702 <main+0x42e>
			else if (Full)
 8006684:	4b2a      	ldr	r3, [pc, #168]	@ (8006730 <main+0x45c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <main+0x3c0>
				State = NO_WIN;
 800668c:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <main+0x440>)
 800668e:	2209      	movs	r2, #9
 8006690:	701a      	strb	r2, [r3, #0]
			break;
 8006692:	e036      	b.n	8006702 <main+0x42e>
				State = BLUE_QUESTION;
 8006694:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <main+0x440>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
			break;
 800669a:	e032      	b.n	8006702 <main+0x42e>




		case BLUE_WINNER:
			PreviousState = BLUE_WINNER;
 800669c:	4b1b      	ldr	r3, [pc, #108]	@ (800670c <main+0x438>)
 800669e:	2207      	movs	r2, #7
 80066a0:	701a      	strb	r2, [r3, #0]
			if (Button)
 80066a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006710 <main+0x43c>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d026      	beq.n	80066f8 <main+0x424>
				State = EXIT;
 80066aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <main+0x440>)
 80066ac:	220a      	movs	r2, #10
 80066ae:	701a      	strb	r2, [r3, #0]
			break;
 80066b0:	e022      	b.n	80066f8 <main+0x424>

		case RED_WINNER:
			PreviousState = RED_WINNER;
 80066b2:	4b16      	ldr	r3, [pc, #88]	@ (800670c <main+0x438>)
 80066b4:	2208      	movs	r2, #8
 80066b6:	701a      	strb	r2, [r3, #0]
			if (Button)
 80066b8:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <main+0x43c>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01d      	beq.n	80066fc <main+0x428>
				State = EXIT;
 80066c0:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <main+0x440>)
 80066c2:	220a      	movs	r2, #10
 80066c4:	701a      	strb	r2, [r3, #0]
			break;
 80066c6:	e019      	b.n	80066fc <main+0x428>

		case NO_WIN:
			PreviousState = NO_WIN;
 80066c8:	4b10      	ldr	r3, [pc, #64]	@ (800670c <main+0x438>)
 80066ca:	2209      	movs	r2, #9
 80066cc:	701a      	strb	r2, [r3, #0]
			if (Button)
 80066ce:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <main+0x43c>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d014      	beq.n	8006700 <main+0x42c>
				State = EXIT;
 80066d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006714 <main+0x440>)
 80066d8:	220a      	movs	r2, #10
 80066da:	701a      	strb	r2, [r3, #0]
			break;
 80066dc:	e010      	b.n	8006700 <main+0x42c>




		default:
			PreviousState = EXIT;
 80066de:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <main+0x438>)
 80066e0:	220a      	movs	r2, #10
 80066e2:	701a      	strb	r2, [r3, #0]
			State = WELCOME;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <main+0x440>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e604      	b.n	80062f6 <main+0x22>
			break;
 80066ec:	bf00      	nop
 80066ee:	e602      	b.n	80062f6 <main+0x22>
			break;
 80066f0:	bf00      	nop
 80066f2:	e600      	b.n	80062f6 <main+0x22>
			break;
 80066f4:	bf00      	nop
 80066f6:	e5fe      	b.n	80062f6 <main+0x22>
			break;
 80066f8:	bf00      	nop
 80066fa:	e5fc      	b.n	80062f6 <main+0x22>
			break;
 80066fc:	bf00      	nop
 80066fe:	e5fa      	b.n	80062f6 <main+0x22>
			break;
 8006700:	bf00      	nop
			if (TouchDetected == SET)
 8006702:	e5f8      	b.n	80062f6 <main+0x22>
		} // transitions

		// ************************ LAB: Do not modify after this line **********************

	} // infinite loop
} // end main
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200000c2 	.word	0x200000c2
 8006710:	20000ca4 	.word	0x20000ca4
 8006714:	20000ca5 	.word	0x20000ca5
 8006718:	20000ca0 	.word	0x20000ca0
 800671c:	20000ca1 	.word	0x20000ca1
 8006720:	20000c9e 	.word	0x20000c9e
 8006724:	20000c9f 	.word	0x20000c9f
 8006728:	20000ca8 	.word	0x20000ca8
 800672c:	20000ca2 	.word	0x20000ca2
 8006730:	20000ca3 	.word	0x20000ca3

08006734 <Clear_Display_Welcome>:

static void Clear_Display_Welcome(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	UTIL_LCD_SetFont(&Font24);
 8006738:	480f      	ldr	r0, [pc, #60]	@ (8006778 <Clear_Display_Welcome+0x44>)
 800673a:	f000 fbff 	bl	8006f3c <UTIL_LCD_SetFont>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800673e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8006742:	f000 fc95 	bl	8007070 <UTIL_LCD_Clear>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8006746:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800674a:	f000 fbcf 	bl	8006eec <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800674e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8006752:	f000 fbdf 	bl	8006f14 <UTIL_LCD_SetBackColor>
	UTIL_LCD_DisplayStringAt(0, 100, (uint8_t *)"Tic-Tac-Toe!!", CENTER_MODE);
 8006756:	2301      	movs	r3, #1
 8006758:	4a08      	ldr	r2, [pc, #32]	@ (800677c <Clear_Display_Welcome+0x48>)
 800675a:	2164      	movs	r1, #100	@ 0x64
 800675c:	2000      	movs	r0, #0
 800675e:	f000 fcd3 	bl	8007108 <UTIL_LCD_DisplayStringAt>
	UTIL_LCD_SetFont(&Font16);
 8006762:	4807      	ldr	r0, [pc, #28]	@ (8006780 <Clear_Display_Welcome+0x4c>)
 8006764:	f000 fbea 	bl	8006f3c <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 140, (uint8_t *)liuids, CENTER_MODE);
 8006768:	2301      	movs	r3, #1
 800676a:	4a06      	ldr	r2, [pc, #24]	@ (8006784 <Clear_Display_Welcome+0x50>)
 800676c:	218c      	movs	r1, #140	@ 0x8c
 800676e:	2000      	movs	r0, #0
 8006770:	f000 fcca 	bl	8007108 <UTIL_LCD_DisplayStringAt>
}
 8006774:	bf00      	nop
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200000c4 	.word	0x200000c4
 800677c:	080079f4 	.word	0x080079f4
 8006780:	200000cc 	.word	0x200000cc
 8006784:	200000a4 	.word	0x200000a4

08006788 <Clear_Display_Board>:

static void Clear_Display_Board(Cell_State BoardState[])
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
	UTIL_LCD_Clear(UTIL_LCD_COLOR_YELLOW);
 8006790:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8006794:	f000 fc6c 	bl	8007070 <UTIL_LCD_Clear>
	UTIL_LCD_FillRect(0, 180, 240, 240, UTIL_LCD_COLOR_BLACK);
 8006798:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	23f0      	movs	r3, #240	@ 0xf0
 80067a0:	22f0      	movs	r2, #240	@ 0xf0
 80067a2:	21b4      	movs	r1, #180	@ 0xb4
 80067a4:	2000      	movs	r0, #0
 80067a6:	f000 fe67 	bl	8007478 <UTIL_LCD_FillRect>
	for (int i = 0; i < 3; i++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e052      	b.n	8006856 <Clear_Display_Board+0xce>
	{
		for (int j = 0; j < 3; j++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	e049      	b.n	800684a <Clear_Display_Board+0xc2>
		{
			switch (BoardState[i + 3 * j])
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4613      	mov	r3, r2
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d014      	beq.n	80067f8 <Clear_Display_Board+0x70>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d125      	bne.n	800681e <Clear_Display_Board+0x96>
			{
			case BLUE:
				UTIL_LCD_FillCircle(XPOS(i), YPOS(j), RADIUS - 3, UTIL_LCD_COLOR_BLUE);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4618      	mov	r0, r3
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	331e      	adds	r3, #30
 80067ec:	4619      	mov	r1, r3
 80067ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006868 <Clear_Display_Board+0xe0>)
 80067f0:	221a      	movs	r2, #26
 80067f2:	f000 fe7b 	bl	80074ec <UTIL_LCD_FillCircle>
				break;
 80067f6:	e025      	b.n	8006844 <Clear_Display_Board+0xbc>
			case RED:
				UTIL_LCD_FillCircle(XPOS(i), YPOS(j), RADIUS - 3, UTIL_LCD_COLOR_RED);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	4613      	mov	r3, r2
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4618      	mov	r0, r3
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4613      	mov	r3, r2
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	331e      	adds	r3, #30
 8006812:	4619      	mov	r1, r3
 8006814:	4b15      	ldr	r3, [pc, #84]	@ (800686c <Clear_Display_Board+0xe4>)
 8006816:	221a      	movs	r2, #26
 8006818:	f000 fe68 	bl	80074ec <UTIL_LCD_FillCircle>
				break;
 800681c:	e012      	b.n	8006844 <Clear_Display_Board+0xbc>
			default:
				UTIL_LCD_FillCircle(XPOS(i), YPOS(j), RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	4613      	mov	r3, r2
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4618      	mov	r0, r3
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	331e      	adds	r3, #30
 8006838:	4619      	mov	r1, r3
 800683a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800683e:	221b      	movs	r2, #27
 8006840:	f000 fe54 	bl	80074ec <UTIL_LCD_FillCircle>
		for (int j = 0; j < 3; j++)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3301      	adds	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b02      	cmp	r3, #2
 800684e:	ddb2      	ble.n	80067b6 <Clear_Display_Board+0x2e>
	for (int i = 0; i < 3; i++)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b02      	cmp	r3, #2
 800685a:	dda9      	ble.n	80067b0 <Clear_Display_Board+0x28>
			}
		}
	}
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	ff0000ff 	.word	0xff0000ff
 800686c:	ffff0000 	.word	0xffff0000

08006870 <Display_Text>:

static void Display_Text(uint8_t *text)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	UTIL_LCD_SetFont(&Font16);
 8006878:	480a      	ldr	r0, [pc, #40]	@ (80068a4 <Display_Text+0x34>)
 800687a:	f000 fb5f 	bl	8006f3c <UTIL_LCD_SetFont>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800687e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006882:	f000 fb33 	bl	8006eec <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8006886:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800688a:	f000 fb43 	bl	8006f14 <UTIL_LCD_SetBackColor>
	UTIL_LCD_DisplayStringAt(0, 195, text, CENTER_MODE);
 800688e:	2301      	movs	r3, #1
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	21c3      	movs	r1, #195	@ 0xc3
 8006894:	2000      	movs	r0, #0
 8006896:	f000 fc37 	bl	8007108 <UTIL_LCD_DisplayStringAt>
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200000cc 	.word	0x200000cc

080068a8 <Display_Other_Text>:

static void Display_Other_Text(uint8_t *text)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	UTIL_LCD_SetFont(&Font12);
 80068b0:	480a      	ldr	r0, [pc, #40]	@ (80068dc <Display_Other_Text+0x34>)
 80068b2:	f000 fb43 	bl	8006f3c <UTIL_LCD_SetFont>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068ba:	f000 fb17 	bl	8006eec <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80068be:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80068c2:	f000 fb27 	bl	8006f14 <UTIL_LCD_SetBackColor>
	UTIL_LCD_DisplayStringAt(0, 225, text, CENTER_MODE);
 80068c6:	2301      	movs	r3, #1
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	21e1      	movs	r1, #225	@ 0xe1
 80068cc:	2000      	movs	r0, #0
 80068ce:	f000 fc1b 	bl	8007108 <UTIL_LCD_DisplayStringAt>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	200000d4 	.word	0x200000d4

080068e0 <Initialize_Board>:

void Initialize_Board(Cell_State BoardState[])
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 9; i++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e007      	b.n	80068fe <Initialize_Board+0x1e>
	{
		BoardState[i] = FREE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b08      	cmp	r3, #8
 8006902:	ddf4      	ble.n	80068ee <Initialize_Board+0xe>
	}
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <Check_Move_Validity>:

static uint8_t Check_Move_Validity(uint16_t x, uint16_t y, Cell_State BoardState[],
								   uint8_t *p_choice_i, uint8_t *p_choice_j)
{
 8006912:	b480      	push	{r7}
 8006914:	b087      	sub	sp, #28
 8006916:	af00      	add	r7, sp, #0
 8006918:	60ba      	str	r2, [r7, #8]
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	4603      	mov	r3, r0
 800691e:	81fb      	strh	r3, [r7, #14]
 8006920:	460b      	mov	r3, r1
 8006922:	81bb      	strh	r3, [r7, #12]
	for (int i = 0; i < 3; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e04a      	b.n	80069c0 <Check_Move_Validity+0xae>
	{
		for (int j = 0; j < 3; j++)
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e041      	b.n	80069b4 <Check_Move_Validity+0xa2>
		{
			if ((y > (YPOS(j) - RADIUS)) &&
 8006930:	89b9      	ldrh	r1, [r7, #12]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4613      	mov	r3, r2
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	3301      	adds	r3, #1
 800693e:	4299      	cmp	r1, r3
 8006940:	dd35      	ble.n	80069ae <Check_Move_Validity+0x9c>
				(y < (YPOS(j) + RADIUS)))
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4613      	mov	r3, r2
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 8006950:	89bb      	ldrh	r3, [r7, #12]
			if ((y > (YPOS(j) - RADIUS)) &&
 8006952:	429a      	cmp	r2, r3
 8006954:	db2b      	blt.n	80069ae <Check_Move_Validity+0x9c>
			{

				if ((x > (XPOS(i) - RADIUS)) &&
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	4613      	mov	r3, r2
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	f1a3 021c 	sub.w	r2, r3, #28
 8006966:	89fb      	ldrh	r3, [r7, #14]
 8006968:	429a      	cmp	r2, r3
 800696a:	dc20      	bgt.n	80069ae <Check_Move_Validity+0x9c>
					(x < (XPOS(i) + RADIUS)))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	4613      	mov	r3, r2
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	f103 021c 	add.w	r2, r3, #28
 800697c:	89fb      	ldrh	r3, [r7, #14]
				if ((x > (XPOS(i) - RADIUS)) &&
 800697e:	429a      	cmp	r2, r3
 8006980:	db15      	blt.n	80069ae <Check_Move_Validity+0x9c>
				{
					if (BoardState[i + 3 * j] == FREE)
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	441a      	add	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <Check_Move_Validity+0x9c>
					{
						*p_choice_i = i;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	701a      	strb	r2, [r3, #0]
						*p_choice_j = j;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	701a      	strb	r2, [r3, #0]
						return 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e012      	b.n	80069d4 <Check_Move_Validity+0xc2>
		for (int j = 0; j < 3; j++)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	3301      	adds	r3, #1
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	ddba      	ble.n	8006930 <Check_Move_Validity+0x1e>
	for (int i = 0; i < 3; i++)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3301      	adds	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	ddb1      	ble.n	800692a <Check_Move_Validity+0x18>
					}
				}
			}
		}
	}
	*p_choice_i = -1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	22ff      	movs	r2, #255	@ 0xff
 80069ca:	701a      	strb	r2, [r3, #0]
	*p_choice_j = -1;
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	22ff      	movs	r2, #255	@ 0xff
 80069d0:	701a      	strb	r2, [r3, #0]
	return 0;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <Check_Win>:

static uint8_t Check_Win(Cell_State BoardState[])
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

	// check central
	if (BoardState[1 + 3 * 1] != FREE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3304      	adds	r3, #4
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01f      	beq.n	8006a32 <Check_Win+0x52>
	{
		for (int i = 0; i < 4; i++)
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e019      	b.n	8006a2c <Check_Win+0x4c>
		{
			if ((BoardState[i] == BoardState[4]) && (BoardState[4] == BoardState[8 - i]))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d10d      	bne.n	8006a26 <Check_Win+0x46>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f1c3 0308 	rsb	r3, r3, #8
 8006a16:	4619      	mov	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	440b      	add	r3, r1
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d101      	bne.n	8006a26 <Check_Win+0x46>
			{
				return 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e053      	b.n	8006ace <Check_Win+0xee>
		for (int i = 0; i < 4; i++)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	dde2      	ble.n	80069f8 <Check_Win+0x18>
			}
		}
	}
	// check periphery
	if (BoardState[0] != FREE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01f      	beq.n	8006a7a <Check_Win+0x9a>
	{
		if ((BoardState[0] == BoardState[1]) && (BoardState[0] == BoardState[2]))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3301      	adds	r3, #1
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d108      	bne.n	8006a5a <Check_Win+0x7a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3302      	adds	r3, #2
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d101      	bne.n	8006a5a <Check_Win+0x7a>
		{
			return 1;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e039      	b.n	8006ace <Check_Win+0xee>
		}
		if ((BoardState[0] == BoardState[3]) && (BoardState[0] == BoardState[6]))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3303      	adds	r3, #3
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d108      	bne.n	8006a7a <Check_Win+0x9a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3306      	adds	r3, #6
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d101      	bne.n	8006a7a <Check_Win+0x9a>
		{
			return 1;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e029      	b.n	8006ace <Check_Win+0xee>
		}
	}
	if (BoardState[8] != FREE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d023      	beq.n	8006acc <Check_Win+0xec>
	{
		if ((BoardState[8] == BoardState[7]) && (BoardState[8] == BoardState[6]))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3308      	adds	r3, #8
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3307      	adds	r3, #7
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d109      	bne.n	8006aa8 <Check_Win+0xc8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3308      	adds	r3, #8
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3306      	adds	r3, #6
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d101      	bne.n	8006aa8 <Check_Win+0xc8>
		{
			return 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e012      	b.n	8006ace <Check_Win+0xee>
		}
		if ((BoardState[8] == BoardState[5]) && (BoardState[8] == BoardState[2]))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3305      	adds	r3, #5
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d109      	bne.n	8006acc <Check_Win+0xec>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3308      	adds	r3, #8
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d101      	bne.n	8006acc <Check_Win+0xec>
		{
			return 1;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <Check_Win+0xee>
		}
	}

	return 0;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <Check_Full>:

static uint8_t Check_Full(Cell_State BoardState[])
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 9; i++)
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e00a      	b.n	8006afe <Check_Full+0x24>
	{
		if (BoardState[i] == FREE)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <Check_Full+0x1e>
		{
			return 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e006      	b.n	8006b06 <Check_Full+0x2c>
	for (uint8_t i = 0; i < 9; i++)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	3301      	adds	r3, #1
 8006afc:	73fb      	strb	r3, [r7, #15]
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d9f1      	bls.n	8006ae8 <Check_Full+0xe>
		}
	}
	return 1;
 8006b04:	2301      	movs	r3, #1
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b098      	sub	sp, #96	@ 0x60
 8006b18:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	605a      	str	r2, [r3, #4]
 8006b24:	609a      	str	r2, [r3, #8]
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	2248      	movs	r2, #72	@ 0x48
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fee1 	bl	80078f8 <memset>

	/* Enable voltage range 0 for frequency above 80 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 8006b36:	4b2b      	ldr	r3, [pc, #172]	@ (8006be4 <SystemClock_Config+0xd0>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006be4 <SystemClock_Config+0xd0>)
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b42:	4b28      	ldr	r3, [pc, #160]	@ (8006be4 <SystemClock_Config+0xd0>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7fa ffe6 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>
	__HAL_RCC_PWR_CLK_DISABLE();
 8006b54:	4b23      	ldr	r3, [pc, #140]	@ (8006be4 <SystemClock_Config+0xd0>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	4a22      	ldr	r2, [pc, #136]	@ (8006be4 <SystemClock_Config+0xd0>)
 8006b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b5e:	6593      	str	r3, [r2, #88]	@ 0x58

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b64:	2302      	movs	r3, #2
 8006b66:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLM = 1;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLN = 55;
 8006b70:	2337      	movs	r3, #55	@ 0x37
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006b74:	2302      	movs	r3, #2
 8006b76:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fb f85c 	bl	8001c40 <HAL_RCC_OscConfig>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <SystemClock_Config+0x7e>
	{
		/* Initialization Error */
		while (1)
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <SystemClock_Config+0x7a>
			;
	}

	/* To avoid undershoot due to maximum frequency, select PLL as system clock source */
	/* with AHB prescaler divider 2 as first step */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006b92:	230f      	movs	r3, #15
 8006b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b96:	2303      	movs	r3, #3
 8006b98:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8006b9a:	2380      	movs	r3, #128	@ 0x80
 8006b9c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006ba6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006baa:	2103      	movs	r1, #3
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fb fd1d 	bl	80025ec <HAL_RCC_ClockConfig>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <SystemClock_Config+0xa8>
	{
		/* Initialization Error */
		while (1)
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <SystemClock_Config+0xa4>
			;
	}

	/* AHB prescaler divider at 1 as second step */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006bc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006bc8:	2105      	movs	r1, #5
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fb fd0e 	bl	80025ec <HAL_RCC_ClockConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <SystemClock_Config+0xc6>
	{
		/* Initialization Error */
		while (1)
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <SystemClock_Config+0xc2>
			;
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3760      	adds	r7, #96	@ 0x60
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40021000 	.word	0x40021000

08006be8 <SystemHardwareInit>:
 * @brief  System Power Configuration at Boot
 * @param  None
 * @retval None
 */
static void SystemHardwareInit(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b090      	sub	sp, #64	@ 0x40
 8006bec:	af00      	add	r7, sp, #0
	/* Init LEDs  */
	if (LedInitialized != SET)
 8006bee:	4b41      	ldr	r3, [pc, #260]	@ (8006cf4 <SystemHardwareInit+0x10c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d012      	beq.n	8006c1c <SystemHardwareInit+0x34>
	{
		if (TicTacToe_LED_Init(LED9) != TicTacToe_ERROR_NONE)
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f7fd fdb0 	bl	800475c <TicTacToe_LED_Init>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <SystemHardwareInit+0x1e>
		{
			Error_Handler();
 8006c02:	f000 f895 	bl	8006d30 <Error_Handler>
		}
		if (TicTacToe_LED_Init(LED10) != TicTacToe_ERROR_NONE)
 8006c06:	2001      	movs	r0, #1
 8006c08:	f7fd fda8 	bl	800475c <TicTacToe_LED_Init>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <SystemHardwareInit+0x2e>
		{
			Error_Handler();
 8006c12:	f000 f88d 	bl	8006d30 <Error_Handler>
		}
		LedInitialized = SET;
 8006c16:	4b37      	ldr	r3, [pc, #220]	@ (8006cf4 <SystemHardwareInit+0x10c>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
	}

	/* Init User push-button in EXTI Mode */
	if (ButtonInitialized != SET)
 8006c1c:	4b36      	ldr	r3, [pc, #216]	@ (8006cf8 <SystemHardwareInit+0x110>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d00b      	beq.n	8006c3c <SystemHardwareInit+0x54>
	{
		if (TicTacToe_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != TicTacToe_ERROR_NONE)
 8006c24:	2101      	movs	r1, #1
 8006c26:	2000      	movs	r0, #0
 8006c28:	f7fd fe12 	bl	8004850 <TicTacToe_PB_Init>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <SystemHardwareInit+0x4e>
		{
			Error_Handler();
 8006c32:	f000 f87d 	bl	8006d30 <Error_Handler>
		}
		ButtonInitialized = SET;
 8006c36:	4b30      	ldr	r3, [pc, #192]	@ (8006cf8 <SystemHardwareInit+0x110>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize the LCD */
	if (LcdInitialized != SET)
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006cfc <SystemHardwareInit+0x114>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d031      	beq.n	8006ca8 <SystemHardwareInit+0xc0>
	{
		LCD_UTILS_Drv_t lcdDrv;

		/* Initialize the LCD */
		if (TicTacToe_LCD_Init(0, LCD_ORIENTATION_PORTRAIT) != TicTacToe_ERROR_NONE)
 8006c44:	2100      	movs	r1, #0
 8006c46:	2000      	movs	r0, #0
 8006c48:	f7fe fb32 	bl	80052b0 <TicTacToe_LCD_Init>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <SystemHardwareInit+0x6e>
		{
			Error_Handler();
 8006c52:	f000 f86d 	bl	8006d30 <Error_Handler>
		}

		/* Set UTIL_LCD functions */
		lcdDrv.DrawBitmap = TicTacToe_LCD_DrawBitmap;
 8006c56:	4b2a      	ldr	r3, [pc, #168]	@ (8006d00 <SystemHardwareInit+0x118>)
 8006c58:	607b      	str	r3, [r7, #4]
		lcdDrv.FillRGBRect = TicTacToe_LCD_FillRGBRect;
 8006c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d04 <SystemHardwareInit+0x11c>)
 8006c5c:	60bb      	str	r3, [r7, #8]
		lcdDrv.DrawHLine = TicTacToe_LCD_DrawHLine;
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d08 <SystemHardwareInit+0x120>)
 8006c60:	60fb      	str	r3, [r7, #12]
		lcdDrv.DrawVLine = TicTacToe_LCD_DrawVLine;
 8006c62:	4b2a      	ldr	r3, [pc, #168]	@ (8006d0c <SystemHardwareInit+0x124>)
 8006c64:	613b      	str	r3, [r7, #16]
		lcdDrv.FillRect = TicTacToe_LCD_FillRect;
 8006c66:	4b2a      	ldr	r3, [pc, #168]	@ (8006d10 <SystemHardwareInit+0x128>)
 8006c68:	617b      	str	r3, [r7, #20]
		lcdDrv.GetPixel = TicTacToe_LCD_ReadPixel;
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d14 <SystemHardwareInit+0x12c>)
 8006c6c:	61bb      	str	r3, [r7, #24]
		lcdDrv.SetPixel = TicTacToe_LCD_WritePixel;
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d18 <SystemHardwareInit+0x130>)
 8006c70:	61fb      	str	r3, [r7, #28]
		lcdDrv.GetXSize = TicTacToe_LCD_GetXSize;
 8006c72:	4b2a      	ldr	r3, [pc, #168]	@ (8006d1c <SystemHardwareInit+0x134>)
 8006c74:	623b      	str	r3, [r7, #32]
		lcdDrv.GetYSize = TicTacToe_LCD_GetYSize;
 8006c76:	4b2a      	ldr	r3, [pc, #168]	@ (8006d20 <SystemHardwareInit+0x138>)
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
		lcdDrv.SetLayer = TicTacToe_LCD_SetActiveLayer;
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d24 <SystemHardwareInit+0x13c>)
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
		lcdDrv.GetFormat = TicTacToe_LCD_GetFormat;
 8006c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <SystemHardwareInit+0x140>)
 8006c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
		UTIL_LCD_SetFuncDriver(&lcdDrv);
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f8db 	bl	8006e40 <UTIL_LCD_SetFuncDriver>

		/* Clear the LCD */
		UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c8e:	f000 f9ef 	bl	8007070 <UTIL_LCD_Clear>

		/* Set the display on */
		if (TicTacToe_LCD_DisplayOn(0) != TicTacToe_ERROR_NONE)
 8006c92:	2000      	movs	r0, #0
 8006c94:	f7fe fb2e 	bl	80052f4 <TicTacToe_LCD_DisplayOn>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <SystemHardwareInit+0xba>
		{
			Error_Handler();
 8006c9e:	f000 f847 	bl	8006d30 <Error_Handler>
		}

		LcdInitialized = SET;
 8006ca2:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <SystemHardwareInit+0x114>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
	}

	/* Initialize the TouchScreen */
	if (TsInitialized != SET)
 8006ca8:	4b20      	ldr	r3, [pc, #128]	@ (8006d2c <SystemHardwareInit+0x144>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d01d      	beq.n	8006cec <SystemHardwareInit+0x104>
	{
		TS_Init_t TsInit;

		/* Initialize the TouchScreen */
		TsInit.Width = 240;
 8006cb0:	23f0      	movs	r3, #240	@ 0xf0
 8006cb2:	633b      	str	r3, [r7, #48]	@ 0x30
		TsInit.Height = 240;
 8006cb4:	23f0      	movs	r3, #240	@ 0xf0
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
		TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38
		TsInit.Accuracy = 10;
 8006cbc:	230a      	movs	r3, #10
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (TicTacToe_TS_Init(0, &TsInit) != TicTacToe_ERROR_NONE)
 8006cc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f7ff f810 	bl	8005cec <TicTacToe_TS_Init>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <SystemHardwareInit+0xee>
		{
			Error_Handler();
 8006cd2:	f000 f82d 	bl	8006d30 <Error_Handler>
		}

		/* Configure TS interrupt */
		if (TicTacToe_TS_EnableIT(0) != TicTacToe_ERROR_NONE)
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7ff f8f8 	bl	8005ecc <TicTacToe_TS_EnableIT>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <SystemHardwareInit+0xfe>
		{
			Error_Handler();
 8006ce2:	f000 f825 	bl	8006d30 <Error_Handler>
		}

		TsInitialized = SET;
 8006ce6:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <SystemHardwareInit+0x144>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
	}
}
 8006cec:	bf00      	nop
 8006cee:	3740      	adds	r7, #64	@ 0x40
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000cb3 	.word	0x20000cb3
 8006cf8:	20000cb1 	.word	0x20000cb1
 8006cfc:	20000cb2 	.word	0x20000cb2
 8006d00:	0800541d 	.word	0x0800541d
 8006d04:	08005475 	.word	0x08005475
 8006d08:	080054d5 	.word	0x080054d5
 8006d0c:	08005531 	.word	0x08005531
 8006d10:	0800558d 	.word	0x0800558d
 8006d14:	080055ed 	.word	0x080055ed
 8006d18:	08005645 	.word	0x08005645
 8006d1c:	08005345 	.word	0x08005345
 8006d20:	0800539d 	.word	0x0800539d
 8006d24:	080053f5 	.word	0x080053f5
 8006d28:	0800569d 	.word	0x0800569d
 8006d2c:	20000cb4 	.word	0x20000cb4

08006d30 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	while (1)
	{
		/* Toggle LED9 */
		(void)TicTacToe_LED_Toggle(LED9);
 8006d34:	2000      	movs	r0, #0
 8006d36:	f7fd fd6f 	bl	8004818 <TicTacToe_LED_Toggle>
		HAL_Delay(500);
 8006d3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006d3e:	f7f9 fbb7 	bl	80004b0 <HAL_Delay>
		(void)TicTacToe_LED_Toggle(LED9);
 8006d42:	bf00      	nop
 8006d44:	e7f6      	b.n	8006d34 <Error_Handler+0x4>
	...

08006d48 <TicTacToe_PB_Callback>:
 * @brief  TicTacToe Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void TicTacToe_PB_Callback(Button_TypeDef Button)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <TicTacToe_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 8006d58:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <TicTacToe_PB_Callback+0x24>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	701a      	strb	r2, [r3, #0]
	}
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000c98 	.word	0x20000c98

08006d70 <TicTacToe_TS_Callback>:
 * @brief  TS Callback.
 * @param  Instance TS Instance.
 * @retval None.
 */
void TicTacToe_TS_Callback(uint32_t Instance)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	if (Instance == 0)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <TicTacToe_TS_Callback+0x14>
	{
		TouchDetected = SET;
 8006d7e:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <TicTacToe_TS_Callback+0x20>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
	}
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000c99 	.word	0x20000c99

08006d94 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006da2:	b480      	push	{r7}
 8006da4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <HardFault_Handler+0x4>

08006daa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006daa:	b480      	push	{r7}
 8006dac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <MemManage_Handler+0x4>

08006db2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006db2:	b480      	push	{r7}
 8006db4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <BusFault_Handler+0x4>

08006dba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <UsageFault_Handler+0x4>

08006dc2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  while (1)
 8006dd4:	bf00      	nop
 8006dd6:	e7fd      	b.n	8006dd4 <DebugMon_Handler+0x4>

08006dd8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  while (1)
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <PendSV_Handler+0x4>

08006de0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8006de4:	f7f9 fb44 	bl	8000470 <HAL_IncTick>
}
 8006de8:	bf00      	nop
 8006dea:	bd80      	pop	{r7, pc}

08006dec <EXTI1_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32l5xx.s).                                               */
/******************************************************************************/

void EXTI1_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  TicTacToe_TS_IRQHandler(0);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7ff f9b9 	bl	8006168 <TicTacToe_TS_IRQHandler>
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0
//  TicTacToe_SD_DETECT_IRQHandler(0);
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  TicTacToe_PB_IRQHandler(BUTTON_USER);
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f7fd fdb9 	bl	8004984 <TicTacToe_PB_IRQHandler>
}
 8006e12:	bf00      	nop
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8006e16:	b480      	push	{r7}
 8006e18:	af00      	add	r7, sp, #0
//  TicTacToe_AUDIO_IN_IRQHandler(1, AUDIO_IN_DIGITAL_MIC);
}
 8006e1a:	bf00      	nop
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <DMA2_Channel1_IRQHandler>:

void DMA2_Channel1_IRQHandler(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
 // TicTacToe_AUDIO_OUT_IRQHandler(0, AUDIO_OUT_HEADPHONE);
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8006e32:	b480      	push	{r7}
 8006e34:	af00      	add	r7, sp, #0
//  TicTacToe_SD_IRQHandler(0);
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a22      	ldr	r2, [pc, #136]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e4e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4a20      	ldr	r2, [pc, #128]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e56:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e5e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e66:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e6e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	4a18      	ldr	r2, [pc, #96]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e76:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e7e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e86:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	4a12      	ldr	r2, [pc, #72]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e8e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	4a10      	ldr	r2, [pc, #64]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e96:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006e9e:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8006edc <UTIL_LCD_SetFuncDriver+0x9c>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <UTIL_LCD_SetFuncDriver+0x9c>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ee0 <UTIL_LCD_SetFuncDriver+0xa0>)
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8006eb8:	4b07      	ldr	r3, [pc, #28]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	4a09      	ldr	r2, [pc, #36]	@ (8006ee4 <UTIL_LCD_SetFuncDriver+0xa4>)
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8006ec4:	4b04      	ldr	r3, [pc, #16]	@ (8006ed8 <UTIL_LCD_SetFuncDriver+0x98>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	4a07      	ldr	r2, [pc, #28]	@ (8006ee8 <UTIL_LCD_SetFuncDriver+0xa8>)
 8006eca:	4611      	mov	r1, r2
 8006ecc:	2000      	movs	r0, #0
 8006ece:	4798      	blx	r3
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000cf8 	.word	0x20000cf8
 8006edc:	20000cb8 	.word	0x20000cb8
 8006ee0:	20000ccc 	.word	0x20000ccc
 8006ee4:	20000cd0 	.word	0x20000cd0
 8006ee8:	20000cd4 	.word	0x20000cd4

08006eec <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <UTIL_LCD_SetTextColor+0x24>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a05      	ldr	r2, [pc, #20]	@ (8006f10 <UTIL_LCD_SetTextColor+0x24>)
 8006efa:	015b      	lsls	r3, r3, #5
 8006efc:	4413      	add	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000cb8 	.word	0x20000cb8

08006f14 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <UTIL_LCD_SetBackColor+0x24>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a05      	ldr	r2, [pc, #20]	@ (8006f38 <UTIL_LCD_SetBackColor+0x24>)
 8006f22:	015b      	lsls	r3, r3, #5
 8006f24:	4413      	add	r3, r2
 8006f26:	3304      	adds	r3, #4
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	20000cb8 	.word	0x20000cb8

08006f3c <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8006f44:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <UTIL_LCD_SetFont+0x24>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4a05      	ldr	r2, [pc, #20]	@ (8006f60 <UTIL_LCD_SetFont+0x24>)
 8006f4a:	015b      	lsls	r3, r3, #5
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3308      	adds	r3, #8
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20000cb8 	.word	0x20000cb8

08006f64 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8006f72:	4b08      	ldr	r3, [pc, #32]	@ (8006f94 <UTIL_LCD_FillRGBRect+0x30>)
 8006f74:	685c      	ldr	r4, [r3, #4]
 8006f76:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <UTIL_LCD_FillRGBRect+0x34>)
 8006f78:	6918      	ldr	r0, [r3, #16]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	47a0      	blx	r4
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd90      	pop	{r4, r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000cf8 	.word	0x20000cf8
 8006f98:	20000cb8 	.word	0x20000cb8

08006f9c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8006faa:	4b15      	ldr	r3, [pc, #84]	@ (8007000 <UTIL_LCD_DrawHLine+0x64>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d118      	bne.n	8006fe4 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <UTIL_LCD_DrawHLine+0x68>)
 8006fb4:	689c      	ldr	r4, [r3, #8]
 8006fb6:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <UTIL_LCD_DrawHLine+0x64>)
 8006fb8:	6918      	ldr	r0, [r3, #16]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	08db      	lsrs	r3, r3, #3
 8006fbe:	f003 021f 	and.w	r2, r3, #31
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	0a9b      	lsrs	r3, r3, #10
 8006fc6:	015b      	lsls	r3, r3, #5
 8006fc8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	0cdb      	lsrs	r3, r3, #19
 8006fd2:	02db      	lsls	r3, r3, #11
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8006fe2:	e009      	b.n	8006ff8 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8006fe4:	4b07      	ldr	r3, [pc, #28]	@ (8007004 <UTIL_LCD_DrawHLine+0x68>)
 8006fe6:	689c      	ldr	r4, [r3, #8]
 8006fe8:	4b05      	ldr	r3, [pc, #20]	@ (8007000 <UTIL_LCD_DrawHLine+0x64>)
 8006fea:	6918      	ldr	r0, [r3, #16]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	47a0      	blx	r4
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd90      	pop	{r4, r7, pc}
 8007000:	20000cb8 	.word	0x20000cb8
 8007004:	20000cf8 	.word	0x20000cf8

08007008 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8007008:	b5b0      	push	{r4, r5, r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	603a      	str	r2, [r7, #0]
 8007012:	80fb      	strh	r3, [r7, #6]
 8007014:	460b      	mov	r3, r1
 8007016:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007018:	4b13      	ldr	r3, [pc, #76]	@ (8007068 <UTIL_LCD_SetPixel+0x60>)
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d117      	bne.n	8007050 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8007020:	4b12      	ldr	r3, [pc, #72]	@ (800706c <UTIL_LCD_SetPixel+0x64>)
 8007022:	699c      	ldr	r4, [r3, #24]
 8007024:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <UTIL_LCD_SetPixel+0x60>)
 8007026:	6918      	ldr	r0, [r3, #16]
 8007028:	88f9      	ldrh	r1, [r7, #6]
 800702a:	88bd      	ldrh	r5, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 021f 	and.w	r2, r3, #31
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	0a9b      	lsrs	r3, r3, #10
 8007038:	015b      	lsls	r3, r3, #5
 800703a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800703e:	431a      	orrs	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	0cdb      	lsrs	r3, r3, #19
 8007044:	02db      	lsls	r3, r3, #11
 8007046:	b29b      	uxth	r3, r3
 8007048:	4313      	orrs	r3, r2
 800704a:	462a      	mov	r2, r5
 800704c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800704e:	e007      	b.n	8007060 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8007050:	4b06      	ldr	r3, [pc, #24]	@ (800706c <UTIL_LCD_SetPixel+0x64>)
 8007052:	699c      	ldr	r4, [r3, #24]
 8007054:	4b04      	ldr	r3, [pc, #16]	@ (8007068 <UTIL_LCD_SetPixel+0x60>)
 8007056:	6918      	ldr	r0, [r3, #16]
 8007058:	88f9      	ldrh	r1, [r7, #6]
 800705a:	88ba      	ldrh	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	47a0      	blx	r4
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bdb0      	pop	{r4, r5, r7, pc}
 8007068:	20000cb8 	.word	0x20000cb8
 800706c:	20000cf8 	.word	0x20000cf8

08007070 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8007078:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <UTIL_LCD_Clear+0x28>)
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <UTIL_LCD_Clear+0x28>)
 800707e:	6999      	ldr	r1, [r3, #24]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	460b      	mov	r3, r1
 8007086:	2100      	movs	r1, #0
 8007088:	2000      	movs	r0, #0
 800708a:	f000 f9f5 	bl	8007478 <UTIL_LCD_FillRect>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000cb8 	.word	0x20000cb8

0800709c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80070aa:	4b16      	ldr	r3, [pc, #88]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070b0:	015b      	lsls	r3, r3, #5
 80070b2:	4413      	add	r3, r2
 80070b4:	3308      	adds	r3, #8
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80070be:	4911      	ldr	r1, [pc, #68]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070c0:	68c9      	ldr	r1, [r1, #12]
 80070c2:	4810      	ldr	r0, [pc, #64]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070c4:	0149      	lsls	r1, r1, #5
 80070c6:	4401      	add	r1, r0
 80070c8:	3108      	adds	r1, #8
 80070ca:	6809      	ldr	r1, [r1, #0]
 80070cc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80070ce:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	480b      	ldr	r0, [pc, #44]	@ (8007104 <UTIL_LCD_DisplayChar+0x68>)
 80070d8:	015b      	lsls	r3, r3, #5
 80070da:	4403      	add	r3, r0
 80070dc:	3308      	adds	r3, #8
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	889b      	ldrh	r3, [r3, #4]
 80070e2:	3307      	adds	r3, #7
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da00      	bge.n	80070ea <UTIL_LCD_DisplayChar+0x4e>
 80070e8:	3307      	adds	r3, #7
 80070ea:	10db      	asrs	r3, r3, #3
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80070f0:	4413      	add	r3, r2
 80070f2:	461a      	mov	r2, r3
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 faa4 	bl	8007644 <DrawChar>
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000cb8 	.word	0x20000cb8

08007108 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	@ 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8007116:	2301      	movs	r3, #1
 8007118:	627b      	str	r3, [r7, #36]	@ 0x24
 800711a:	2300      	movs	r3, #0
 800711c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800712a:	e002      	b.n	8007132 <UTIL_LCD_DisplayStringAt+0x2a>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	61ba      	str	r2, [r7, #24]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f6      	bne.n	800712c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800713e:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	4a47      	ldr	r2, [pc, #284]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007144:	68d2      	ldr	r2, [r2, #12]
 8007146:	4946      	ldr	r1, [pc, #280]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007148:	0152      	lsls	r2, r2, #5
 800714a:	440a      	add	r2, r1
 800714c:	3208      	adds	r2, #8
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	8892      	ldrh	r2, [r2, #4]
 8007152:	fbb3 f3f2 	udiv	r3, r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d018      	beq.n	8007190 <UTIL_LCD_DisplayStringAt+0x88>
 800715e:	2b03      	cmp	r3, #3
 8007160:	dc2a      	bgt.n	80071b8 <UTIL_LCD_DisplayStringAt+0xb0>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <UTIL_LCD_DisplayStringAt+0x64>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d015      	beq.n	8007196 <UTIL_LCD_DisplayStringAt+0x8e>
 800716a:	e025      	b.n	80071b8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4a3b      	ldr	r2, [pc, #236]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007174:	68d2      	ldr	r2, [r2, #12]
 8007176:	493a      	ldr	r1, [pc, #232]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007178:	0152      	lsls	r2, r2, #5
 800717a:	440a      	add	r2, r1
 800717c:	3208      	adds	r2, #8
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	8892      	ldrh	r2, [r2, #4]
 8007182:	fb02 f303 	mul.w	r3, r2, r3
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800718e:	e016      	b.n	80071be <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007194:	e013      	b.n	80071be <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	4a30      	ldr	r2, [pc, #192]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 800719e:	68d2      	ldr	r2, [r2, #12]
 80071a0:	492f      	ldr	r1, [pc, #188]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 80071a2:	0152      	lsls	r2, r2, #5
 80071a4:	440a      	add	r2, r1
 80071a6:	3208      	adds	r2, #8
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	8892      	ldrh	r2, [r2, #4]
 80071ac:	fb03 f202 	mul.w	r2, r3, r2
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80071b6:	e002      	b.n	80071be <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80071bc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <UTIL_LCD_DisplayStringAt+0xc4>
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071ca:	d31b      	bcc.n	8007204 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80071cc:	2301      	movs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80071d0:	e018      	b.n	8007204 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071dc:	f7ff ff5e 	bl	800709c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80071e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 80071e6:	015b      	lsls	r3, r3, #5
 80071e8:	4413      	add	r3, r2
 80071ea:	3308      	adds	r3, #8
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	889b      	ldrh	r3, [r3, #4]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	4413      	add	r3, r2
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
    i++;
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	3301      	adds	r3, #1
 8007202:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4b13      	ldr	r3, [pc, #76]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007214:	6959      	ldr	r1, [r3, #20]
 8007216:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	4811      	ldr	r0, [pc, #68]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 800721c:	015b      	lsls	r3, r3, #5
 800721e:	4403      	add	r3, r0
 8007220:	3308      	adds	r3, #8
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	889b      	ldrh	r3, [r3, #4]
 8007226:	4618      	mov	r0, r3
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	fb00 f303 	mul.w	r3, r0, r3
 800722e:	1acb      	subs	r3, r1, r3
 8007230:	b29b      	uxth	r3, r3
 8007232:	490b      	ldr	r1, [pc, #44]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007234:	68c9      	ldr	r1, [r1, #12]
 8007236:	480a      	ldr	r0, [pc, #40]	@ (8007260 <UTIL_LCD_DisplayStringAt+0x158>)
 8007238:	0149      	lsls	r1, r1, #5
 800723a:	4401      	add	r1, r0
 800723c:	3108      	adds	r1, #8
 800723e:	6809      	ldr	r1, [r1, #0]
 8007240:	8889      	ldrh	r1, [r1, #4]
 8007242:	428b      	cmp	r3, r1
 8007244:	bf2c      	ite	cs
 8007246:	2301      	movcs	r3, #1
 8007248:	2300      	movcc	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4013      	ands	r3, r2
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1be      	bne.n	80071d2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3728      	adds	r7, #40	@ 0x28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000cb8 	.word	0x20000cb8

08007264 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	f1c3 0303 	rsb	r3, r3, #3
 800727a:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8007284:	e0eb      	b.n	800745e <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	1ad2      	subs	r2, r2, r3
 800728c:	4b79      	ldr	r3, [pc, #484]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	d22d      	bcs.n	80072f0 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	441a      	add	r2, r3
 800729a:	4b76      	ldr	r3, [pc, #472]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d20f      	bcs.n	80072c2 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	b298      	uxth	r0, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	f7ff fea3 	bl	8007008 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	4b6a      	ldr	r3, [pc, #424]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d20f      	bcs.n	80072f0 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	b298      	uxth	r0, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	f7ff fe8c 	bl	8007008 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	4b5f      	ldr	r3, [pc, #380]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d22d      	bcs.n	800735a <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	441a      	add	r2, r3
 8007304:	4b5b      	ldr	r3, [pc, #364]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	429a      	cmp	r2, r3
 800730a:	d20f      	bcs.n	800732c <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	b29a      	uxth	r2, r3
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	b29b      	uxth	r3, r3
 8007314:	4413      	add	r3, r2
 8007316:	b298      	uxth	r0, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	b29a      	uxth	r2, r3
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	b29b      	uxth	r3, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	b29b      	uxth	r3, r3
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	4619      	mov	r1, r3
 8007328:	f7ff fe6e 	bl	8007008 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1ad2      	subs	r2, r2, r3
 8007332:	4b50      	ldr	r3, [pc, #320]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	429a      	cmp	r2, r3
 8007338:	d20f      	bcs.n	800735a <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	b29a      	uxth	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	b29b      	uxth	r3, r3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	b298      	uxth	r0, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	b29a      	uxth	r2, r3
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	b29b      	uxth	r3, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	b29b      	uxth	r3, r3
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4619      	mov	r1, r3
 8007356:	f7ff fe57 	bl	8007008 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	441a      	add	r2, r3
 8007360:	4b44      	ldr	r3, [pc, #272]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	d22d      	bcs.n	80073c4 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	441a      	add	r2, r3
 800736e:	4b41      	ldr	r3, [pc, #260]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	429a      	cmp	r2, r3
 8007374:	d20f      	bcs.n	8007396 <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	b29a      	uxth	r2, r3
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	b29b      	uxth	r3, r3
 800737e:	4413      	add	r3, r2
 8007380:	b298      	uxth	r0, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	b29a      	uxth	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	b29b      	uxth	r3, r3
 800738a:	4413      	add	r3, r2
 800738c:	b29b      	uxth	r3, r3
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	f7ff fe39 	bl	8007008 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	4b35      	ldr	r3, [pc, #212]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d20f      	bcs.n	80073c4 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	b298      	uxth	r0, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	f7ff fe22 	bl	8007008 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	441a      	add	r2, r3
 80073ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d22d      	bcs.n	800742e <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	441a      	add	r2, r3
 80073d8:	4b26      	ldr	r3, [pc, #152]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d20f      	bcs.n	8007400 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	b298      	uxth	r0, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4413      	add	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	4619      	mov	r1, r3
 80073fc:	f7ff fe04 	bl	8007008 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <UTIL_LCD_DrawCircle+0x210>)
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	429a      	cmp	r2, r3
 800740c:	d20f      	bcs.n	800742e <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	b29a      	uxth	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	b29b      	uxth	r3, r3
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	b298      	uxth	r0, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	b29a      	uxth	r2, r3
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	b29b      	uxth	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b29b      	uxth	r3, r3
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	4619      	mov	r1, r3
 800742a:	f7ff fded 	bl	8007008 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da06      	bge.n	8007442 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	009a      	lsls	r2, r3, #2
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	3306      	adds	r3, #6
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e00a      	b.n	8007458 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	009a      	lsls	r2, r3, #2
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	330a      	adds	r3, #10
 8007450:	61fb      	str	r3, [r7, #28]
      current_y--;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3b01      	subs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	3301      	adds	r3, #1
 800745c:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	429a      	cmp	r2, r3
 8007464:	f67f af0f 	bls.w	8007286 <UTIL_LCD_DrawCircle+0x22>
  }
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000cb8 	.word	0x20000cb8

08007478 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b087      	sub	sp, #28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007486:	4b17      	ldr	r3, [pc, #92]	@ (80074e4 <UTIL_LCD_FillRect+0x6c>)
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d11a      	bne.n	80074c4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800748e:	4b16      	ldr	r3, [pc, #88]	@ (80074e8 <UTIL_LCD_FillRect+0x70>)
 8007490:	691c      	ldr	r4, [r3, #16]
 8007492:	4b14      	ldr	r3, [pc, #80]	@ (80074e4 <UTIL_LCD_FillRect+0x6c>)
 8007494:	6918      	ldr	r0, [r3, #16]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	08db      	lsrs	r3, r3, #3
 800749a:	f003 021f 	and.w	r2, r3, #31
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	0a9b      	lsrs	r3, r3, #10
 80074a2:	015b      	lsls	r3, r3, #5
 80074a4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80074a8:	431a      	orrs	r2, r3
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	0cdb      	lsrs	r3, r3, #19
 80074ae:	02db      	lsls	r3, r3, #11
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80074c2:	e00b      	b.n	80074dc <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80074c4:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <UTIL_LCD_FillRect+0x70>)
 80074c6:	691c      	ldr	r4, [r3, #16]
 80074c8:	4b06      	ldr	r3, [pc, #24]	@ (80074e4 <UTIL_LCD_FillRect+0x6c>)
 80074ca:	6918      	ldr	r0, [r3, #16]
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	47a0      	blx	r4
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}
 80074e4:	20000cb8 	.word	0x20000cb8
 80074e8:	20000cf8 	.word	0x20000cf8

080074ec <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	f1c3 0303 	rsb	r3, r3, #3
 8007502:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 800750c:	e08b      	b.n	8007626 <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d036      	beq.n	8007582 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	429a      	cmp	r2, r3
 800751a:	d31c      	bcc.n	8007556 <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	18d0      	adds	r0, r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	005a      	lsls	r2, r3, #1
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1acb      	subs	r3, r1, r3
 800752c:	441a      	add	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	4601      	mov	r1, r0
 8007532:	2000      	movs	r0, #0
 8007534:	f7ff fd32 	bl	8006f9c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	1ad0      	subs	r0, r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	005a      	lsls	r2, r3, #1
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1acb      	subs	r3, r1, r3
 8007548:	441a      	add	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	4601      	mov	r1, r0
 800754e:	2000      	movs	r0, #0
 8007550:	f7ff fd24 	bl	8006f9c <UTIL_LCD_DrawHLine>
 8007554:	e015      	b.n	8007582 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1ad0      	subs	r0, r2, r3
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	18d1      	adds	r1, r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	005a      	lsls	r2, r3, #1
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	f7ff fd18 	bl	8006f9c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	1ad0      	subs	r0, r2, r3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	1ad1      	subs	r1, r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	005a      	lsls	r2, r3, #1
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f7ff fd0d 	bl	8006f9c <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d036      	beq.n	80075f6 <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d31c      	bcc.n	80075ca <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	1ad0      	subs	r0, r2, r3
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	005a      	lsls	r2, r3, #1
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	1acb      	subs	r3, r1, r3
 80075a0:	441a      	add	r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	4601      	mov	r1, r0
 80075a6:	2000      	movs	r0, #0
 80075a8:	f7ff fcf8 	bl	8006f9c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	18d0      	adds	r0, r2, r3
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	005a      	lsls	r2, r3, #1
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	1acb      	subs	r3, r1, r3
 80075bc:	441a      	add	r2, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	4601      	mov	r1, r0
 80075c2:	2000      	movs	r0, #0
 80075c4:	f7ff fcea 	bl	8006f9c <UTIL_LCD_DrawHLine>
 80075c8:	e015      	b.n	80075f6 <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	1ad0      	subs	r0, r2, r3
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	1ad1      	subs	r1, r2, r3
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	005a      	lsls	r2, r3, #1
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	f7ff fcde 	bl	8006f9c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	1ad0      	subs	r0, r2, r3
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	18d1      	adds	r1, r2, r3
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	005a      	lsls	r2, r3, #1
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f7ff fcd3 	bl	8006f9c <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da06      	bge.n	800760a <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	009a      	lsls	r2, r3, #2
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	3306      	adds	r3, #6
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	e00a      	b.n	8007620 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	009a      	lsls	r2, r3, #2
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	330a      	adds	r3, #10
 8007618:	61fb      	str	r3, [r7, #28]
      current_y--;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3b01      	subs	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	3301      	adds	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	429a      	cmp	r2, r3
 800762c:	f67f af6f 	bls.w	800750e <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fe14 	bl	8007264 <UTIL_LCD_DrawCircle>
}
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b0b2      	sub	sp, #200	@ 0xc8
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 800765c:	4ba5      	ldr	r3, [pc, #660]	@ (80078f4 <DrawChar+0x2b0>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4aa4      	ldr	r2, [pc, #656]	@ (80078f4 <DrawChar+0x2b0>)
 8007662:	015b      	lsls	r3, r3, #5
 8007664:	4413      	add	r3, r2
 8007666:	3308      	adds	r3, #8
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	88db      	ldrh	r3, [r3, #6]
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8007670:	4ba0      	ldr	r3, [pc, #640]	@ (80078f4 <DrawChar+0x2b0>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4a9f      	ldr	r2, [pc, #636]	@ (80078f4 <DrawChar+0x2b0>)
 8007676:	015b      	lsls	r3, r3, #5
 8007678:	4413      	add	r3, r2
 800767a:	3308      	adds	r3, #8
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	889b      	ldrh	r3, [r3, #4]
 8007680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8007684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007688:	3307      	adds	r3, #7
 800768a:	f023 0207 	bic.w	r2, r3, #7
 800768e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800769e:	e11c      	b.n	80078da <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80076a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076a4:	3307      	adds	r3, #7
 80076a6:	08db      	lsrs	r3, r3, #3
 80076a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80076ac:	fb02 f303 	mul.w	r3, r2, r3
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 80076b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076bc:	3307      	adds	r3, #7
 80076be:	08db      	lsrs	r3, r3, #3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d002      	beq.n	80076ca <DrawChar+0x86>
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d006      	beq.n	80076d6 <DrawChar+0x92>
 80076c8:	e011      	b.n	80076ee <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80076ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80076d4:	e01d      	b.n	8007712 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80076d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80076e2:	3201      	adds	r2, #1
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80076ec:	e011      	b.n	8007712 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80076ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	041a      	lsls	r2, r3, #16
 80076f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076fa:	3301      	adds	r3, #1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	4313      	orrs	r3, r2
 8007702:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007706:	3202      	adds	r2, #2
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8007710:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007712:	4b78      	ldr	r3, [pc, #480]	@ (80078f4 <DrawChar+0x2b0>)
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	4a77      	ldr	r2, [pc, #476]	@ (80078f4 <DrawChar+0x2b0>)
 8007718:	015b      	lsls	r3, r3, #5
 800771a:	4413      	add	r3, r2
 800771c:	331c      	adds	r3, #28
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	f040 808c 	bne.w	800783e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800772c:	e074      	b.n	8007818 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800772e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800773c:	4413      	add	r3, r2
 800773e:	3b01      	subs	r3, #1
 8007740:	2201      	movs	r2, #1
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	461a      	mov	r2, r3
 8007748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800774c:	4013      	ands	r3, r2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02d      	beq.n	80077ae <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8007752:	4b68      	ldr	r3, [pc, #416]	@ (80078f4 <DrawChar+0x2b0>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	4a67      	ldr	r2, [pc, #412]	@ (80078f4 <DrawChar+0x2b0>)
 8007758:	015b      	lsls	r3, r3, #5
 800775a:	4413      	add	r3, r2
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	08db      	lsrs	r3, r3, #3
 8007760:	b29b      	uxth	r3, r3
 8007762:	f003 031f 	and.w	r3, r3, #31
 8007766:	b29a      	uxth	r2, r3
 8007768:	4b62      	ldr	r3, [pc, #392]	@ (80078f4 <DrawChar+0x2b0>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4961      	ldr	r1, [pc, #388]	@ (80078f4 <DrawChar+0x2b0>)
 800776e:	015b      	lsls	r3, r3, #5
 8007770:	440b      	add	r3, r1
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	0a9b      	lsrs	r3, r3, #10
 8007776:	b29b      	uxth	r3, r3
 8007778:	015b      	lsls	r3, r3, #5
 800777a:	b29b      	uxth	r3, r3
 800777c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8007780:	b29b      	uxth	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b29a      	uxth	r2, r3
 8007786:	4b5b      	ldr	r3, [pc, #364]	@ (80078f4 <DrawChar+0x2b0>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	495a      	ldr	r1, [pc, #360]	@ (80078f4 <DrawChar+0x2b0>)
 800778c:	015b      	lsls	r3, r3, #5
 800778e:	440b      	add	r3, r1
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	0cdb      	lsrs	r3, r3, #19
 8007794:	b29b      	uxth	r3, r3
 8007796:	02db      	lsls	r3, r3, #11
 8007798:	b29b      	uxth	r3, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	33c0      	adds	r3, #192	@ 0xc0
 80077a6:	443b      	add	r3, r7
 80077a8:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80077ac:	e02f      	b.n	800780e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80077ae:	4b51      	ldr	r3, [pc, #324]	@ (80078f4 <DrawChar+0x2b0>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	4a50      	ldr	r2, [pc, #320]	@ (80078f4 <DrawChar+0x2b0>)
 80077b4:	015b      	lsls	r3, r3, #5
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	08db      	lsrs	r3, r3, #3
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	4b4b      	ldr	r3, [pc, #300]	@ (80078f4 <DrawChar+0x2b0>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	494a      	ldr	r1, [pc, #296]	@ (80078f4 <DrawChar+0x2b0>)
 80077cc:	015b      	lsls	r3, r3, #5
 80077ce:	440b      	add	r3, r1
 80077d0:	3304      	adds	r3, #4
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	0a9b      	lsrs	r3, r3, #10
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	015b      	lsls	r3, r3, #5
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	4b43      	ldr	r3, [pc, #268]	@ (80078f4 <DrawChar+0x2b0>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4942      	ldr	r1, [pc, #264]	@ (80078f4 <DrawChar+0x2b0>)
 80077ec:	015b      	lsls	r3, r3, #5
 80077ee:	440b      	add	r3, r1
 80077f0:	3304      	adds	r3, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	0cdb      	lsrs	r3, r3, #19
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	02db      	lsls	r3, r3, #11
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	33c0      	adds	r3, #192	@ 0xc0
 8007808:	443b      	add	r3, r7
 800780a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800780e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007812:	3301      	adds	r3, #1
 8007814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800781c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007820:	429a      	cmp	r2, r3
 8007822:	d384      	bcc.n	800772e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	1c4b      	adds	r3, r1, #1
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800782e:	2301      	movs	r3, #1
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fb94 	bl	8006f64 <UTIL_LCD_FillRGBRect>
 800783c:	e048      	b.n	80078d0 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800783e:	2300      	movs	r3, #0
 8007840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007844:	e032      	b.n	80078ac <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8007846:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800784a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007854:	4413      	add	r3, r2
 8007856:	3b01      	subs	r3, #1
 8007858:	2201      	movs	r2, #1
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	461a      	mov	r2, r3
 8007860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00d      	beq.n	8007886 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 800786a:	4b22      	ldr	r3, [pc, #136]	@ (80078f4 <DrawChar+0x2b0>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	4a21      	ldr	r2, [pc, #132]	@ (80078f4 <DrawChar+0x2b0>)
 8007870:	015b      	lsls	r3, r3, #5
 8007872:	4413      	add	r3, r2
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	33c0      	adds	r3, #192	@ 0xc0
 800787e:	443b      	add	r3, r7
 8007880:	f843 2cac 	str.w	r2, [r3, #-172]
 8007884:	e00d      	b.n	80078a2 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8007886:	4b1b      	ldr	r3, [pc, #108]	@ (80078f4 <DrawChar+0x2b0>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	4a1a      	ldr	r2, [pc, #104]	@ (80078f4 <DrawChar+0x2b0>)
 800788c:	015b      	lsls	r3, r3, #5
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	33c0      	adds	r3, #192	@ 0xc0
 800789c:	443b      	add	r3, r7
 800789e:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80078a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078a6:	3301      	adds	r3, #1
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80078b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d3c6      	bcc.n	8007846 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	1c4b      	adds	r3, r1, #1
 80078bc:	60bb      	str	r3, [r7, #8]
 80078be:	f107 0214 	add.w	r2, r7, #20
 80078c2:	2301      	movs	r3, #1
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fb4a 	bl	8006f64 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80078d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80078de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078e2:	429a      	cmp	r2, r3
 80078e4:	f4ff aedc 	bcc.w	80076a0 <DrawChar+0x5c>
    }
  }
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	37c0      	adds	r7, #192	@ 0xc0
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000cb8 	.word	0x20000cb8

080078f8 <memset>:
 80078f8:	4402      	add	r2, r0
 80078fa:	4603      	mov	r3, r0
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d100      	bne.n	8007902 <memset+0xa>
 8007900:	4770      	bx	lr
 8007902:	f803 1b01 	strb.w	r1, [r3], #1
 8007906:	e7f9      	b.n	80078fc <memset+0x4>

08007908 <__libc_init_array>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4d0d      	ldr	r5, [pc, #52]	@ (8007940 <__libc_init_array+0x38>)
 800790c:	2600      	movs	r6, #0
 800790e:	4c0d      	ldr	r4, [pc, #52]	@ (8007944 <__libc_init_array+0x3c>)
 8007910:	1b64      	subs	r4, r4, r5
 8007912:	10a4      	asrs	r4, r4, #2
 8007914:	42a6      	cmp	r6, r4
 8007916:	d109      	bne.n	800792c <__libc_init_array+0x24>
 8007918:	4d0b      	ldr	r5, [pc, #44]	@ (8007948 <__libc_init_array+0x40>)
 800791a:	2600      	movs	r6, #0
 800791c:	4c0b      	ldr	r4, [pc, #44]	@ (800794c <__libc_init_array+0x44>)
 800791e:	f000 f817 	bl	8007950 <_init>
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	42a6      	cmp	r6, r4
 8007928:	d105      	bne.n	8007936 <__libc_init_array+0x2e>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007930:	3601      	adds	r6, #1
 8007932:	4798      	blx	r3
 8007934:	e7ee      	b.n	8007914 <__libc_init_array+0xc>
 8007936:	f855 3b04 	ldr.w	r3, [r5], #4
 800793a:	3601      	adds	r6, #1
 800793c:	4798      	blx	r3
 800793e:	e7f2      	b.n	8007926 <__libc_init_array+0x1e>
 8007940:	0800a5e8 	.word	0x0800a5e8
 8007944:	0800a5e8 	.word	0x0800a5e8
 8007948:	0800a5e8 	.word	0x0800a5e8
 800794c:	0800a5ec 	.word	0x0800a5ec

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
