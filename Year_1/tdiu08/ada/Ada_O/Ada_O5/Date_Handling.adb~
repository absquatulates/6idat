-- Date_Type_Pack.adb --
-- hugho678: Samarbetat med carbj841, Carl Björlin, samma program

with Ada.Text_IO;         use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

package body Date_Handling is
   
   procedure Get_Correct_String (S : out String) is
      
      C: Character;  
      
   begin
      
      loop
	 Get(C);
	 exit when C /= ' ';
      end loop;
      
      for I in S'Range loop
	 
	 if I /= S'Last and End_Of_Line then
	    raise Length_Error;
	 end if;
	 
	 S(I) := C;

	 if I = S'Last then
	    S(I) := C;
	 else
	    Get(C);
	 end if;
	 
      end loop; 
      
   end Get_Correct_String; 
   
   
      procedure Format (S : in String) is -- Kontrollerar om Format_Error ska kastas
      
   begin 
      
      for I in S'Range loop
	 if I=5 or I=8 then
	    if S(I) /= '-' then
	       raise Format_Error;
	    end if;
	 else
	    if S(I) not in '0'..'9' then
	       raise Format_Error;
	    end if;
	 end if;
      end loop;
      
   end Format;
   
   procedure Year_Month (Date : in Date_Type) is -- Kontrollerar om Year_Error eller Month_Error ska kastas
      
   begin 
      
      if Date.Year < 1532 or Date.Year > 9000 then
	 raise Year_Error;
      elsif Date.Month < 1 or Date.Month > 12 then
	 raise Month_Error;
      end if;     
      
   end Year_Month;
   
   procedure Februari (Date : in Date_Type) is -- Kontrollerar om Day_Error ska kastas vid månad Februari (Day.Month = 2)
      
      Skott: Boolean;  -- Boolean för Skottår
      
   begin
      
      if Date.Year mod 4 = 0 and Date.Year mod 100 /= 0 then
	 Skott := True;
      elsif Date.Year mod 400 = 0 then
	 Skott := True;
      else
	 Skott := False;
      end if;
      
      if Skott then
	 if Date.Day > 29 then
	    raise Day_Error;
	 end if;
      else
	 if Date.Day > 28 then
	    raise Day_Error;
	 end if;
      end if;
      
   end Februari;
   
   procedure Day (Date : in out Date_Type) is -- Kontrollerar om Day_Error ska kastas
      
   begin
      
      if Date.Day < 1 or Date.Day > 31 then
	 raise Day_Error;
      end if;

      if Date.Month = 4 or Date.Month = 6 or Date.Month = 9 or Date.Month = 11 then 
	 if Date.Day > 30 then
	    raise Day_Error;
	 end if;
      end if;
      
      if Date.Month = 2 then
      	 Februari(Date);
      end if;     
      
   end Day;
   
   procedure Get (Date : out Date_Type) is
      
      S : String(1..10);
      
   begin

      Get_Correct_String(S);
      Format(S);
      
      Date.Year  :=  Integer'Value(S(1..4));
      Date.Month :=  Integer'Value(S(6..7));
      Date.Day   :=  Integer'Value(S(9..10));
      
      Year_Month(Date);
      Day(Date);
      
   exception
      when Length_Error =>
	 raise Format_Error;
	 
   end Get;
   
   procedure Put (Date : in Date_Type) is
      
   begin
      
      Put(Date.Year, 0);
      Put("-");
      
      if Date.Month < 10 then
      	 Put(0, 0);
      end if;
      Put(Date.Month, 0);
      
      Put("-");
      
      if Date.Day < 10 then
      	 Put(0, 0);
      End if;
      Put(Date.Day, 0);

      
   end Put; 
   
end Date_Handling;
